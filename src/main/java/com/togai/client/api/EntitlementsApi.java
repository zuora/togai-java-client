/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.BaseSuccessResponse;
import com.togai.client.models.ErrorResponse;
import com.togai.client.models.FeatureCreditEntry;
import com.togai.client.models.GetEntitlementValuesResponse;
import com.togai.client.models.GetFeatureCreditEntriesPaginatedResponse;
import com.togai.client.models.GetFeatureCreditsResponse;
import com.togai.client.models.IngestEventRequest;
import com.togai.client.models.UpdateFeatureCreditsRequest;
import com.togai.client.models.ValidateEntitlementValueRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EntitlementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EntitlementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EntitlementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEntitlementValue
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitlementValueCall(String accountId, String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/entitlements/{feature_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitlementValueValidateBeforeCall(String accountId, String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getEntitlementValue(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getEntitlementValue(Async)");
        }

        return getEntitlementValueCall(accountId, featureId, _callback);

    }

    /**
     * Get entitlement value for a account
     * This API let’s you to get the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @return GetEntitlementValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitlementValuesResponse getEntitlementValue(String accountId, String featureId) throws ApiException {
        ApiResponse<GetEntitlementValuesResponse> localVarResp = getEntitlementValueWithHttpInfo(accountId, featureId);
        return localVarResp.getData();
    }

    /**
     * Get entitlement value for a account
     * This API let’s you to get the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @return ApiResponse&lt;GetEntitlementValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEntitlementValuesResponse> getEntitlementValueWithHttpInfo(String accountId, String featureId) throws ApiException {
        okhttp3.Call localVarCall = getEntitlementValueValidateBeforeCall(accountId, featureId, null);
        Type localVarReturnType = new TypeToken<GetEntitlementValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entitlement value for a account (asynchronously)
     * This API let’s you to get the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitlementValueAsync(String accountId, String featureId, final ApiCallback<GetEntitlementValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitlementValueValidateBeforeCall(accountId, featureId, _callback);
        Type localVarReturnType = new TypeToken<GetEntitlementValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEntitlements
     * @param accountId account_id corresponding to an account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitlementsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/entitlements"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntitlementsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getEntitlements(Async)");
        }

        return getEntitlementsCall(accountId, _callback);

    }

    /**
     * Get entitlements for a account
     * This API let’s you to get the entitlements for a account
     * @param accountId account_id corresponding to an account (required)
     * @return GetEntitlementValuesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public GetEntitlementValuesResponse getEntitlements(String accountId) throws ApiException {
        ApiResponse<GetEntitlementValuesResponse> localVarResp = getEntitlementsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Get entitlements for a account
     * This API let’s you to get the entitlements for a account
     * @param accountId account_id corresponding to an account (required)
     * @return ApiResponse&lt;GetEntitlementValuesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEntitlementValuesResponse> getEntitlementsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<GetEntitlementValuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get entitlements for a account (asynchronously)
     * This API let’s you to get the entitlements for a account
     * @param accountId account_id corresponding to an account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEntitlementsAsync(String accountId, final ApiCallback<GetEntitlementValuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntitlementsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<GetEntitlementValuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeatureCredits
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureCreditsCall(String accountId, String featureId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/features/{feature_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeatureCreditsValidateBeforeCall(String accountId, String featureId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getFeatureCredits(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling getFeatureCredits(Async)");
        }

        return getFeatureCreditsCall(accountId, featureId, _callback);

    }

    /**
     * Get Feature credits balance
     * This API let’s you to get the feature credits balance
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @return GetFeatureCreditsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetFeatureCreditsResponse getFeatureCredits(String accountId, String featureId) throws ApiException {
        ApiResponse<GetFeatureCreditsResponse> localVarResp = getFeatureCreditsWithHttpInfo(accountId, featureId);
        return localVarResp.getData();
    }

    /**
     * Get Feature credits balance
     * This API let’s you to get the feature credits balance
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @return ApiResponse&lt;GetFeatureCreditsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeatureCreditsResponse> getFeatureCreditsWithHttpInfo(String accountId, String featureId) throws ApiException {
        okhttp3.Call localVarCall = getFeatureCreditsValidateBeforeCall(accountId, featureId, null);
        Type localVarReturnType = new TypeToken<GetFeatureCreditsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Feature credits balance (asynchronously)
     * This API let’s you to get the feature credits balance
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeatureCreditsAsync(String accountId, String featureId, final ApiCallback<GetFeatureCreditsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeatureCreditsValidateBeforeCall(accountId, featureId, _callback);
        Type localVarReturnType = new TypeToken<GetFeatureCreditsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ingestEntitledEvent
     * @param ingestEventRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Id </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ingestEntitledEventCall(IngestEventRequest ingestEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ingestEventRequest;

        // create path and map variables
        String localVarPath = "/entitled";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ingestEntitledEventValidateBeforeCall(IngestEventRequest ingestEventRequest, final ApiCallback _callback) throws ApiException {
        return ingestEntitledEventCall(ingestEventRequest, _callback);

    }

    /**
     * Ingest event if a user is entitled to a feature
     * This API let’s you to ingest an event if a user is entitled to a feature
     * @param ingestEventRequest  (optional)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Id </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse ingestEntitledEvent(IngestEventRequest ingestEventRequest) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = ingestEntitledEventWithHttpInfo(ingestEventRequest);
        return localVarResp.getData();
    }

    /**
     * Ingest event if a user is entitled to a feature
     * This API let’s you to ingest an event if a user is entitled to a feature
     * @param ingestEventRequest  (optional)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Id </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> ingestEntitledEventWithHttpInfo(IngestEventRequest ingestEventRequest) throws ApiException {
        okhttp3.Call localVarCall = ingestEntitledEventValidateBeforeCall(ingestEventRequest, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ingest event if a user is entitled to a feature (asynchronously)
     * This API let’s you to ingest an event if a user is entitled to a feature
     * @param ingestEventRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Duplicate Id </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ingestEntitledEventAsync(IngestEventRequest ingestEventRequest, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ingestEntitledEventValidateBeforeCall(ingestEventRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFeatureCreditEntries
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFeatureCreditEntriesCall(String accountId, String featureId, Integer pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/features/{feature_id}/entries"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeatureCreditEntriesValidateBeforeCall(String accountId, String featureId, Integer pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listFeatureCreditEntries(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling listFeatureCreditEntries(Async)");
        }

        return listFeatureCreditEntriesCall(accountId, featureId, pageSize, nextToken, _callback);

    }

    /**
     * List feature credits entries of a feature for an account
     * This API let’s you to list the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @return GetFeatureCreditEntriesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetFeatureCreditEntriesPaginatedResponse listFeatureCreditEntries(String accountId, String featureId, Integer pageSize, String nextToken) throws ApiException {
        ApiResponse<GetFeatureCreditEntriesPaginatedResponse> localVarResp = listFeatureCreditEntriesWithHttpInfo(accountId, featureId, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List feature credits entries of a feature for an account
     * This API let’s you to list the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @return ApiResponse&lt;GetFeatureCreditEntriesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeatureCreditEntriesPaginatedResponse> listFeatureCreditEntriesWithHttpInfo(String accountId, String featureId, Integer pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listFeatureCreditEntriesValidateBeforeCall(accountId, featureId, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<GetFeatureCreditEntriesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List feature credits entries of a feature for an account (asynchronously)
     * This API let’s you to list the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFeatureCreditEntriesAsync(String accountId, String featureId, Integer pageSize, String nextToken, final ApiCallback<GetFeatureCreditEntriesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeatureCreditEntriesValidateBeforeCall(accountId, featureId, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<GetFeatureCreditEntriesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFeatureCreditEntry
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param updateFeatureCreditsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFeatureCreditEntryCall(String accountId, String featureId, String entryId, UpdateFeatureCreditsRequest updateFeatureCreditsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFeatureCreditsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/features/{feature_id}/entries/{entry_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFeatureCreditEntryValidateBeforeCall(String accountId, String featureId, String entryId, UpdateFeatureCreditsRequest updateFeatureCreditsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateFeatureCreditEntry(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling updateFeatureCreditEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateFeatureCreditEntry(Async)");
        }

        return updateFeatureCreditEntryCall(accountId, featureId, entryId, updateFeatureCreditsRequest, _callback);

    }

    /**
     * Update a feature credits entry
     * #### This API let&#39;s you to update the following attributes: &#x60;effectiveUntil&#x60; and &#x60;granted&#x60;  - **effectiveUntil**: must be in future - **granted**: must be greater than the existing usage (previous granted - current balance) 
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param updateFeatureCreditsRequest  (optional)
     * @return FeatureCreditEntry
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public FeatureCreditEntry updateFeatureCreditEntry(String accountId, String featureId, String entryId, UpdateFeatureCreditsRequest updateFeatureCreditsRequest) throws ApiException {
        ApiResponse<FeatureCreditEntry> localVarResp = updateFeatureCreditEntryWithHttpInfo(accountId, featureId, entryId, updateFeatureCreditsRequest);
        return localVarResp.getData();
    }

    /**
     * Update a feature credits entry
     * #### This API let&#39;s you to update the following attributes: &#x60;effectiveUntil&#x60; and &#x60;granted&#x60;  - **effectiveUntil**: must be in future - **granted**: must be greater than the existing usage (previous granted - current balance) 
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param updateFeatureCreditsRequest  (optional)
     * @return ApiResponse&lt;FeatureCreditEntry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeatureCreditEntry> updateFeatureCreditEntryWithHttpInfo(String accountId, String featureId, String entryId, UpdateFeatureCreditsRequest updateFeatureCreditsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateFeatureCreditEntryValidateBeforeCall(accountId, featureId, entryId, updateFeatureCreditsRequest, null);
        Type localVarReturnType = new TypeToken<FeatureCreditEntry>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a feature credits entry (asynchronously)
     * #### This API let&#39;s you to update the following attributes: &#x60;effectiveUntil&#x60; and &#x60;granted&#x60;  - **effectiveUntil**: must be in future - **granted**: must be greater than the existing usage (previous granted - current balance) 
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param updateFeatureCreditsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFeatureCreditEntryAsync(String accountId, String featureId, String entryId, UpdateFeatureCreditsRequest updateFeatureCreditsRequest, final ApiCallback<FeatureCreditEntry> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFeatureCreditEntryValidateBeforeCall(accountId, featureId, entryId, updateFeatureCreditsRequest, _callback);
        Type localVarReturnType = new TypeToken<FeatureCreditEntry>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateEntitlementValue
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param validateEntitlementValueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateEntitlementValueCall(String accountId, String featureId, ValidateEntitlementValueRequest validateEntitlementValueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateEntitlementValueRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/entitlements/{feature_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateEntitlementValueValidateBeforeCall(String accountId, String featureId, ValidateEntitlementValueRequest validateEntitlementValueRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling validateEntitlementValue(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling validateEntitlementValue(Async)");
        }

        return validateEntitlementValueCall(accountId, featureId, validateEntitlementValueRequest, _callback);

    }

    /**
     * Check entitlement value for a account
     * This API let’s you to validate the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param validateEntitlementValueRequest  (optional)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse validateEntitlementValue(String accountId, String featureId, ValidateEntitlementValueRequest validateEntitlementValueRequest) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = validateEntitlementValueWithHttpInfo(accountId, featureId, validateEntitlementValueRequest);
        return localVarResp.getData();
    }

    /**
     * Check entitlement value for a account
     * This API let’s you to validate the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param validateEntitlementValueRequest  (optional)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> validateEntitlementValueWithHttpInfo(String accountId, String featureId, ValidateEntitlementValueRequest validateEntitlementValueRequest) throws ApiException {
        okhttp3.Call localVarCall = validateEntitlementValueValidateBeforeCall(accountId, featureId, validateEntitlementValueRequest, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check entitlement value for a account (asynchronously)
     * This API let’s you to validate the entitlement value for a account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param validateEntitlementValueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateEntitlementValueAsync(String accountId, String featureId, ValidateEntitlementValueRequest validateEntitlementValueRequest, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateEntitlementValueValidateBeforeCall(accountId, featureId, validateEntitlementValueRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for voidFeatureCreditEntry
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to void a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidFeatureCreditEntryCall(String accountId, String featureId, String entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/features/{feature_id}/entries/{entry_id}/void"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "feature_id" + "}", localVarApiClient.escapeString(featureId.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call voidFeatureCreditEntryValidateBeforeCall(String accountId, String featureId, String entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling voidFeatureCreditEntry(Async)");
        }

        // verify the required parameter 'featureId' is set
        if (featureId == null) {
            throw new ApiException("Missing the required parameter 'featureId' when calling voidFeatureCreditEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling voidFeatureCreditEntry(Async)");
        }

        return voidFeatureCreditEntryCall(accountId, featureId, entryId, _callback);

    }

    /**
     * Void a feature credits entry of a feature for an account
     * This API let’s you to void the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to void a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse voidFeatureCreditEntry(String accountId, String featureId, String entryId) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = voidFeatureCreditEntryWithHttpInfo(accountId, featureId, entryId);
        return localVarResp.getData();
    }

    /**
     * Void a feature credits entry of a feature for an account
     * This API let’s you to void the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to void a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> voidFeatureCreditEntryWithHttpInfo(String accountId, String featureId, String entryId) throws ApiException {
        okhttp3.Call localVarCall = voidFeatureCreditEntryValidateBeforeCall(accountId, featureId, entryId, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Void a feature credits entry of a feature for an account (asynchronously)
     * This API let’s you to void the feature credits entries of a feature for an account
     * @param accountId account_id corresponding to an account (required)
     * @param featureId feature_id corresponding to a feature (required)
     * @param entryId &#x60;entryId&#x60; corresponding to a particular entitlement/overage grant entry  Formats: 1. If source of entry is an entitlement grant rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$PRICE_PLAN&#x60; 2. If source of entry is an entitlement overage rate card in price plan: &#x60;schedule_id#pricing_cycle_start_date$OVERAGE&#x60; 3. If source of entry is a purchase: &#x60;purchase_id#int_index$PURCHASE&#x60;  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to void a feature credit entry. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Entry not found. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call voidFeatureCreditEntryAsync(String accountId, String featureId, String entryId, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = voidFeatureCreditEntryValidateBeforeCall(accountId, featureId, entryId, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
