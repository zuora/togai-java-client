/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.InvoiceTiming;
import com.togai.client.models.RateCardDetails;
import com.togai.client.models.RateCardType;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * RateCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class RateCard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_BILLABLE_ID = "billableId";
  @SerializedName(SERIALIZED_NAME_BILLABLE_ID)
  @javax.annotation.Nonnull
  private String billableId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private RateCardType type;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nonnull
  private String displayName;

  public static final String SERIALIZED_NAME_INVOICE_TIMING = "invoiceTiming";
  @SerializedName(SERIALIZED_NAME_INVOICE_TIMING)
  @javax.annotation.Nonnull
  private InvoiceTiming invoiceTiming;

  public static final String SERIALIZED_NAME_RATE_CARD_DETAILS = "rateCardDetails";
  @SerializedName(SERIALIZED_NAME_RATE_CARD_DETAILS)
  @javax.annotation.Nonnull
  private RateCardDetails rateCardDetails;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  @javax.annotation.Nonnull
  private String referenceId;

  public static final String SERIALIZED_NAME_REFERENCE_TYPE = "referenceType";
  @SerializedName(SERIALIZED_NAME_REFERENCE_TYPE)
  @javax.annotation.Nonnull
  private String referenceType;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  @javax.annotation.Nullable
  private Set<String> currencies = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_PRICE_PLAN_ID = "pricePlanId";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_ID)
  @javax.annotation.Nonnull
  private String pricePlanId;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nullable
  private String accountId;

  public RateCard() {
  }

  public RateCard billableId(@javax.annotation.Nonnull String billableId) {
    this.billableId = billableId;
    return this;
  }

  /**
   * Billable identifier
   * @return billableId
   */
  @javax.annotation.Nonnull
  public String getBillableId() {
    return billableId;
  }

  public void setBillableId(@javax.annotation.Nonnull String billableId) {
    this.billableId = billableId;
  }


  public RateCard type(@javax.annotation.Nonnull RateCardType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public RateCardType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull RateCardType type) {
    this.type = type;
  }


  public RateCard displayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the rate card
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nonnull String displayName) {
    this.displayName = displayName;
  }


  public RateCard invoiceTiming(@javax.annotation.Nonnull InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
    return this;
  }

  /**
   * Get invoiceTiming
   * @return invoiceTiming
   */
  @javax.annotation.Nonnull
  public InvoiceTiming getInvoiceTiming() {
    return invoiceTiming;
  }

  public void setInvoiceTiming(@javax.annotation.Nonnull InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
  }


  public RateCard rateCardDetails(@javax.annotation.Nonnull RateCardDetails rateCardDetails) {
    this.rateCardDetails = rateCardDetails;
    return this;
  }

  /**
   * Get rateCardDetails
   * @return rateCardDetails
   */
  @javax.annotation.Nonnull
  public RateCardDetails getRateCardDetails() {
    return rateCardDetails;
  }

  public void setRateCardDetails(@javax.annotation.Nonnull RateCardDetails rateCardDetails) {
    this.rateCardDetails = rateCardDetails;
  }


  public RateCard tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Tag for rate card
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public RateCard name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public RateCard referenceId(@javax.annotation.Nonnull String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(@javax.annotation.Nonnull String referenceId) {
    this.referenceId = referenceId;
  }


  public RateCard referenceType(@javax.annotation.Nonnull String referenceType) {
    this.referenceType = referenceType;
    return this;
  }

  /**
   * Get referenceType
   * @return referenceType
   */
  @javax.annotation.Nonnull
  public String getReferenceType() {
    return referenceType;
  }

  public void setReferenceType(@javax.annotation.Nonnull String referenceType) {
    this.referenceType = referenceType;
  }


  public RateCard currencies(@javax.annotation.Nullable Set<String> currencies) {
    this.currencies = currencies;
    return this;
  }

  public RateCard addCurrenciesItem(String currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new LinkedHashSet<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * List of currencies supported by the rate card
   * @return currencies
   */
  @javax.annotation.Nullable
  public Set<String> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(@javax.annotation.Nullable Set<String> currencies) {
    this.currencies = currencies;
  }


  public RateCard pricePlanId(@javax.annotation.Nonnull String pricePlanId) {
    this.pricePlanId = pricePlanId;
    return this;
  }

  /**
   * Price plan identifier
   * @return pricePlanId
   */
  @javax.annotation.Nonnull
  public String getPricePlanId() {
    return pricePlanId;
  }

  public void setPricePlanId(@javax.annotation.Nonnull String pricePlanId) {
    this.pricePlanId = pricePlanId;
  }


  public RateCard accountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Account identifier
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nullable String accountId) {
    this.accountId = accountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateCard rateCard = (RateCard) o;
    return Objects.equals(this.billableId, rateCard.billableId) &&
        Objects.equals(this.type, rateCard.type) &&
        Objects.equals(this.displayName, rateCard.displayName) &&
        Objects.equals(this.invoiceTiming, rateCard.invoiceTiming) &&
        Objects.equals(this.rateCardDetails, rateCard.rateCardDetails) &&
        Objects.equals(this.tag, rateCard.tag) &&
        Objects.equals(this.name, rateCard.name) &&
        Objects.equals(this.referenceId, rateCard.referenceId) &&
        Objects.equals(this.referenceType, rateCard.referenceType) &&
        Objects.equals(this.currencies, rateCard.currencies) &&
        Objects.equals(this.pricePlanId, rateCard.pricePlanId) &&
        Objects.equals(this.accountId, rateCard.accountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billableId, type, displayName, invoiceTiming, rateCardDetails, tag, name, referenceId, referenceType, currencies, pricePlanId, accountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateCard {\n");
    sb.append("    billableId: ").append(toIndentedString(billableId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    invoiceTiming: ").append(toIndentedString(invoiceTiming)).append("\n");
    sb.append("    rateCardDetails: ").append(toIndentedString(rateCardDetails)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    referenceType: ").append(toIndentedString(referenceType)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    pricePlanId: ").append(toIndentedString(pricePlanId)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billableId");
    openapiFields.add("type");
    openapiFields.add("displayName");
    openapiFields.add("invoiceTiming");
    openapiFields.add("rateCardDetails");
    openapiFields.add("tag");
    openapiFields.add("name");
    openapiFields.add("referenceId");
    openapiFields.add("referenceType");
    openapiFields.add("currencies");
    openapiFields.add("pricePlanId");
    openapiFields.add("accountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("billableId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("invoiceTiming");
    openapiRequiredFields.add("rateCardDetails");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("referenceType");
    openapiRequiredFields.add("pricePlanId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateCard is not found in the empty JSON string", RateCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RateCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("billableId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billableId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billableId").toString()));
      }
      // validate the required field `type`
      RateCardType.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the required field `invoiceTiming`
      InvoiceTiming.validateJsonElement(jsonObj.get("invoiceTiming"));
      // validate the required field `rateCardDetails`
      RateCardDetails.validateJsonElement(jsonObj.get("rateCardDetails"));
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if (!jsonObj.get("referenceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull() && !jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      if (!jsonObj.get("pricePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanId").toString()));
      }
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateCard.class));

       return (TypeAdapter<T>) new TypeAdapter<RateCard>() {
           @Override
           public void write(JsonWriter out, RateCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateCard
   * @throws IOException if the JSON string is invalid with respect to RateCard
   */
  public static RateCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateCard.class);
  }

  /**
   * Convert an instance of RateCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

