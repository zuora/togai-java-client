/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.BillingEntitlementRateCard;
import com.togai.client.models.CreditGrantRateCard;
import com.togai.client.models.EntitlementOverageRateCard;
import com.togai.client.models.FixedFeeRateCard;
import com.togai.client.models.LicenseRateCard;
import com.togai.client.models.MinimumCommitment;
import com.togai.client.models.UsageRateCard;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Rate card details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class RateCardDetails implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FIXED_FEE_RATE_CARD = "fixedFeeRateCard";
  @SerializedName(SERIALIZED_NAME_FIXED_FEE_RATE_CARD)
  @javax.annotation.Nullable
  private FixedFeeRateCard fixedFeeRateCard;

  public static final String SERIALIZED_NAME_BILLING_ENTITLEMENT_RATE_CARD = "billingEntitlementRateCard";
  @SerializedName(SERIALIZED_NAME_BILLING_ENTITLEMENT_RATE_CARD)
  @javax.annotation.Nullable
  private BillingEntitlementRateCard billingEntitlementRateCard;

  public static final String SERIALIZED_NAME_CREDIT_GRANT_RATE_CARD = "creditGrantRateCard";
  @SerializedName(SERIALIZED_NAME_CREDIT_GRANT_RATE_CARD)
  @javax.annotation.Nullable
  private CreditGrantRateCard creditGrantRateCard;

  public static final String SERIALIZED_NAME_USAGE_RATE_CARD = "usageRateCard";
  @SerializedName(SERIALIZED_NAME_USAGE_RATE_CARD)
  @javax.annotation.Nullable
  private UsageRateCard usageRateCard;

  public static final String SERIALIZED_NAME_LICENSE_RATE_CARD = "licenseRateCard";
  @SerializedName(SERIALIZED_NAME_LICENSE_RATE_CARD)
  @javax.annotation.Nullable
  private LicenseRateCard licenseRateCard;

  public static final String SERIALIZED_NAME_ENTITLEMENT_OVERAGE_RATE_CARD = "entitlementOverageRateCard";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_OVERAGE_RATE_CARD)
  @javax.annotation.Nullable
  private EntitlementOverageRateCard entitlementOverageRateCard;

  public static final String SERIALIZED_NAME_MINIMUM_COMMITMENT_RATE_CARD = "minimumCommitmentRateCard";
  @SerializedName(SERIALIZED_NAME_MINIMUM_COMMITMENT_RATE_CARD)
  @javax.annotation.Nullable
  private MinimumCommitment minimumCommitmentRateCard;

  public RateCardDetails() {
  }

  public RateCardDetails fixedFeeRateCard(@javax.annotation.Nullable FixedFeeRateCard fixedFeeRateCard) {
    this.fixedFeeRateCard = fixedFeeRateCard;
    return this;
  }

  /**
   * Get fixedFeeRateCard
   * @return fixedFeeRateCard
   */
  @javax.annotation.Nullable
  public FixedFeeRateCard getFixedFeeRateCard() {
    return fixedFeeRateCard;
  }

  public void setFixedFeeRateCard(@javax.annotation.Nullable FixedFeeRateCard fixedFeeRateCard) {
    this.fixedFeeRateCard = fixedFeeRateCard;
  }


  public RateCardDetails billingEntitlementRateCard(@javax.annotation.Nullable BillingEntitlementRateCard billingEntitlementRateCard) {
    this.billingEntitlementRateCard = billingEntitlementRateCard;
    return this;
  }

  /**
   * Get billingEntitlementRateCard
   * @return billingEntitlementRateCard
   */
  @javax.annotation.Nullable
  public BillingEntitlementRateCard getBillingEntitlementRateCard() {
    return billingEntitlementRateCard;
  }

  public void setBillingEntitlementRateCard(@javax.annotation.Nullable BillingEntitlementRateCard billingEntitlementRateCard) {
    this.billingEntitlementRateCard = billingEntitlementRateCard;
  }


  public RateCardDetails creditGrantRateCard(@javax.annotation.Nullable CreditGrantRateCard creditGrantRateCard) {
    this.creditGrantRateCard = creditGrantRateCard;
    return this;
  }

  /**
   * Get creditGrantRateCard
   * @return creditGrantRateCard
   */
  @javax.annotation.Nullable
  public CreditGrantRateCard getCreditGrantRateCard() {
    return creditGrantRateCard;
  }

  public void setCreditGrantRateCard(@javax.annotation.Nullable CreditGrantRateCard creditGrantRateCard) {
    this.creditGrantRateCard = creditGrantRateCard;
  }


  public RateCardDetails usageRateCard(@javax.annotation.Nullable UsageRateCard usageRateCard) {
    this.usageRateCard = usageRateCard;
    return this;
  }

  /**
   * Get usageRateCard
   * @return usageRateCard
   */
  @javax.annotation.Nullable
  public UsageRateCard getUsageRateCard() {
    return usageRateCard;
  }

  public void setUsageRateCard(@javax.annotation.Nullable UsageRateCard usageRateCard) {
    this.usageRateCard = usageRateCard;
  }


  public RateCardDetails licenseRateCard(@javax.annotation.Nullable LicenseRateCard licenseRateCard) {
    this.licenseRateCard = licenseRateCard;
    return this;
  }

  /**
   * Get licenseRateCard
   * @return licenseRateCard
   */
  @javax.annotation.Nullable
  public LicenseRateCard getLicenseRateCard() {
    return licenseRateCard;
  }

  public void setLicenseRateCard(@javax.annotation.Nullable LicenseRateCard licenseRateCard) {
    this.licenseRateCard = licenseRateCard;
  }


  public RateCardDetails entitlementOverageRateCard(@javax.annotation.Nullable EntitlementOverageRateCard entitlementOverageRateCard) {
    this.entitlementOverageRateCard = entitlementOverageRateCard;
    return this;
  }

  /**
   * Get entitlementOverageRateCard
   * @return entitlementOverageRateCard
   */
  @javax.annotation.Nullable
  public EntitlementOverageRateCard getEntitlementOverageRateCard() {
    return entitlementOverageRateCard;
  }

  public void setEntitlementOverageRateCard(@javax.annotation.Nullable EntitlementOverageRateCard entitlementOverageRateCard) {
    this.entitlementOverageRateCard = entitlementOverageRateCard;
  }


  public RateCardDetails minimumCommitmentRateCard(@javax.annotation.Nullable MinimumCommitment minimumCommitmentRateCard) {
    this.minimumCommitmentRateCard = minimumCommitmentRateCard;
    return this;
  }

  /**
   * Get minimumCommitmentRateCard
   * @return minimumCommitmentRateCard
   */
  @javax.annotation.Nullable
  public MinimumCommitment getMinimumCommitmentRateCard() {
    return minimumCommitmentRateCard;
  }

  public void setMinimumCommitmentRateCard(@javax.annotation.Nullable MinimumCommitment minimumCommitmentRateCard) {
    this.minimumCommitmentRateCard = minimumCommitmentRateCard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateCardDetails rateCardDetails = (RateCardDetails) o;
    return Objects.equals(this.fixedFeeRateCard, rateCardDetails.fixedFeeRateCard) &&
        Objects.equals(this.billingEntitlementRateCard, rateCardDetails.billingEntitlementRateCard) &&
        Objects.equals(this.creditGrantRateCard, rateCardDetails.creditGrantRateCard) &&
        Objects.equals(this.usageRateCard, rateCardDetails.usageRateCard) &&
        Objects.equals(this.licenseRateCard, rateCardDetails.licenseRateCard) &&
        Objects.equals(this.entitlementOverageRateCard, rateCardDetails.entitlementOverageRateCard) &&
        Objects.equals(this.minimumCommitmentRateCard, rateCardDetails.minimumCommitmentRateCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedFeeRateCard, billingEntitlementRateCard, creditGrantRateCard, usageRateCard, licenseRateCard, entitlementOverageRateCard, minimumCommitmentRateCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateCardDetails {\n");
    sb.append("    fixedFeeRateCard: ").append(toIndentedString(fixedFeeRateCard)).append("\n");
    sb.append("    billingEntitlementRateCard: ").append(toIndentedString(billingEntitlementRateCard)).append("\n");
    sb.append("    creditGrantRateCard: ").append(toIndentedString(creditGrantRateCard)).append("\n");
    sb.append("    usageRateCard: ").append(toIndentedString(usageRateCard)).append("\n");
    sb.append("    licenseRateCard: ").append(toIndentedString(licenseRateCard)).append("\n");
    sb.append("    entitlementOverageRateCard: ").append(toIndentedString(entitlementOverageRateCard)).append("\n");
    sb.append("    minimumCommitmentRateCard: ").append(toIndentedString(minimumCommitmentRateCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixedFeeRateCard");
    openapiFields.add("billingEntitlementRateCard");
    openapiFields.add("creditGrantRateCard");
    openapiFields.add("usageRateCard");
    openapiFields.add("licenseRateCard");
    openapiFields.add("entitlementOverageRateCard");
    openapiFields.add("minimumCommitmentRateCard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateCardDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateCardDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateCardDetails is not found in the empty JSON string", RateCardDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateCardDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateCardDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `fixedFeeRateCard`
      if (jsonObj.get("fixedFeeRateCard") != null && !jsonObj.get("fixedFeeRateCard").isJsonNull()) {
        FixedFeeRateCard.validateJsonElement(jsonObj.get("fixedFeeRateCard"));
      }
      // validate the optional field `billingEntitlementRateCard`
      if (jsonObj.get("billingEntitlementRateCard") != null && !jsonObj.get("billingEntitlementRateCard").isJsonNull()) {
        BillingEntitlementRateCard.validateJsonElement(jsonObj.get("billingEntitlementRateCard"));
      }
      // validate the optional field `creditGrantRateCard`
      if (jsonObj.get("creditGrantRateCard") != null && !jsonObj.get("creditGrantRateCard").isJsonNull()) {
        CreditGrantRateCard.validateJsonElement(jsonObj.get("creditGrantRateCard"));
      }
      // validate the optional field `usageRateCard`
      if (jsonObj.get("usageRateCard") != null && !jsonObj.get("usageRateCard").isJsonNull()) {
        UsageRateCard.validateJsonElement(jsonObj.get("usageRateCard"));
      }
      // validate the optional field `licenseRateCard`
      if (jsonObj.get("licenseRateCard") != null && !jsonObj.get("licenseRateCard").isJsonNull()) {
        LicenseRateCard.validateJsonElement(jsonObj.get("licenseRateCard"));
      }
      // validate the optional field `entitlementOverageRateCard`
      if (jsonObj.get("entitlementOverageRateCard") != null && !jsonObj.get("entitlementOverageRateCard").isJsonNull()) {
        EntitlementOverageRateCard.validateJsonElement(jsonObj.get("entitlementOverageRateCard"));
      }
      // validate the optional field `minimumCommitmentRateCard`
      if (jsonObj.get("minimumCommitmentRateCard") != null && !jsonObj.get("minimumCommitmentRateCard").isJsonNull()) {
        MinimumCommitment.validateJsonElement(jsonObj.get("minimumCommitmentRateCard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateCardDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateCardDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateCardDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateCardDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RateCardDetails>() {
           @Override
           public void write(JsonWriter out, RateCardDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateCardDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateCardDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateCardDetails
   * @throws IOException if the JSON string is invalid with respect to RateCardDetails
   */
  public static RateCardDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateCardDetails.class);
  }

  /**
   * Convert an instance of RateCardDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

