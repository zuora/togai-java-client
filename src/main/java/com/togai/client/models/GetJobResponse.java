/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * GetJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GetJobResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PRICE_PLAN("PRICE_PLAN"),
    
    EVENT_CORRECTIONS("EVENT_CORRECTIONS"),
    
    BILL_RUN("BILL_RUN");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private TypeEnum type;

  public static final String SERIALIZED_NAME_SETTLED_AT = "settledAt";
  @SerializedName(SERIALIZED_NAME_SETTLED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime settledAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SCHEDULED("SCHEDULED"),
    
    PENDING("PENDING"),
    
    INITIALIZED("INITIALIZED"),
    
    WAITING_FOR_CONFIRMATION("WAITING_FOR_CONFIRMATION"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    COMPLETED("COMPLETED"),
    
    FAILED("FAILED"),
    
    CANCELLED("CANCELLED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TOTAL_JOB_ENTRIES = "totalJobEntries";
  @SerializedName(SERIALIZED_NAME_TOTAL_JOB_ENTRIES)
  @javax.annotation.Nonnull
  private Integer totalJobEntries;

  public static final String SERIALIZED_NAME_PENDING_JOB_ENTRIES = "pendingJobEntries";
  @SerializedName(SERIALIZED_NAME_PENDING_JOB_ENTRIES)
  @javax.annotation.Nonnull
  private Integer pendingJobEntries;

  public static final String SERIALIZED_NAME_FAILED_JOB_ENTRIES = "failedJobEntries";
  @SerializedName(SERIALIZED_NAME_FAILED_JOB_ENTRIES)
  @javax.annotation.Nonnull
  private Integer failedJobEntries;

  public static final String SERIALIZED_NAME_COMPLETED_JOB_ENTRIES = "completedJobEntries";
  @SerializedName(SERIALIZED_NAME_COMPLETED_JOB_ENTRIES)
  @javax.annotation.Nonnull
  private Integer completedJobEntries;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, String> metadata = new HashMap<>();

  public GetJobResponse() {
  }

  public GetJobResponse id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public GetJobResponse type(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull TypeEnum type) {
    this.type = type;
  }


  public GetJobResponse settledAt(@javax.annotation.Nullable OffsetDateTime settledAt) {
    this.settledAt = settledAt;
    return this;
  }

  /**
   * Get settledAt
   * @return settledAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSettledAt() {
    return settledAt;
  }

  public void setSettledAt(@javax.annotation.Nullable OffsetDateTime settledAt) {
    this.settledAt = settledAt;
  }


  public GetJobResponse updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public GetJobResponse status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public GetJobResponse totalJobEntries(@javax.annotation.Nonnull Integer totalJobEntries) {
    this.totalJobEntries = totalJobEntries;
    return this;
  }

  /**
   * Get totalJobEntries
   * @return totalJobEntries
   */
  @javax.annotation.Nonnull
  public Integer getTotalJobEntries() {
    return totalJobEntries;
  }

  public void setTotalJobEntries(@javax.annotation.Nonnull Integer totalJobEntries) {
    this.totalJobEntries = totalJobEntries;
  }


  public GetJobResponse pendingJobEntries(@javax.annotation.Nonnull Integer pendingJobEntries) {
    this.pendingJobEntries = pendingJobEntries;
    return this;
  }

  /**
   * Get pendingJobEntries
   * @return pendingJobEntries
   */
  @javax.annotation.Nonnull
  public Integer getPendingJobEntries() {
    return pendingJobEntries;
  }

  public void setPendingJobEntries(@javax.annotation.Nonnull Integer pendingJobEntries) {
    this.pendingJobEntries = pendingJobEntries;
  }


  public GetJobResponse failedJobEntries(@javax.annotation.Nonnull Integer failedJobEntries) {
    this.failedJobEntries = failedJobEntries;
    return this;
  }

  /**
   * Get failedJobEntries
   * @return failedJobEntries
   */
  @javax.annotation.Nonnull
  public Integer getFailedJobEntries() {
    return failedJobEntries;
  }

  public void setFailedJobEntries(@javax.annotation.Nonnull Integer failedJobEntries) {
    this.failedJobEntries = failedJobEntries;
  }


  public GetJobResponse completedJobEntries(@javax.annotation.Nonnull Integer completedJobEntries) {
    this.completedJobEntries = completedJobEntries;
    return this;
  }

  /**
   * Get completedJobEntries
   * @return completedJobEntries
   */
  @javax.annotation.Nonnull
  public Integer getCompletedJobEntries() {
    return completedJobEntries;
  }

  public void setCompletedJobEntries(@javax.annotation.Nonnull Integer completedJobEntries) {
    this.completedJobEntries = completedJobEntries;
  }


  public GetJobResponse metadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public GetJobResponse putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetJobResponse getJobResponse = (GetJobResponse) o;
    return Objects.equals(this.id, getJobResponse.id) &&
        Objects.equals(this.type, getJobResponse.type) &&
        Objects.equals(this.settledAt, getJobResponse.settledAt) &&
        Objects.equals(this.updatedAt, getJobResponse.updatedAt) &&
        Objects.equals(this.status, getJobResponse.status) &&
        Objects.equals(this.totalJobEntries, getJobResponse.totalJobEntries) &&
        Objects.equals(this.pendingJobEntries, getJobResponse.pendingJobEntries) &&
        Objects.equals(this.failedJobEntries, getJobResponse.failedJobEntries) &&
        Objects.equals(this.completedJobEntries, getJobResponse.completedJobEntries) &&
        Objects.equals(this.metadata, getJobResponse.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, settledAt, updatedAt, status, totalJobEntries, pendingJobEntries, failedJobEntries, completedJobEntries, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetJobResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    settledAt: ").append(toIndentedString(settledAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    totalJobEntries: ").append(toIndentedString(totalJobEntries)).append("\n");
    sb.append("    pendingJobEntries: ").append(toIndentedString(pendingJobEntries)).append("\n");
    sb.append("    failedJobEntries: ").append(toIndentedString(failedJobEntries)).append("\n");
    sb.append("    completedJobEntries: ").append(toIndentedString(completedJobEntries)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("settledAt");
    openapiFields.add("updatedAt");
    openapiFields.add("status");
    openapiFields.add("totalJobEntries");
    openapiFields.add("pendingJobEntries");
    openapiFields.add("failedJobEntries");
    openapiFields.add("completedJobEntries");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("totalJobEntries");
    openapiRequiredFields.add("pendingJobEntries");
    openapiRequiredFields.add("failedJobEntries");
    openapiRequiredFields.add("completedJobEntries");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetJobResponse is not found in the empty JSON string", GetJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetJobResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetJobResponse>() {
           @Override
           public void write(JsonWriter out, GetJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetJobResponse
   * @throws IOException if the JSON string is invalid with respect to GetJobResponse
   */
  public static GetJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetJobResponse.class);
  }

  /**
   * Convert an instance of GetJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

