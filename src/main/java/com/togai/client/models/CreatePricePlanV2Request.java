/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricePlanType;
import com.togai.client.models.PricingCycleConfig;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to create a price plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class CreatePricePlanV2Request implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private PricePlanType type;

  public static final String SERIALIZED_NAME_PRICING_CYCLE_CONFIG = "pricingCycleConfig";
  @SerializedName(SERIALIZED_NAME_PRICING_CYCLE_CONFIG)
  @javax.annotation.Nullable
  private PricingCycleConfig pricingCycleConfig;

  public static final String SERIALIZED_NAME_SUPPORTED_CURRENCIES = "supportedCurrencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CURRENCIES)
  @javax.annotation.Nonnull
  private Set<String> supportedCurrencies = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DEFERRED_REVENUE = "deferredRevenue";
  @SerializedName(SERIALIZED_NAME_DEFERRED_REVENUE)
  @javax.annotation.Nullable
  private Boolean deferredRevenue;

  public static final String SERIALIZED_NAME_ALLOW_ONGOING_CYCLE_UPDATES = "allowOngoingCycleUpdates";
  @SerializedName(SERIALIZED_NAME_ALLOW_ONGOING_CYCLE_UPDATES)
  @javax.annotation.Nullable
  private Boolean allowOngoingCycleUpdates;

  public CreatePricePlanV2Request() {
  }

  public CreatePricePlanV2Request name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the price plan
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreatePricePlanV2Request description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of price plan
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public CreatePricePlanV2Request type(@javax.annotation.Nonnull PricePlanType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public PricePlanType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull PricePlanType type) {
    this.type = type;
  }


  public CreatePricePlanV2Request pricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
    return this;
  }

  /**
   * Get pricingCycleConfig
   * @return pricingCycleConfig
   */
  @javax.annotation.Nullable
  public PricingCycleConfig getPricingCycleConfig() {
    return pricingCycleConfig;
  }

  public void setPricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
  }


  public CreatePricePlanV2Request supportedCurrencies(@javax.annotation.Nonnull Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
    return this;
  }

  public CreatePricePlanV2Request addSupportedCurrenciesItem(String supportedCurrenciesItem) {
    if (this.supportedCurrencies == null) {
      this.supportedCurrencies = new LinkedHashSet<>();
    }
    this.supportedCurrencies.add(supportedCurrenciesItem);
    return this;
  }

  /**
   * List of currencies supported by the price plan
   * @return supportedCurrencies
   */
  @javax.annotation.Nonnull
  public Set<String> getSupportedCurrencies() {
    return supportedCurrencies;
  }

  public void setSupportedCurrencies(@javax.annotation.Nonnull Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
  }


  public CreatePricePlanV2Request deferredRevenue(@javax.annotation.Nullable Boolean deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
    return this;
  }

  /**
   * This option can be enabled while creating a price plan to opt for deferred revenue finalization. i.e, Togai will assume that the price plan may change any time during the pricing cycle and  thereby does not compute the revenue in near-real time.  This gives the flexibility of editing rate cards in price plan from beginning of the pricing cycle. Enabling this mode comes with the following limitations. 1. Following rate cards are not supported under a &#x60;deferredRevenue&#x60; plan     * creditGrantRateCards,     * billingEntitlementRateCards,     * entitlementOverageRateCards,     * IN_ADVANCE fixedFeeRateCards,     * IN_ADVANCE licenseRateCards 2. Metrics API return revenue metrics only after the grace period of the account&#39;s pricing cycle  (i.e, only once the invoice becomes DUE) 
   * @return deferredRevenue
   */
  @javax.annotation.Nullable
  public Boolean getDeferredRevenue() {
    return deferredRevenue;
  }

  public void setDeferredRevenue(@javax.annotation.Nullable Boolean deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
  }


  public CreatePricePlanV2Request allowOngoingCycleUpdates(@javax.annotation.Nullable Boolean allowOngoingCycleUpdates) {
    this.allowOngoingCycleUpdates = allowOngoingCycleUpdates;
    return this;
  }

  /**
   * Allow changes to price plan from the beginning of the ongoing cycle. 
   * @return allowOngoingCycleUpdates
   */
  @javax.annotation.Nullable
  public Boolean getAllowOngoingCycleUpdates() {
    return allowOngoingCycleUpdates;
  }

  public void setAllowOngoingCycleUpdates(@javax.annotation.Nullable Boolean allowOngoingCycleUpdates) {
    this.allowOngoingCycleUpdates = allowOngoingCycleUpdates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePricePlanV2Request createPricePlanV2Request = (CreatePricePlanV2Request) o;
    return Objects.equals(this.name, createPricePlanV2Request.name) &&
        Objects.equals(this.description, createPricePlanV2Request.description) &&
        Objects.equals(this.type, createPricePlanV2Request.type) &&
        Objects.equals(this.pricingCycleConfig, createPricePlanV2Request.pricingCycleConfig) &&
        Objects.equals(this.supportedCurrencies, createPricePlanV2Request.supportedCurrencies) &&
        Objects.equals(this.deferredRevenue, createPricePlanV2Request.deferredRevenue) &&
        Objects.equals(this.allowOngoingCycleUpdates, createPricePlanV2Request.allowOngoingCycleUpdates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, type, pricingCycleConfig, supportedCurrencies, deferredRevenue, allowOngoingCycleUpdates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePricePlanV2Request {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pricingCycleConfig: ").append(toIndentedString(pricingCycleConfig)).append("\n");
    sb.append("    supportedCurrencies: ").append(toIndentedString(supportedCurrencies)).append("\n");
    sb.append("    deferredRevenue: ").append(toIndentedString(deferredRevenue)).append("\n");
    sb.append("    allowOngoingCycleUpdates: ").append(toIndentedString(allowOngoingCycleUpdates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("pricingCycleConfig");
    openapiFields.add("supportedCurrencies");
    openapiFields.add("deferredRevenue");
    openapiFields.add("allowOngoingCycleUpdates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("supportedCurrencies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePricePlanV2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreatePricePlanV2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePricePlanV2Request is not found in the empty JSON string", CreatePricePlanV2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePricePlanV2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePricePlanV2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreatePricePlanV2Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `type`
      PricePlanType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `pricingCycleConfig`
      if (jsonObj.get("pricingCycleConfig") != null && !jsonObj.get("pricingCycleConfig").isJsonNull()) {
        PricingCycleConfig.validateJsonElement(jsonObj.get("pricingCycleConfig"));
      }
      // ensure the required json array is present
      if (jsonObj.get("supportedCurrencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supportedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("supportedCurrencies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePricePlanV2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePricePlanV2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePricePlanV2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePricePlanV2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePricePlanV2Request>() {
           @Override
           public void write(JsonWriter out, CreatePricePlanV2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePricePlanV2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePricePlanV2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePricePlanV2Request
   * @throws IOException if the JSON string is invalid with respect to CreatePricePlanV2Request
   */
  public static CreatePricePlanV2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePricePlanV2Request.class);
  }

  /**
   * Convert an instance of CreatePricePlanV2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

