/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.Event;
import com.togai.client.models.EventPipelineInfo;
import com.togai.client.models.EventSource;
import com.togai.client.models.IngestionStatus;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * EventWithStatusAndEventPipelineInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventWithStatusAndEventPipelineInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EVENT_PAYLOAD = "eventPayload";
  @SerializedName(SERIALIZED_NAME_EVENT_PAYLOAD)
  private Event eventPayload;

  public static final String SERIALIZED_NAME_INGESTION_STATUS = "ingestionStatus";
  @SerializedName(SERIALIZED_NAME_INGESTION_STATUS)
  private IngestionStatus ingestionStatus;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private EventSource source;

  public static final String SERIALIZED_NAME_EVENT_PIPELINE_INFO = "EventPipelineInfo";
  @SerializedName(SERIALIZED_NAME_EVENT_PIPELINE_INFO)
  private EventPipelineInfo eventPipelineInfo;

  public EventWithStatusAndEventPipelineInfo() {
  }

  public EventWithStatusAndEventPipelineInfo eventPayload(Event eventPayload) {
    
    this.eventPayload = eventPayload;
    return this;
  }

   /**
   * Get eventPayload
   * @return eventPayload
  **/
  @javax.annotation.Nonnull

  public Event getEventPayload() {
    return eventPayload;
  }


  public void setEventPayload(Event eventPayload) {
    this.eventPayload = eventPayload;
  }


  public EventWithStatusAndEventPipelineInfo ingestionStatus(IngestionStatus ingestionStatus) {
    
    this.ingestionStatus = ingestionStatus;
    return this;
  }

   /**
   * Get ingestionStatus
   * @return ingestionStatus
  **/
  @javax.annotation.Nonnull

  public IngestionStatus getIngestionStatus() {
    return ingestionStatus;
  }


  public void setIngestionStatus(IngestionStatus ingestionStatus) {
    this.ingestionStatus = ingestionStatus;
  }


  public EventWithStatusAndEventPipelineInfo customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * The associated account belongs to this customer
   * @return customerId
  **/
  @javax.annotation.Nullable

  public String getCustomerId() {
    return customerId;
  }


  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public EventWithStatusAndEventPipelineInfo source(EventSource source) {
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable

  public EventSource getSource() {
    return source;
  }


  public void setSource(EventSource source) {
    this.source = source;
  }


  public EventWithStatusAndEventPipelineInfo eventPipelineInfo(EventPipelineInfo eventPipelineInfo) {
    
    this.eventPipelineInfo = eventPipelineInfo;
    return this;
  }

   /**
   * Get eventPipelineInfo
   * @return eventPipelineInfo
  **/
  @javax.annotation.Nullable

  public EventPipelineInfo getEventPipelineInfo() {
    return eventPipelineInfo;
  }


  public void setEventPipelineInfo(EventPipelineInfo eventPipelineInfo) {
    this.eventPipelineInfo = eventPipelineInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventWithStatusAndEventPipelineInfo eventWithStatusAndEventPipelineInfo = (EventWithStatusAndEventPipelineInfo) o;
    return Objects.equals(this.eventPayload, eventWithStatusAndEventPipelineInfo.eventPayload) &&
        Objects.equals(this.ingestionStatus, eventWithStatusAndEventPipelineInfo.ingestionStatus) &&
        Objects.equals(this.customerId, eventWithStatusAndEventPipelineInfo.customerId) &&
        Objects.equals(this.source, eventWithStatusAndEventPipelineInfo.source) &&
        Objects.equals(this.eventPipelineInfo, eventWithStatusAndEventPipelineInfo.eventPipelineInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventPayload, ingestionStatus, customerId, source, eventPipelineInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventWithStatusAndEventPipelineInfo {\n");
    sb.append("    eventPayload: ").append(toIndentedString(eventPayload)).append("\n");
    sb.append("    ingestionStatus: ").append(toIndentedString(ingestionStatus)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    eventPipelineInfo: ").append(toIndentedString(eventPipelineInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventPayload");
    openapiFields.add("ingestionStatus");
    openapiFields.add("customerId");
    openapiFields.add("source");
    openapiFields.add("EventPipelineInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("eventPayload");
    openapiRequiredFields.add("ingestionStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EventWithStatusAndEventPipelineInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EventWithStatusAndEventPipelineInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventWithStatusAndEventPipelineInfo is not found in the empty JSON string", EventWithStatusAndEventPipelineInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EventWithStatusAndEventPipelineInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventWithStatusAndEventPipelineInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventWithStatusAndEventPipelineInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `eventPayload`
      Event.validateJsonObject(jsonObj.getAsJsonObject("eventPayload"));
      // validate the required field `ingestionStatus`
      IngestionStatus.validateJsonObject(jsonObj.getAsJsonObject("ingestionStatus"));
      if ((jsonObj.get("customerId") != null && !jsonObj.get("customerId").isJsonNull()) && !jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        EventSource.validateJsonObject(jsonObj.getAsJsonObject("source"));
      }
      // validate the optional field `EventPipelineInfo`
      if (jsonObj.get("EventPipelineInfo") != null && !jsonObj.get("EventPipelineInfo").isJsonNull()) {
        EventPipelineInfo.validateJsonObject(jsonObj.getAsJsonObject("EventPipelineInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventWithStatusAndEventPipelineInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventWithStatusAndEventPipelineInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventWithStatusAndEventPipelineInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventWithStatusAndEventPipelineInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EventWithStatusAndEventPipelineInfo>() {
           @Override
           public void write(JsonWriter out, EventWithStatusAndEventPipelineInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventWithStatusAndEventPipelineInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventWithStatusAndEventPipelineInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventWithStatusAndEventPipelineInfo
  * @throws IOException if the JSON string is invalid with respect to EventWithStatusAndEventPipelineInfo
  */
  public static EventWithStatusAndEventPipelineInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventWithStatusAndEventPipelineInfo.class);
  }

 /**
  * Convert an instance of EventWithStatusAndEventPipelineInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

