/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.ErrorResponse;
import com.togai.client.models.Invoice;
import com.togai.client.models.ListInvoicesResponse;
import com.togai.client.models.ManageMiscellaneousChargesRequest;
import com.togai.client.models.MiscellaneousChargesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvoicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvoicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InvoicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getInvoice
     * @param invoiceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get invoice requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{invoice_id}"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInvoiceValidateBeforeCall(String invoiceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling getInvoice(Async)");
        }

        return getInvoiceCall(invoiceId, _callback);

    }

    /**
     * Get an invoice
     * Get invoice
     * @param invoiceId  (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get invoice requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public Invoice getInvoice(String invoiceId) throws ApiException {
        ApiResponse<Invoice> localVarResp = getInvoiceWithHttpInfo(invoiceId);
        return localVarResp.getData();
    }

    /**
     * Get an invoice
     * Get invoice
     * @param invoiceId  (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get invoice requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> getInvoiceWithHttpInfo(String invoiceId) throws ApiException {
        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(invoiceId, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an invoice (asynchronously)
     * Get invoice
     * @param invoiceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Get invoice requests </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInvoiceAsync(String invoiceId, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInvoiceValidateBeforeCall(invoiceId, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listInvoices
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param status Filter option to filter by status. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param customerId Filter option to filter based on customer id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param startTime Start time filter in epoch milli seconds (optional)
     * @param endTime End time filter in epoch milli seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to this operation. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoicesCall(String nextToken, String status, String accountId, String customerId, Integer pageSize, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (customerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_id", customerId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInvoicesValidateBeforeCall(String nextToken, String status, String accountId, String customerId, Integer pageSize, Long startTime, Long endTime, final ApiCallback _callback) throws ApiException {
        return listInvoicesCall(nextToken, status, accountId, customerId, pageSize, startTime, endTime, _callback);

    }

    /**
     * List invoices
     * List invoices
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param status Filter option to filter by status. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param customerId Filter option to filter based on customer id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param startTime Start time filter in epoch milli seconds (optional)
     * @param endTime End time filter in epoch milli seconds (optional)
     * @return ListInvoicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to this operation. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ListInvoicesResponse listInvoices(String nextToken, String status, String accountId, String customerId, Integer pageSize, Long startTime, Long endTime) throws ApiException {
        ApiResponse<ListInvoicesResponse> localVarResp = listInvoicesWithHttpInfo(nextToken, status, accountId, customerId, pageSize, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * List invoices
     * List invoices
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param status Filter option to filter by status. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param customerId Filter option to filter based on customer id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param startTime Start time filter in epoch milli seconds (optional)
     * @param endTime End time filter in epoch milli seconds (optional)
     * @return ApiResponse&lt;ListInvoicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to this operation. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListInvoicesResponse> listInvoicesWithHttpInfo(String nextToken, String status, String accountId, String customerId, Integer pageSize, Long startTime, Long endTime) throws ApiException {
        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(nextToken, status, accountId, customerId, pageSize, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<ListInvoicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List invoices (asynchronously)
     * List invoices
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param status Filter option to filter by status. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param customerId Filter option to filter based on customer id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param startTime Start time filter in epoch milli seconds (optional)
     * @param endTime End time filter in epoch milli seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to this operation. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listInvoicesAsync(String nextToken, String status, String accountId, String customerId, Integer pageSize, Long startTime, Long endTime, final ApiCallback<ListInvoicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInvoicesValidateBeforeCall(nextToken, status, accountId, customerId, pageSize, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<ListInvoicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for manageMiscellaneousChargesInAccount
     * @param accountId account_id corresponding to an account (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call manageMiscellaneousChargesInAccountCall(String accountId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageMiscellaneousChargesRequest;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/miscellaneous_charges"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageMiscellaneousChargesInAccountValidateBeforeCall(String accountId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling manageMiscellaneousChargesInAccount(Async)");
        }

        return manageMiscellaneousChargesInAccountCall(accountId, manageMiscellaneousChargesRequest, _callback);

    }

    /**
     * Add or update miscellaneous charges in upcoming Invoice for a account
     * Add or update miscellaneous charges in upcoming Invoice for a account
     * @param accountId account_id corresponding to an account (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @return MiscellaneousChargesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public MiscellaneousChargesResponse manageMiscellaneousChargesInAccount(String accountId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest) throws ApiException {
        ApiResponse<MiscellaneousChargesResponse> localVarResp = manageMiscellaneousChargesInAccountWithHttpInfo(accountId, manageMiscellaneousChargesRequest);
        return localVarResp.getData();
    }

    /**
     * Add or update miscellaneous charges in upcoming Invoice for a account
     * Add or update miscellaneous charges in upcoming Invoice for a account
     * @param accountId account_id corresponding to an account (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @return ApiResponse&lt;MiscellaneousChargesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MiscellaneousChargesResponse> manageMiscellaneousChargesInAccountWithHttpInfo(String accountId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest) throws ApiException {
        okhttp3.Call localVarCall = manageMiscellaneousChargesInAccountValidateBeforeCall(accountId, manageMiscellaneousChargesRequest, null);
        Type localVarReturnType = new TypeToken<MiscellaneousChargesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or update miscellaneous charges in upcoming Invoice for a account (asynchronously)
     * Add or update miscellaneous charges in upcoming Invoice for a account
     * @param accountId account_id corresponding to an account (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call manageMiscellaneousChargesInAccountAsync(String accountId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback<MiscellaneousChargesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageMiscellaneousChargesInAccountValidateBeforeCall(accountId, manageMiscellaneousChargesRequest, _callback);
        Type localVarReturnType = new TypeToken<MiscellaneousChargesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for manageMiscellaneousChargesInInvoice
     * @param invoiceId  (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call manageMiscellaneousChargesInInvoiceCall(String invoiceId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = manageMiscellaneousChargesRequest;

        // create path and map variables
        String localVarPath = "/invoices/{invoice_id}/miscellaneous_charges"
            .replace("{" + "invoice_id" + "}", localVarApiClient.escapeString(invoiceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manageMiscellaneousChargesInInvoiceValidateBeforeCall(String invoiceId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invoiceId' is set
        if (invoiceId == null) {
            throw new ApiException("Missing the required parameter 'invoiceId' when calling manageMiscellaneousChargesInInvoice(Async)");
        }

        return manageMiscellaneousChargesInInvoiceCall(invoiceId, manageMiscellaneousChargesRequest, _callback);

    }

    /**
     * Add or update miscellaneous charges in Invoice
     * Add or update miscellaneous charges in Invoice
     * @param invoiceId  (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @return MiscellaneousChargesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public MiscellaneousChargesResponse manageMiscellaneousChargesInInvoice(String invoiceId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest) throws ApiException {
        ApiResponse<MiscellaneousChargesResponse> localVarResp = manageMiscellaneousChargesInInvoiceWithHttpInfo(invoiceId, manageMiscellaneousChargesRequest);
        return localVarResp.getData();
    }

    /**
     * Add or update miscellaneous charges in Invoice
     * Add or update miscellaneous charges in Invoice
     * @param invoiceId  (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @return ApiResponse&lt;MiscellaneousChargesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MiscellaneousChargesResponse> manageMiscellaneousChargesInInvoiceWithHttpInfo(String invoiceId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest) throws ApiException {
        okhttp3.Call localVarCall = manageMiscellaneousChargesInInvoiceValidateBeforeCall(invoiceId, manageMiscellaneousChargesRequest, null);
        Type localVarReturnType = new TypeToken<MiscellaneousChargesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add or update miscellaneous charges in Invoice (asynchronously)
     * Add or update miscellaneous charges in Invoice
     * @param invoiceId  (required)
     * @param manageMiscellaneousChargesRequest Payload to update custom line items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Miscellaneous Charges Request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call manageMiscellaneousChargesInInvoiceAsync(String invoiceId, ManageMiscellaneousChargesRequest manageMiscellaneousChargesRequest, final ApiCallback<MiscellaneousChargesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = manageMiscellaneousChargesInInvoiceValidateBeforeCall(invoiceId, manageMiscellaneousChargesRequest, _callback);
        Type localVarReturnType = new TypeToken<MiscellaneousChargesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
