/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.togai.client.models.ErrorResponse;
import com.togai.client.models.GetJobResponse;
import com.togai.client.models.JobEntriesPaginatedResponse;
import com.togai.client.models.JobsPaginatedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for confirmJob
     * @param jobId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmJobCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{job_id}/confirm"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmJobValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling confirmJob(Async)");
        }

        return confirmJobCall(jobId, _callback);

    }

    /**
     * Confirm a job
     * Confirm a job
     * @param jobId  (required)
     * @return GetJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetJobResponse confirmJob(String jobId) throws ApiException {
        ApiResponse<GetJobResponse> localVarResp = confirmJobWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Confirm a job
     * Confirm a job
     * @param jobId  (required)
     * @return ApiResponse&lt;GetJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJobResponse> confirmJobWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = confirmJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm a job (asynchronously)
     * Confirm a job
     * @param jobId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmJobAsync(String jobId, final ApiCallback<GetJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobEntries
     * @param jobId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list job entries request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobEntriesCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{job_id}/entries"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobEntriesValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJobEntries(Async)");
        }

        return getJobEntriesCall(jobId, _callback);

    }

    /**
     * List job entries
     * List individual job entries and current state of processing
     * @param jobId  (required)
     * @return JobEntriesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list job entries request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public JobEntriesPaginatedResponse getJobEntries(String jobId) throws ApiException {
        ApiResponse<JobEntriesPaginatedResponse> localVarResp = getJobEntriesWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * List job entries
     * List individual job entries and current state of processing
     * @param jobId  (required)
     * @return ApiResponse&lt;JobEntriesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list job entries request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobEntriesPaginatedResponse> getJobEntriesWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = getJobEntriesValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<JobEntriesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List job entries (asynchronously)
     * List individual job entries and current state of processing
     * @param jobId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list job entries request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobEntriesAsync(String jobId, final ApiCallback<JobEntriesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobEntriesValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<JobEntriesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobStatus
     * @param jobId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobStatusCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobStatusValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getJobStatus(Async)");
        }

        return getJobStatusCall(jobId, _callback);

    }

    /**
     * Get the status of a job
     * Get the status of a job
     * @param jobId  (required)
     * @return GetJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetJobResponse getJobStatus(String jobId) throws ApiException {
        ApiResponse<GetJobResponse> localVarResp = getJobStatusWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Get the status of a job
     * Get the status of a job
     * @param jobId  (required)
     * @return ApiResponse&lt;GetJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJobResponse> getJobStatusWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = getJobStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the status of a job (asynchronously)
     * Get the status of a job
     * @param jobId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobStatusAsync(String jobId, final ApiCallback<GetJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobs
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list customers request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsCall(String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobsValidateBeforeCall(String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        return getJobsCall(nextToken, pageSize, _callback);

    }

    /**
     * List jobs
     * Returns a list of jobs with pagination and sort.
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return JobsPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list customers request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public JobsPaginatedResponse getJobs(String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<JobsPaginatedResponse> localVarResp = getJobsWithHttpInfo(nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List jobs
     * Returns a list of jobs with pagination and sort.
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;JobsPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list customers request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobsPaginatedResponse> getJobsWithHttpInfo(String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = getJobsValidateBeforeCall(nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<JobsPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List jobs (asynchronously)
     * Returns a list of jobs with pagination and sort.
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list customers request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobsAsync(String nextToken, BigDecimal pageSize, final ApiCallback<JobsPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobsValidateBeforeCall(nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<JobsPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectJob
     * @param jobId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectJobCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jobs/{job_id}/reject"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectJobValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling rejectJob(Async)");
        }

        return rejectJobCall(jobId, _callback);

    }

    /**
     * Reject a job
     * Reject a job
     * @param jobId  (required)
     * @return GetJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetJobResponse rejectJob(String jobId) throws ApiException {
        ApiResponse<GetJobResponse> localVarResp = rejectJobWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * Reject a job
     * Reject a job
     * @param jobId  (required)
     * @return ApiResponse&lt;GetJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetJobResponse> rejectJobWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = rejectJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reject a job (asynchronously)
     * Reject a job
     * @param jobId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for get job status request </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectJobAsync(String jobId, final ApiCallback<GetJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<GetJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
