/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.RateCardData;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Rate card operation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class RateCardOperation implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Operation type
   */
  @JsonAdapter(ActionTypeEnum.Adapter.class)
  public enum ActionTypeEnum {
    CREATE("CREATE"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE");

    private String value;

    ActionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionTypeEnum fromValue(String value) {
      for (ActionTypeEnum b : ActionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  @javax.annotation.Nonnull
  private ActionTypeEnum actionType;

  public static final String SERIALIZED_NAME_RATE_CARD_NAME = "rateCardName";
  @SerializedName(SERIALIZED_NAME_RATE_CARD_NAME)
  @javax.annotation.Nonnull
  private String rateCardName;

  public static final String SERIALIZED_NAME_RATE_CARD = "rateCard";
  @SerializedName(SERIALIZED_NAME_RATE_CARD)
  @javax.annotation.Nullable
  private RateCardData rateCard;

  public RateCardOperation() {
  }

  public RateCardOperation actionType(@javax.annotation.Nonnull ActionTypeEnum actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Operation type
   * @return actionType
   */
  @javax.annotation.Nonnull
  public ActionTypeEnum getActionType() {
    return actionType;
  }

  public void setActionType(@javax.annotation.Nonnull ActionTypeEnum actionType) {
    this.actionType = actionType;
  }


  public RateCardOperation rateCardName(@javax.annotation.Nonnull String rateCardName) {
    this.rateCardName = rateCardName;
    return this;
  }

  /**
   * Required for UPDATE and DELETE operations
   * @return rateCardName
   */
  @javax.annotation.Nonnull
  public String getRateCardName() {
    return rateCardName;
  }

  public void setRateCardName(@javax.annotation.Nonnull String rateCardName) {
    this.rateCardName = rateCardName;
  }


  public RateCardOperation rateCard(@javax.annotation.Nullable RateCardData rateCard) {
    this.rateCard = rateCard;
    return this;
  }

  /**
   * Get rateCard
   * @return rateCard
   */
  @javax.annotation.Nullable
  public RateCardData getRateCard() {
    return rateCard;
  }

  public void setRateCard(@javax.annotation.Nullable RateCardData rateCard) {
    this.rateCard = rateCard;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateCardOperation rateCardOperation = (RateCardOperation) o;
    return Objects.equals(this.actionType, rateCardOperation.actionType) &&
        Objects.equals(this.rateCardName, rateCardOperation.rateCardName) &&
        Objects.equals(this.rateCard, rateCardOperation.rateCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, rateCardName, rateCard);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateCardOperation {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    rateCardName: ").append(toIndentedString(rateCardName)).append("\n");
    sb.append("    rateCard: ").append(toIndentedString(rateCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionType");
    openapiFields.add("rateCardName");
    openapiFields.add("rateCard");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionType");
    openapiRequiredFields.add("rateCardName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RateCardOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RateCardOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateCardOperation is not found in the empty JSON string", RateCardOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RateCardOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RateCardOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RateCardOperation.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("actionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionType").toString()));
      }
      // validate the required field `actionType`
      ActionTypeEnum.validateJsonElement(jsonObj.get("actionType"));
      if (!jsonObj.get("rateCardName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateCardName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rateCardName").toString()));
      }
      // validate the optional field `rateCard`
      if (jsonObj.get("rateCard") != null && !jsonObj.get("rateCard").isJsonNull()) {
        RateCardData.validateJsonElement(jsonObj.get("rateCard"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateCardOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateCardOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateCardOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateCardOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<RateCardOperation>() {
           @Override
           public void write(JsonWriter out, RateCardOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RateCardOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RateCardOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RateCardOperation
   * @throws IOException if the JSON string is invalid with respect to RateCardOperation
   */
  public static RateCardOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateCardOperation.class);
  }

  /**
   * Convert an instance of RateCardOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

