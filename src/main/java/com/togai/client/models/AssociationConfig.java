/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricingCycleConfig;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * AssociationConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AssociationConfig implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRICE_PLAN_ID = "pricePlanId";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_ID)
  @javax.annotation.Nullable
  private String pricePlanId;

  public static final String SERIALIZED_NAME_SCHEDULE_ID = "scheduleId";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ID)
  @javax.annotation.Nullable
  private String scheduleId;

  public static final String SERIALIZED_NAME_PRICING_CYCLE_CONFIG_OVERRIDE = "pricingCycleConfigOverride";
  @SerializedName(SERIALIZED_NAME_PRICING_CYCLE_CONFIG_OVERRIDE)
  @javax.annotation.Nullable
  private PricingCycleConfig pricingCycleConfigOverride;

  public static final String SERIALIZED_NAME_RETAIN_START_OFFSETS = "retainStartOffsets";
  @SerializedName(SERIALIZED_NAME_RETAIN_START_OFFSETS)
  @javax.annotation.Nullable
  private Boolean retainStartOffsets;

  public AssociationConfig() {
  }

  public AssociationConfig pricePlanId(@javax.annotation.Nullable String pricePlanId) {
    this.pricePlanId = pricePlanId;
    return this;
  }

  /**
   * Id of the price plan if association request
   * @return pricePlanId
   */
  @javax.annotation.Nullable
  public String getPricePlanId() {
    return pricePlanId;
  }

  public void setPricePlanId(@javax.annotation.Nullable String pricePlanId) {
    this.pricePlanId = pricePlanId;
  }


  public AssociationConfig scheduleId(@javax.annotation.Nullable String scheduleId) {
    this.scheduleId = scheduleId;
    return this;
  }

  /**
   * If provided, rate cards and pricing rules will copied from this schedule
   * @return scheduleId
   */
  @javax.annotation.Nullable
  public String getScheduleId() {
    return scheduleId;
  }

  public void setScheduleId(@javax.annotation.Nullable String scheduleId) {
    this.scheduleId = scheduleId;
  }


  public AssociationConfig pricingCycleConfigOverride(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfigOverride) {
    this.pricingCycleConfigOverride = pricingCycleConfigOverride;
    return this;
  }

  /**
   * Get pricingCycleConfigOverride
   * @return pricingCycleConfigOverride
   */
  @javax.annotation.Nullable
  public PricingCycleConfig getPricingCycleConfigOverride() {
    return pricingCycleConfigOverride;
  }

  public void setPricingCycleConfigOverride(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfigOverride) {
    this.pricingCycleConfigOverride = pricingCycleConfigOverride;
  }


  public AssociationConfig retainStartOffsets(@javax.annotation.Nullable Boolean retainStartOffsets) {
    this.retainStartOffsets = retainStartOffsets;
    return this;
  }

  /**
   * If this flag is true, current pricing cycle of the account on the date of association will continue rather  than the configurations of the newly associated price plan. Pricing cycle overrides specified  using  &#x60;pricePlanDetailsOverride&#x60; will take precedence over the pricing cycle configurations of  the new price plan that the account needs to migrate to. PricingCycleInterval of the existing plan and  the new plan must be same for this to work. We&#39;ll return a &#x60;400 BadRequest&#x60; otherwise. Examples:   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (15th Oct to 15th Nov) of different price plan with retainStartOffsets option true      will use the same pricing cycle configuration {dayOffset: 1, monthOffset: NIL} rather than using the     pricing cycle configuration of the new price plan that the account needs to migrate to.   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (1st Nov to 30th Nov) of different price plan with retainStartOffsets option true will     throw a &#x60;400 BadRequest&#x60; as no existing price plan configuration found on date of association 
   * @return retainStartOffsets
   */
  @javax.annotation.Nullable
  public Boolean getRetainStartOffsets() {
    return retainStartOffsets;
  }

  public void setRetainStartOffsets(@javax.annotation.Nullable Boolean retainStartOffsets) {
    this.retainStartOffsets = retainStartOffsets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociationConfig associationConfig = (AssociationConfig) o;
    return Objects.equals(this.pricePlanId, associationConfig.pricePlanId) &&
        Objects.equals(this.scheduleId, associationConfig.scheduleId) &&
        Objects.equals(this.pricingCycleConfigOverride, associationConfig.pricingCycleConfigOverride) &&
        Objects.equals(this.retainStartOffsets, associationConfig.retainStartOffsets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pricePlanId, scheduleId, pricingCycleConfigOverride, retainStartOffsets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociationConfig {\n");
    sb.append("    pricePlanId: ").append(toIndentedString(pricePlanId)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    pricingCycleConfigOverride: ").append(toIndentedString(pricingCycleConfigOverride)).append("\n");
    sb.append("    retainStartOffsets: ").append(toIndentedString(retainStartOffsets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pricePlanId");
    openapiFields.add("scheduleId");
    openapiFields.add("pricingCycleConfigOverride");
    openapiFields.add("retainStartOffsets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociationConfig is not found in the empty JSON string", AssociationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pricePlanId") != null && !jsonObj.get("pricePlanId").isJsonNull()) && !jsonObj.get("pricePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanId").toString()));
      }
      if ((jsonObj.get("scheduleId") != null && !jsonObj.get("scheduleId").isJsonNull()) && !jsonObj.get("scheduleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduleId").toString()));
      }
      // validate the optional field `pricingCycleConfigOverride`
      if (jsonObj.get("pricingCycleConfigOverride") != null && !jsonObj.get("pricingCycleConfigOverride").isJsonNull()) {
        PricingCycleConfig.validateJsonElement(jsonObj.get("pricingCycleConfigOverride"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociationConfig>() {
           @Override
           public void write(JsonWriter out, AssociationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociationConfig
   * @throws IOException if the JSON string is invalid with respect to AssociationConfig
   */
  public static AssociationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociationConfig.class);
  }

  /**
   * Convert an instance of AssociationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

