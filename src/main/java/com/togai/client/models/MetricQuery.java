/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.MetricName;
import com.togai.client.models.MetricQueryFilterEntry;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Object representing a single metrics query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MetricQuery implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private MetricName name = MetricName.EVENTS;

  /**
   * Set the aggregation period. Allowed periods are DAY, WEEK, MONTH
   */
  @JsonAdapter(AggregationPeriodEnum.Adapter.class)
  public enum AggregationPeriodEnum {
    DAY("DAY"),
    
    WEEK("WEEK"),
    
    MONTH("MONTH");

    private String value;

    AggregationPeriodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationPeriodEnum fromValue(String value) {
      for (AggregationPeriodEnum b : AggregationPeriodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationPeriodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationPeriodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationPeriodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationPeriodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_PERIOD = "aggregationPeriod";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_PERIOD)
  private AggregationPeriodEnum aggregationPeriod = AggregationPeriodEnum.DAY;

  public static final String SERIALIZED_NAME_GROUP_BY = "groupBy";
  @SerializedName(SERIALIZED_NAME_GROUP_BY)
  private String groupBy;

  public static final String SERIALIZED_NAME_CONFIGS = "configs";
  @SerializedName(SERIALIZED_NAME_CONFIGS)
  private Map<String, String> configs = new HashMap<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<MetricQueryFilterEntry> filters = new ArrayList<>();

  public MetricQuery() {
  }

  public MetricQuery id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Mandatory  for all request.  User defined ID for identifying the request for your internal reference 
   * @return id
  **/
  @javax.annotation.Nonnull

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public MetricQuery name(MetricName name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull

  public MetricName getName() {
    return name;
  }


  public void setName(MetricName name) {
    this.name = name;
  }


  public MetricQuery aggregationPeriod(AggregationPeriodEnum aggregationPeriod) {
    
    this.aggregationPeriod = aggregationPeriod;
    return this;
  }

   /**
   * Set the aggregation period. Allowed periods are DAY, WEEK, MONTH
   * @return aggregationPeriod
  **/
  @javax.annotation.Nonnull

  public AggregationPeriodEnum getAggregationPeriod() {
    return aggregationPeriod;
  }


  public void setAggregationPeriod(AggregationPeriodEnum aggregationPeriod) {
    this.aggregationPeriod = aggregationPeriod;
  }


  public MetricQuery groupBy(String groupBy) {
    
    this.groupBy = groupBy;
    return this;
  }

   /**
   * Group your metric with a groupBy field.  Allowed fields are  ACCOUNT_ID EVENT_STATUS  SCHEMA_NAME  USAGE_METER_ID  Please refer the table above for the list of combinations allowed in the groupBy 
   * @return groupBy
  **/
  @javax.annotation.Nullable

  public String getGroupBy() {
    return groupBy;
  }


  public void setGroupBy(String groupBy) {
    this.groupBy = groupBy;
  }


  public MetricQuery configs(Map<String, String> configs) {
    
    this.configs = configs;
    return this;
  }

  public MetricQuery putConfigsItem(String key, String configsItem) {
    if (this.configs == null) {
      this.configs = new HashMap<>();
    }
    this.configs.put(key, configsItem);
    return this;
  }

   /**
   * Configurations. | Metric Name       | Config Key | Allowed Values  | Default value |              Description          | |-------------------|------------|-----------------|---------------|-----------------------------------| | REVENUE           | CURRENCY   | BASE or INVOICE | BASE          | currency to return the revenue in | | REVENUE_FOR_CYCLE | CURRENCY   | BASE or INVOICE | BASE          | currency to return the revenue in | 
   * @return configs
  **/
  @javax.annotation.Nullable

  public Map<String, String> getConfigs() {
    return configs;
  }


  public void setConfigs(Map<String, String> configs) {
    this.configs = configs;
  }


  public MetricQuery filters(List<MetricQueryFilterEntry> filters) {
    
    this.filters = filters;
    return this;
  }

  public MetricQuery addFiltersItem(MetricQueryFilterEntry filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Filter on specific fields.  Refer possible fieldNames and fieldValues from the table above. 
   * @return filters
  **/
  @javax.annotation.Nullable

  public List<MetricQueryFilterEntry> getFilters() {
    return filters;
  }


  public void setFilters(List<MetricQueryFilterEntry> filters) {
    this.filters = filters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricQuery metricQuery = (MetricQuery) o;
    return Objects.equals(this.id, metricQuery.id) &&
        Objects.equals(this.name, metricQuery.name) &&
        Objects.equals(this.aggregationPeriod, metricQuery.aggregationPeriod) &&
        Objects.equals(this.groupBy, metricQuery.groupBy) &&
        Objects.equals(this.configs, metricQuery.configs) &&
        Objects.equals(this.filters, metricQuery.filters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, aggregationPeriod, groupBy, configs, filters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricQuery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    aggregationPeriod: ").append(toIndentedString(aggregationPeriod)).append("\n");
    sb.append("    groupBy: ").append(toIndentedString(groupBy)).append("\n");
    sb.append("    configs: ").append(toIndentedString(configs)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("aggregationPeriod");
    openapiFields.add("groupBy");
    openapiFields.add("configs");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("aggregationPeriod");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MetricQuery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MetricQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricQuery is not found in the empty JSON string", MetricQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MetricQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricQuery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricQuery.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("aggregationPeriod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationPeriod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationPeriod").toString()));
      }
      if ((jsonObj.get("groupBy") != null && !jsonObj.get("groupBy").isJsonNull()) && !jsonObj.get("groupBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupBy").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            MetricQueryFilterEntry.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricQuery>() {
           @Override
           public void write(JsonWriter out, MetricQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricQuery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MetricQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MetricQuery
  * @throws IOException if the JSON string is invalid with respect to MetricQuery
  */
  public static MetricQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricQuery.class);
  }

 /**
  * Convert an instance of MetricQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

