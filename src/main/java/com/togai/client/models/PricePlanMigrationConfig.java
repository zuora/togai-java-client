/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Migrate all account associations of a price plan to another price plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PricePlanMigrationConfig implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_SOURCE_ID = "sourceId";
  @SerializedName(SERIALIZED_NAME_SOURCE_ID)
  @javax.annotation.Nonnull
  private String sourceId;

  public static final String SERIALIZED_NAME_SOURCE_VERSION = "sourceVersion";
  @SerializedName(SERIALIZED_NAME_SOURCE_VERSION)
  @javax.annotation.Nonnull
  private Integer sourceVersion;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  @javax.annotation.Nullable
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_VERSION = "targetVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_VERSION)
  @javax.annotation.Nullable
  private Integer targetVersion;

  /**
   * Gets or Sets migrationMode
   */
  @JsonAdapter(MigrationModeEnum.Adapter.class)
  public enum MigrationModeEnum {
    IMMEDIATE("IMMEDIATE"),
    
    IMMEDIATE_IGNORE_OVERRIDE("IMMEDIATE_IGNORE_OVERRIDE"),
    
    NEXT_CYCLE("NEXT_CYCLE"),
    
    NEXT_CYCLE_IGNORE_OVERRIDE("NEXT_CYCLE_IGNORE_OVERRIDE"),
    
    START_OF_CURRENT_CYCLE("START_OF_CURRENT_CYCLE");

    private String value;

    MigrationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationModeEnum fromValue(String value) {
      for (MigrationModeEnum b : MigrationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MigrationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_MODE = "migrationMode";
  @SerializedName(SERIALIZED_NAME_MIGRATION_MODE)
  @javax.annotation.Nonnull
  private MigrationModeEnum migrationMode;

  public static final String SERIALIZED_NAME_RETAIN_START_OFFSETS = "retainStartOffsets";
  @SerializedName(SERIALIZED_NAME_RETAIN_START_OFFSETS)
  @javax.annotation.Nullable
  private Boolean retainStartOffsets;

  public static final String SERIALIZED_NAME_IS_PRICE_PLAN_V2_MIGRATION = "isPricePlanV2Migration";
  @SerializedName(SERIALIZED_NAME_IS_PRICE_PLAN_V2_MIGRATION)
  @javax.annotation.Nullable
  private Boolean isPricePlanV2Migration;

  public PricePlanMigrationConfig() {
  }

  public PricePlanMigrationConfig sourceId(@javax.annotation.Nonnull String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

  /**
   * Id of source price plan
   * @return sourceId
   */
  @javax.annotation.Nonnull
  public String getSourceId() {
    return sourceId;
  }

  public void setSourceId(@javax.annotation.Nonnull String sourceId) {
    this.sourceId = sourceId;
  }


  public PricePlanMigrationConfig sourceVersion(@javax.annotation.Nonnull Integer sourceVersion) {
    this.sourceVersion = sourceVersion;
    return this;
  }

  /**
   * Version of the source price plan
   * @return sourceVersion
   */
  @javax.annotation.Nonnull
  public Integer getSourceVersion() {
    return sourceVersion;
  }

  public void setSourceVersion(@javax.annotation.Nonnull Integer sourceVersion) {
    this.sourceVersion = sourceVersion;
  }


  public PricePlanMigrationConfig targetId(@javax.annotation.Nullable String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Id of target price plan
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(@javax.annotation.Nullable String targetId) {
    this.targetId = targetId;
  }


  public PricePlanMigrationConfig targetVersion(@javax.annotation.Nullable Integer targetVersion) {
    this.targetVersion = targetVersion;
    return this;
  }

  /**
   * Version of the target price plan
   * @return targetVersion
   */
  @javax.annotation.Nullable
  public Integer getTargetVersion() {
    return targetVersion;
  }

  public void setTargetVersion(@javax.annotation.Nullable Integer targetVersion) {
    this.targetVersion = targetVersion;
  }


  public PricePlanMigrationConfig migrationMode(@javax.annotation.Nonnull MigrationModeEnum migrationMode) {
    this.migrationMode = migrationMode;
    return this;
  }

  /**
   * Get migrationMode
   * @return migrationMode
   */
  @javax.annotation.Nonnull
  public MigrationModeEnum getMigrationMode() {
    return migrationMode;
  }

  public void setMigrationMode(@javax.annotation.Nonnull MigrationModeEnum migrationMode) {
    this.migrationMode = migrationMode;
  }


  public PricePlanMigrationConfig retainStartOffsets(@javax.annotation.Nullable Boolean retainStartOffsets) {
    this.retainStartOffsets = retainStartOffsets;
    return this;
  }

  /**
   * If this flag is true, current pricing cycle of the account on the date of association will continue rather  than the configurations of the newly associated price plan. Pricing cycle overrides specified  using  &#x60;pricePlanDetailsOverride&#x60; will take precedence over the pricing cycle configurations of  the new price plan that the account needs to migrate to. PricingCycleInterval of the existing plan and  the new plan must be same for this to work. We&#39;ll return a &#x60;400 BadRequest&#x60; otherwise. Examples:   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (15th Oct to 15th Nov) of different price plan with retainStartOffsets option true      will use the same pricing cycle configuration {dayOffset: 1, monthOffset: NIL} rather than using the     pricing cycle configuration of the new price plan that the account needs to migrate to.   - Ongoing plan (1st Oct to 30th Oct) - {dayOffset: 1, monthOffset: NIL}     New association (1st Nov to 30th Nov) of different price plan with retainStartOffsets option true will     throw a &#x60;400 BadRequest&#x60; as no existing price plan configuration found on date of association 
   * @return retainStartOffsets
   */
  @javax.annotation.Nullable
  public Boolean getRetainStartOffsets() {
    return retainStartOffsets;
  }

  public void setRetainStartOffsets(@javax.annotation.Nullable Boolean retainStartOffsets) {
    this.retainStartOffsets = retainStartOffsets;
  }


  public PricePlanMigrationConfig isPricePlanV2Migration(@javax.annotation.Nullable Boolean isPricePlanV2Migration) {
    this.isPricePlanV2Migration = isPricePlanV2Migration;
    return this;
  }

  /**
   * If this flag is true, the migration will be done for price plan v2. Default value is false 
   * @return isPricePlanV2Migration
   */
  @javax.annotation.Nullable
  public Boolean getIsPricePlanV2Migration() {
    return isPricePlanV2Migration;
  }

  public void setIsPricePlanV2Migration(@javax.annotation.Nullable Boolean isPricePlanV2Migration) {
    this.isPricePlanV2Migration = isPricePlanV2Migration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricePlanMigrationConfig pricePlanMigrationConfig = (PricePlanMigrationConfig) o;
    return Objects.equals(this.sourceId, pricePlanMigrationConfig.sourceId) &&
        Objects.equals(this.sourceVersion, pricePlanMigrationConfig.sourceVersion) &&
        Objects.equals(this.targetId, pricePlanMigrationConfig.targetId) &&
        Objects.equals(this.targetVersion, pricePlanMigrationConfig.targetVersion) &&
        Objects.equals(this.migrationMode, pricePlanMigrationConfig.migrationMode) &&
        Objects.equals(this.retainStartOffsets, pricePlanMigrationConfig.retainStartOffsets) &&
        Objects.equals(this.isPricePlanV2Migration, pricePlanMigrationConfig.isPricePlanV2Migration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceId, sourceVersion, targetId, targetVersion, migrationMode, retainStartOffsets, isPricePlanV2Migration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricePlanMigrationConfig {\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    sourceVersion: ").append(toIndentedString(sourceVersion)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetVersion: ").append(toIndentedString(targetVersion)).append("\n");
    sb.append("    migrationMode: ").append(toIndentedString(migrationMode)).append("\n");
    sb.append("    retainStartOffsets: ").append(toIndentedString(retainStartOffsets)).append("\n");
    sb.append("    isPricePlanV2Migration: ").append(toIndentedString(isPricePlanV2Migration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceId");
    openapiFields.add("sourceVersion");
    openapiFields.add("targetId");
    openapiFields.add("targetVersion");
    openapiFields.add("migrationMode");
    openapiFields.add("retainStartOffsets");
    openapiFields.add("isPricePlanV2Migration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceId");
    openapiRequiredFields.add("sourceVersion");
    openapiRequiredFields.add("migrationMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricePlanMigrationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricePlanMigrationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricePlanMigrationConfig is not found in the empty JSON string", PricePlanMigrationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricePlanMigrationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricePlanMigrationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricePlanMigrationConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("sourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceId").toString()));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if (!jsonObj.get("migrationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationMode").toString()));
      }
      // validate the required field `migrationMode`
      MigrationModeEnum.validateJsonElement(jsonObj.get("migrationMode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricePlanMigrationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricePlanMigrationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricePlanMigrationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricePlanMigrationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PricePlanMigrationConfig>() {
           @Override
           public void write(JsonWriter out, PricePlanMigrationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricePlanMigrationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricePlanMigrationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricePlanMigrationConfig
   * @throws IOException if the JSON string is invalid with respect to PricePlanMigrationConfig
   */
  public static PricePlanMigrationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricePlanMigrationConfig.class);
  }

  /**
   * Convert an instance of PricePlanMigrationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

