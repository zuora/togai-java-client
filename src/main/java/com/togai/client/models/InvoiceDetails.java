/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.InvoiceDetailsAccount;
import com.togai.client.models.InvoiceDetailsCustomer;
import com.togai.client.models.InvoiceDetailsInvoiceGroup;
import com.togai.client.models.InvoiceDetailsOrganization;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * InvoiceDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class InvoiceDetails implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  @javax.annotation.Nullable
  private InvoiceDetailsCustomer customer;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private InvoiceDetailsAccount account;

  public static final String SERIALIZED_NAME_PRICE_PLAN_NAME = "pricePlanName";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_NAME)
  @javax.annotation.Nullable
  private String pricePlanName;

  public static final String SERIALIZED_NAME_INVOICE_GROUP = "invoiceGroup";
  @SerializedName(SERIALIZED_NAME_INVOICE_GROUP)
  @javax.annotation.Nullable
  private InvoiceDetailsInvoiceGroup invoiceGroup;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private InvoiceDetailsOrganization organization;

  public static final String SERIALIZED_NAME_LOGO_URL = "logoUrl";
  @SerializedName(SERIALIZED_NAME_LOGO_URL)
  @javax.annotation.Nullable
  private String logoUrl;

  public InvoiceDetails() {
  }

  public InvoiceDetails customer(@javax.annotation.Nullable InvoiceDetailsCustomer customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Get customer
   * @return customer
   */
  @javax.annotation.Nullable
  public InvoiceDetailsCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(@javax.annotation.Nullable InvoiceDetailsCustomer customer) {
    this.customer = customer;
  }


  public InvoiceDetails account(@javax.annotation.Nullable InvoiceDetailsAccount account) {
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  public InvoiceDetailsAccount getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable InvoiceDetailsAccount account) {
    this.account = account;
  }


  public InvoiceDetails pricePlanName(@javax.annotation.Nullable String pricePlanName) {
    this.pricePlanName = pricePlanName;
    return this;
  }

  /**
   * Get pricePlanName
   * @return pricePlanName
   */
  @javax.annotation.Nullable
  public String getPricePlanName() {
    return pricePlanName;
  }

  public void setPricePlanName(@javax.annotation.Nullable String pricePlanName) {
    this.pricePlanName = pricePlanName;
  }


  public InvoiceDetails invoiceGroup(@javax.annotation.Nullable InvoiceDetailsInvoiceGroup invoiceGroup) {
    this.invoiceGroup = invoiceGroup;
    return this;
  }

  /**
   * Get invoiceGroup
   * @return invoiceGroup
   */
  @javax.annotation.Nullable
  public InvoiceDetailsInvoiceGroup getInvoiceGroup() {
    return invoiceGroup;
  }

  public void setInvoiceGroup(@javax.annotation.Nullable InvoiceDetailsInvoiceGroup invoiceGroup) {
    this.invoiceGroup = invoiceGroup;
  }


  public InvoiceDetails organization(@javax.annotation.Nullable InvoiceDetailsOrganization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public InvoiceDetailsOrganization getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable InvoiceDetailsOrganization organization) {
    this.organization = organization;
  }


  public InvoiceDetails logoUrl(@javax.annotation.Nullable String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

  /**
   * Get logoUrl
   * @return logoUrl
   */
  @javax.annotation.Nullable
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(@javax.annotation.Nullable String logoUrl) {
    this.logoUrl = logoUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceDetails invoiceDetails = (InvoiceDetails) o;
    return Objects.equals(this.customer, invoiceDetails.customer) &&
        Objects.equals(this.account, invoiceDetails.account) &&
        Objects.equals(this.pricePlanName, invoiceDetails.pricePlanName) &&
        Objects.equals(this.invoiceGroup, invoiceDetails.invoiceGroup) &&
        Objects.equals(this.organization, invoiceDetails.organization) &&
        Objects.equals(this.logoUrl, invoiceDetails.logoUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, account, pricePlanName, invoiceGroup, organization, logoUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceDetails {\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    pricePlanName: ").append(toIndentedString(pricePlanName)).append("\n");
    sb.append("    invoiceGroup: ").append(toIndentedString(invoiceGroup)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customer");
    openapiFields.add("account");
    openapiFields.add("pricePlanName");
    openapiFields.add("invoiceGroup");
    openapiFields.add("organization");
    openapiFields.add("logoUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceDetails is not found in the empty JSON string", InvoiceDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customer`
      if (jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) {
        InvoiceDetailsCustomer.validateJsonElement(jsonObj.get("customer"));
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        InvoiceDetailsAccount.validateJsonElement(jsonObj.get("account"));
      }
      if ((jsonObj.get("pricePlanName") != null && !jsonObj.get("pricePlanName").isJsonNull()) && !jsonObj.get("pricePlanName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanName").toString()));
      }
      // validate the optional field `invoiceGroup`
      if (jsonObj.get("invoiceGroup") != null && !jsonObj.get("invoiceGroup").isJsonNull()) {
        InvoiceDetailsInvoiceGroup.validateJsonElement(jsonObj.get("invoiceGroup"));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        InvoiceDetailsOrganization.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("logoUrl") != null && !jsonObj.get("logoUrl").isJsonNull()) && !jsonObj.get("logoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logoUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceDetails>() {
           @Override
           public void write(JsonWriter out, InvoiceDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceDetails
   * @throws IOException if the JSON string is invalid with respect to InvoiceDetails
   */
  public static InvoiceDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceDetails.class);
  }

  /**
   * Convert an instance of InvoiceDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

