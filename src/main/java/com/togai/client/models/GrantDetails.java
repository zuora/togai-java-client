/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.ExpiryType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Grant details of Credit Grant Rate Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GrantDetails implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  @javax.annotation.Nonnull
  private Integer priority;

  public static final String SERIALIZED_NAME_EXPIRY_TYPE = "expiryType";
  @SerializedName(SERIALIZED_NAME_EXPIRY_TYPE)
  @javax.annotation.Nonnull
  private ExpiryType expiryType;

  public static final String SERIALIZED_NAME_EXPIRY_DURATION = "expiryDuration";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DURATION)
  @javax.annotation.Nullable
  private String expiryDuration;

  public static final String SERIALIZED_NAME_APPLICABLE_ENTITY_IDS = "applicableEntityIds";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_ENTITY_IDS)
  @javax.annotation.Nullable
  private List<String> applicableEntityIds = new ArrayList<>();

  public GrantDetails() {
  }

  public GrantDetails priority(@javax.annotation.Nonnull Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Get priority
   * minimum: 0
   * @return priority
   */
  @javax.annotation.Nonnull
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(@javax.annotation.Nonnull Integer priority) {
    this.priority = priority;
  }


  public GrantDetails expiryType(@javax.annotation.Nonnull ExpiryType expiryType) {
    this.expiryType = expiryType;
    return this;
  }

  /**
   * Get expiryType
   * @return expiryType
   */
  @javax.annotation.Nonnull
  public ExpiryType getExpiryType() {
    return expiryType;
  }

  public void setExpiryType(@javax.annotation.Nonnull ExpiryType expiryType) {
    this.expiryType = expiryType;
  }


  public GrantDetails expiryDuration(@javax.annotation.Nullable String expiryDuration) {
    this.expiryDuration = expiryDuration;
    return this;
  }

  /**
   * Get expiryDuration
   * @return expiryDuration
   */
  @javax.annotation.Nullable
  public String getExpiryDuration() {
    return expiryDuration;
  }

  public void setExpiryDuration(@javax.annotation.Nullable String expiryDuration) {
    this.expiryDuration = expiryDuration;
  }


  public GrantDetails applicableEntityIds(@javax.annotation.Nullable List<String> applicableEntityIds) {
    this.applicableEntityIds = applicableEntityIds;
    return this;
  }

  public GrantDetails addApplicableEntityIdsItem(String applicableEntityIdsItem) {
    if (this.applicableEntityIds == null) {
      this.applicableEntityIds = new ArrayList<>();
    }
    this.applicableEntityIds.add(applicableEntityIdsItem);
    return this;
  }

  /**
   * Get applicableEntityIds
   * @return applicableEntityIds
   */
  @javax.annotation.Nullable
  public List<String> getApplicableEntityIds() {
    return applicableEntityIds;
  }

  public void setApplicableEntityIds(@javax.annotation.Nullable List<String> applicableEntityIds) {
    this.applicableEntityIds = applicableEntityIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrantDetails grantDetails = (GrantDetails) o;
    return Objects.equals(this.priority, grantDetails.priority) &&
        Objects.equals(this.expiryType, grantDetails.expiryType) &&
        Objects.equals(this.expiryDuration, grantDetails.expiryDuration) &&
        Objects.equals(this.applicableEntityIds, grantDetails.applicableEntityIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(priority, expiryType, expiryDuration, applicableEntityIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrantDetails {\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    expiryType: ").append(toIndentedString(expiryType)).append("\n");
    sb.append("    expiryDuration: ").append(toIndentedString(expiryDuration)).append("\n");
    sb.append("    applicableEntityIds: ").append(toIndentedString(applicableEntityIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("priority");
    openapiFields.add("expiryType");
    openapiFields.add("expiryDuration");
    openapiFields.add("applicableEntityIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("priority");
    openapiRequiredFields.add("expiryType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrantDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrantDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrantDetails is not found in the empty JSON string", GrantDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrantDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrantDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GrantDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `expiryType`
      ExpiryType.validateJsonElement(jsonObj.get("expiryType"));
      if ((jsonObj.get("expiryDuration") != null && !jsonObj.get("expiryDuration").isJsonNull()) && !jsonObj.get("expiryDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDuration").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableEntityIds") != null && !jsonObj.get("applicableEntityIds").isJsonNull() && !jsonObj.get("applicableEntityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableEntityIds` to be an array in the JSON string but got `%s`", jsonObj.get("applicableEntityIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrantDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrantDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrantDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrantDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<GrantDetails>() {
           @Override
           public void write(JsonWriter out, GrantDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrantDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrantDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrantDetails
   * @throws IOException if the JSON string is invalid with respect to GrantDetails
   */
  public static GrantDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrantDetails.class);
  }

  /**
   * Convert an instance of GrantDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

