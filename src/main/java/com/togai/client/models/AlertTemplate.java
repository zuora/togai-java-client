/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * AlertTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class AlertTemplate implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  @javax.annotation.Nonnull
  private Integer interval;

  public static final String SERIALIZED_NAME_ENTITY_SCHEMA = "entitySchema";
  @SerializedName(SERIALIZED_NAME_ENTITY_SCHEMA)
  @javax.annotation.Nullable
  private String entitySchema;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nullable
  private String entityType;

  public static final String SERIALIZED_NAME_OWNER_SCHEMA = "ownerSchema";
  @SerializedName(SERIALIZED_NAME_OWNER_SCHEMA)
  @javax.annotation.Nullable
  private String ownerSchema;

  public static final String SERIALIZED_NAME_OWNER_TYPE = "ownerType";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  @javax.annotation.Nullable
  private String ownerType;

  public static final String SERIALIZED_NAME_PARAMETERS_SCHEMA = "parametersSchema";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_SCHEMA)
  @javax.annotation.Nullable
  private String parametersSchema;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public AlertTemplate() {
  }

  public AlertTemplate id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Alert Template ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public AlertTemplate name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Alert Template Name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public AlertTemplate description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Alert Template Description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public AlertTemplate interval(@javax.annotation.Nonnull Integer interval) {
    this.interval = interval;
    return this;
  }

  /**
   * Cron Interval
   * @return interval
   */
  @javax.annotation.Nonnull
  public Integer getInterval() {
    return interval;
  }

  public void setInterval(@javax.annotation.Nonnull Integer interval) {
    this.interval = interval;
  }


  public AlertTemplate entitySchema(@javax.annotation.Nullable String entitySchema) {
    this.entitySchema = entitySchema;
    return this;
  }

  /**
   * Entity Schema
   * @return entitySchema
   */
  @javax.annotation.Nullable
  public String getEntitySchema() {
    return entitySchema;
  }

  public void setEntitySchema(@javax.annotation.Nullable String entitySchema) {
    this.entitySchema = entitySchema;
  }


  public AlertTemplate entityType(@javax.annotation.Nullable String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Entity Type
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nullable String entityType) {
    this.entityType = entityType;
  }


  public AlertTemplate ownerSchema(@javax.annotation.Nullable String ownerSchema) {
    this.ownerSchema = ownerSchema;
    return this;
  }

  /**
   * Owner Schema
   * @return ownerSchema
   */
  @javax.annotation.Nullable
  public String getOwnerSchema() {
    return ownerSchema;
  }

  public void setOwnerSchema(@javax.annotation.Nullable String ownerSchema) {
    this.ownerSchema = ownerSchema;
  }


  public AlertTemplate ownerType(@javax.annotation.Nullable String ownerType) {
    this.ownerType = ownerType;
    return this;
  }

  /**
   * Owner Type
   * @return ownerType
   */
  @javax.annotation.Nullable
  public String getOwnerType() {
    return ownerType;
  }

  public void setOwnerType(@javax.annotation.Nullable String ownerType) {
    this.ownerType = ownerType;
  }


  public AlertTemplate parametersSchema(@javax.annotation.Nullable String parametersSchema) {
    this.parametersSchema = parametersSchema;
    return this;
  }

  /**
   * Parameters Schema
   * @return parametersSchema
   */
  @javax.annotation.Nullable
  public String getParametersSchema() {
    return parametersSchema;
  }

  public void setParametersSchema(@javax.annotation.Nullable String parametersSchema) {
    this.parametersSchema = parametersSchema;
  }


  public AlertTemplate createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AlertTemplate updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertTemplate alertTemplate = (AlertTemplate) o;
    return Objects.equals(this.id, alertTemplate.id) &&
        Objects.equals(this.name, alertTemplate.name) &&
        Objects.equals(this.description, alertTemplate.description) &&
        Objects.equals(this.interval, alertTemplate.interval) &&
        Objects.equals(this.entitySchema, alertTemplate.entitySchema) &&
        Objects.equals(this.entityType, alertTemplate.entityType) &&
        Objects.equals(this.ownerSchema, alertTemplate.ownerSchema) &&
        Objects.equals(this.ownerType, alertTemplate.ownerType) &&
        Objects.equals(this.parametersSchema, alertTemplate.parametersSchema) &&
        Objects.equals(this.createdAt, alertTemplate.createdAt) &&
        Objects.equals(this.updatedAt, alertTemplate.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, interval, entitySchema, entityType, ownerSchema, ownerType, parametersSchema, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertTemplate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    entitySchema: ").append(toIndentedString(entitySchema)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    ownerSchema: ").append(toIndentedString(ownerSchema)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("    parametersSchema: ").append(toIndentedString(parametersSchema)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("interval");
    openapiFields.add("entitySchema");
    openapiFields.add("entityType");
    openapiFields.add("ownerSchema");
    openapiFields.add("ownerType");
    openapiFields.add("parametersSchema");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertTemplate is not found in the empty JSON string", AlertTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AlertTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("entitySchema") != null && !jsonObj.get("entitySchema").isJsonNull()) && !jsonObj.get("entitySchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entitySchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entitySchema").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      if ((jsonObj.get("ownerSchema") != null && !jsonObj.get("ownerSchema").isJsonNull()) && !jsonObj.get("ownerSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerSchema").toString()));
      }
      if ((jsonObj.get("ownerType") != null && !jsonObj.get("ownerType").isJsonNull()) && !jsonObj.get("ownerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerType").toString()));
      }
      if ((jsonObj.get("parametersSchema") != null && !jsonObj.get("parametersSchema").isJsonNull()) && !jsonObj.get("parametersSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parametersSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parametersSchema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertTemplate>() {
           @Override
           public void write(JsonWriter out, AlertTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertTemplate
   * @throws IOException if the JSON string is invalid with respect to AlertTemplate
   */
  public static AlertTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertTemplate.class);
  }

  /**
   * Convert an instance of AlertTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

