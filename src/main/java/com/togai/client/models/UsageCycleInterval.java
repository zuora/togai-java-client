/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import java.io.Serializable;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * UsageCycleInterval field allows you to treat the billing interval as many smaller windows. Revenue is calculated for each of the windows (usage cycles) and their sum is considered as the billing interval revenue. Example: 1 Named License being used across entire billing interval. Rate Value: $1/license CASE 1: Without usage cycle. $1 is charged for the entire billing cycle. CASE 2: Usage cycle is configure to be WEEKLY and the billing interval has 4 weeks. In this case $1 is charged  for each week totalling to $4 across for the billing interval 
 */
@JsonAdapter(UsageCycleInterval.Adapter.class)
public enum UsageCycleInterval {
  
  WEEKLY("WEEKLY"),
  
  MONTHLY("MONTHLY"),
  
  QUARTERLY("QUARTERLY"),
  
  HALF_YEARLY("HALF_YEARLY"),
  
  ANNUALLY("ANNUALLY");

  private String value;

  UsageCycleInterval(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static UsageCycleInterval fromValue(String value) {
    for (UsageCycleInterval b : UsageCycleInterval.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<UsageCycleInterval> {
    @Override
    public void write(final JsonWriter jsonWriter, final UsageCycleInterval enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public UsageCycleInterval read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return UsageCycleInterval.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    UsageCycleInterval.fromValue(value);
  }
}

