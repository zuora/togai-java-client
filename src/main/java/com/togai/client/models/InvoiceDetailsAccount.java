/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.Address;
import java.io.IOException;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * InvoiceDetailsAccount
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class InvoiceDetailsAccount implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_INVOICE_CURRENCY = "invoiceCurrency";
  @SerializedName(SERIALIZED_NAME_INVOICE_CURRENCY)
  @javax.annotation.Nonnull
  private String invoiceCurrency;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  @javax.annotation.Nonnull
  private Address address;

  public static final String SERIALIZED_NAME_PRIMARY_EMAIL = "primaryEmail";
  @SerializedName(SERIALIZED_NAME_PRIMARY_EMAIL)
  @javax.annotation.Nonnull
  private String primaryEmail;

  public InvoiceDetailsAccount() {
  }

  public InvoiceDetailsAccount name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public InvoiceDetailsAccount invoiceCurrency(@javax.annotation.Nonnull String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
    return this;
  }

  /**
   * Get invoiceCurrency
   * @return invoiceCurrency
   */
  @javax.annotation.Nonnull
  public String getInvoiceCurrency() {
    return invoiceCurrency;
  }

  public void setInvoiceCurrency(@javax.annotation.Nonnull String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
  }


  public InvoiceDetailsAccount address(@javax.annotation.Nonnull Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nonnull
  public Address getAddress() {
    return address;
  }

  public void setAddress(@javax.annotation.Nonnull Address address) {
    this.address = address;
  }


  public InvoiceDetailsAccount primaryEmail(@javax.annotation.Nonnull String primaryEmail) {
    this.primaryEmail = primaryEmail;
    return this;
  }

  /**
   * Get primaryEmail
   * @return primaryEmail
   */
  @javax.annotation.Nonnull
  public String getPrimaryEmail() {
    return primaryEmail;
  }

  public void setPrimaryEmail(@javax.annotation.Nonnull String primaryEmail) {
    this.primaryEmail = primaryEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceDetailsAccount invoiceDetailsAccount = (InvoiceDetailsAccount) o;
    return Objects.equals(this.name, invoiceDetailsAccount.name) &&
        Objects.equals(this.invoiceCurrency, invoiceDetailsAccount.invoiceCurrency) &&
        Objects.equals(this.address, invoiceDetailsAccount.address) &&
        Objects.equals(this.primaryEmail, invoiceDetailsAccount.primaryEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, invoiceCurrency, address, primaryEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceDetailsAccount {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    invoiceCurrency: ").append(toIndentedString(invoiceCurrency)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    primaryEmail: ").append(toIndentedString(primaryEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("invoiceCurrency");
    openapiFields.add("address");
    openapiFields.add("primaryEmail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("invoiceCurrency");
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("primaryEmail");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceDetailsAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceDetailsAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceDetailsAccount is not found in the empty JSON string", InvoiceDetailsAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceDetailsAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceDetailsAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceDetailsAccount.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("invoiceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceCurrency").toString()));
      }
      // validate the required field `address`
      Address.validateJsonElement(jsonObj.get("address"));
      if (!jsonObj.get("primaryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryEmail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceDetailsAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceDetailsAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceDetailsAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceDetailsAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceDetailsAccount>() {
           @Override
           public void write(JsonWriter out, InvoiceDetailsAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceDetailsAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceDetailsAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceDetailsAccount
   * @throws IOException if the JSON string is invalid with respect to InvoiceDetailsAccount
   */
  public static InvoiceDetailsAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceDetailsAccount.class);
  }

  /**
   * Convert an instance of InvoiceDetailsAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

