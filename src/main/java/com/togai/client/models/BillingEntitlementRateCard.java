/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.FeatureConfig;
import com.togai.client.models.InvoiceTiming;
import com.togai.client.models.RatePlan;
import com.togai.client.models.RateValue;
import com.togai.client.models.RecurrenceConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Billing Entitlement rate card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class BillingEntitlementRateCard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FEATURE_ID = "featureId";
  @SerializedName(SERIALIZED_NAME_FEATURE_ID)
  @javax.annotation.Nonnull
  private String featureId;

  public static final String SERIALIZED_NAME_FEATURE_CONFIGS = "featureConfigs";
  @SerializedName(SERIALIZED_NAME_FEATURE_CONFIGS)
  @javax.annotation.Nonnull
  private List<FeatureConfig> featureConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_INVOICE_TIMING = "invoiceTiming";
  @SerializedName(SERIALIZED_NAME_INVOICE_TIMING)
  @javax.annotation.Nonnull
  private InvoiceTiming invoiceTiming;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_RATE_PLAN = "ratePlan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  @javax.annotation.Nonnull
  private RatePlan ratePlan;

  public static final String SERIALIZED_NAME_RATE_VALUES = "rateValues";
  @SerializedName(SERIALIZED_NAME_RATE_VALUES)
  @javax.annotation.Nonnull
  private List<RateValue> rateValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECURRENCE_CONFIG = "recurrenceConfig";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_CONFIG)
  @javax.annotation.Nullable
  private RecurrenceConfig recurrenceConfig;

  public BillingEntitlementRateCard() {
  }

  public BillingEntitlementRateCard featureId(@javax.annotation.Nonnull String featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * Get featureId
   * @return featureId
   */
  @javax.annotation.Nonnull
  public String getFeatureId() {
    return featureId;
  }

  public void setFeatureId(@javax.annotation.Nonnull String featureId) {
    this.featureId = featureId;
  }


  public BillingEntitlementRateCard featureConfigs(@javax.annotation.Nonnull List<FeatureConfig> featureConfigs) {
    this.featureConfigs = featureConfigs;
    return this;
  }

  public BillingEntitlementRateCard addFeatureConfigsItem(FeatureConfig featureConfigsItem) {
    if (this.featureConfigs == null) {
      this.featureConfigs = new ArrayList<>();
    }
    this.featureConfigs.add(featureConfigsItem);
    return this;
  }

  /**
   * Get featureConfigs
   * @return featureConfigs
   */
  @javax.annotation.Nonnull
  public List<FeatureConfig> getFeatureConfigs() {
    return featureConfigs;
  }

  public void setFeatureConfigs(@javax.annotation.Nonnull List<FeatureConfig> featureConfigs) {
    this.featureConfigs = featureConfigs;
  }


  public BillingEntitlementRateCard tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * A tag string to group rate cards
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public BillingEntitlementRateCard invoiceTiming(@javax.annotation.Nonnull InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
    return this;
  }

  /**
   * Get invoiceTiming
   * @return invoiceTiming
   */
  @javax.annotation.Nonnull
  public InvoiceTiming getInvoiceTiming() {
    return invoiceTiming;
  }

  public void setInvoiceTiming(@javax.annotation.Nonnull InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
  }


  public BillingEntitlementRateCard displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name your rate card, this will be used in invoice
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public BillingEntitlementRateCard name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique identifier for the rate card in a price plan. If left null it is auto-generated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public BillingEntitlementRateCard ratePlan(@javax.annotation.Nonnull RatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * Get ratePlan
   * @return ratePlan
   */
  @javax.annotation.Nonnull
  public RatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(@javax.annotation.Nonnull RatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public BillingEntitlementRateCard rateValues(@javax.annotation.Nonnull List<RateValue> rateValues) {
    this.rateValues = rateValues;
    return this;
  }

  public BillingEntitlementRateCard addRateValuesItem(RateValue rateValuesItem) {
    if (this.rateValues == null) {
      this.rateValues = new ArrayList<>();
    }
    this.rateValues.add(rateValuesItem);
    return this;
  }

  /**
   * Get rateValues
   * @return rateValues
   */
  @javax.annotation.Nonnull
  public List<RateValue> getRateValues() {
    return rateValues;
  }

  public void setRateValues(@javax.annotation.Nonnull List<RateValue> rateValues) {
    this.rateValues = rateValues;
  }


  public BillingEntitlementRateCard recurrenceConfig(@javax.annotation.Nullable RecurrenceConfig recurrenceConfig) {
    this.recurrenceConfig = recurrenceConfig;
    return this;
  }

  /**
   * Get recurrenceConfig
   * @return recurrenceConfig
   */
  @javax.annotation.Nullable
  public RecurrenceConfig getRecurrenceConfig() {
    return recurrenceConfig;
  }

  public void setRecurrenceConfig(@javax.annotation.Nullable RecurrenceConfig recurrenceConfig) {
    this.recurrenceConfig = recurrenceConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BillingEntitlementRateCard billingEntitlementRateCard = (BillingEntitlementRateCard) o;
    return Objects.equals(this.featureId, billingEntitlementRateCard.featureId) &&
        Objects.equals(this.featureConfigs, billingEntitlementRateCard.featureConfigs) &&
        Objects.equals(this.tag, billingEntitlementRateCard.tag) &&
        Objects.equals(this.invoiceTiming, billingEntitlementRateCard.invoiceTiming) &&
        Objects.equals(this.displayName, billingEntitlementRateCard.displayName) &&
        Objects.equals(this.name, billingEntitlementRateCard.name) &&
        Objects.equals(this.ratePlan, billingEntitlementRateCard.ratePlan) &&
        Objects.equals(this.rateValues, billingEntitlementRateCard.rateValues) &&
        Objects.equals(this.recurrenceConfig, billingEntitlementRateCard.recurrenceConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(featureId, featureConfigs, tag, invoiceTiming, displayName, name, ratePlan, rateValues, recurrenceConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BillingEntitlementRateCard {\n");
    sb.append("    featureId: ").append(toIndentedString(featureId)).append("\n");
    sb.append("    featureConfigs: ").append(toIndentedString(featureConfigs)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    invoiceTiming: ").append(toIndentedString(invoiceTiming)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    rateValues: ").append(toIndentedString(rateValues)).append("\n");
    sb.append("    recurrenceConfig: ").append(toIndentedString(recurrenceConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("featureId");
    openapiFields.add("featureConfigs");
    openapiFields.add("tag");
    openapiFields.add("invoiceTiming");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("ratePlan");
    openapiFields.add("rateValues");
    openapiFields.add("recurrenceConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("featureId");
    openapiRequiredFields.add("featureConfigs");
    openapiRequiredFields.add("invoiceTiming");
    openapiRequiredFields.add("ratePlan");
    openapiRequiredFields.add("rateValues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BillingEntitlementRateCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BillingEntitlementRateCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BillingEntitlementRateCard is not found in the empty JSON string", BillingEntitlementRateCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BillingEntitlementRateCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BillingEntitlementRateCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BillingEntitlementRateCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("featureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("featureConfigs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("featureConfigs").toString()));
      }

      JsonArray jsonArrayfeatureConfigs = jsonObj.getAsJsonArray("featureConfigs");
      // validate the required field `featureConfigs` (array)
      for (int i = 0; i < jsonArrayfeatureConfigs.size(); i++) {
        FeatureConfig.validateJsonElement(jsonArrayfeatureConfigs.get(i));
      };
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the required field `invoiceTiming`
      InvoiceTiming.validateJsonElement(jsonObj.get("invoiceTiming"));
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `ratePlan`
      RatePlan.validateJsonElement(jsonObj.get("ratePlan"));
      // ensure the json data is an array
      if (!jsonObj.get("rateValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateValues` to be an array in the JSON string but got `%s`", jsonObj.get("rateValues").toString()));
      }

      JsonArray jsonArrayrateValues = jsonObj.getAsJsonArray("rateValues");
      // validate the required field `rateValues` (array)
      for (int i = 0; i < jsonArrayrateValues.size(); i++) {
        RateValue.validateJsonElement(jsonArrayrateValues.get(i));
      };
      // validate the optional field `recurrenceConfig`
      if (jsonObj.get("recurrenceConfig") != null && !jsonObj.get("recurrenceConfig").isJsonNull()) {
        RecurrenceConfig.validateJsonElement(jsonObj.get("recurrenceConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BillingEntitlementRateCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BillingEntitlementRateCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BillingEntitlementRateCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BillingEntitlementRateCard.class));

       return (TypeAdapter<T>) new TypeAdapter<BillingEntitlementRateCard>() {
           @Override
           public void write(JsonWriter out, BillingEntitlementRateCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BillingEntitlementRateCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BillingEntitlementRateCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BillingEntitlementRateCard
   * @throws IOException if the JSON string is invalid with respect to BillingEntitlementRateCard
   */
  public static BillingEntitlementRateCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BillingEntitlementRateCard.class);
  }

  /**
   * Convert an instance of BillingEntitlementRateCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

