/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.LicenseEntriesConfigLookupCycle;
import com.togai.client.models.LicenseEntriesConfigLookupRange;
import com.togai.client.models.LicenseEntry;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Configuration for getting the license entries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class LicenseEntriesConfig implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Mode to get the license entries for the license rate cards - CUSTOM: Use the license entries provided in the request - LOOKUP_RANGE: Use the license entries of a given account for the specified range - LOOKUP_CYCLE: Use the license entries of a given account for the specified cycle 
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    CUSTOM("CUSTOM"),
    
    LOOKUP_RANGE("LOOKUP_RANGE"),
    
    LOOKUP_CYCLE("LOOKUP_CYCLE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nonnull
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_CUSTOM = "custom";
  @SerializedName(SERIALIZED_NAME_CUSTOM)
  @javax.annotation.Nullable
  private List<LicenseEntry> custom = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKUP_RANGE = "lookupRange";
  @SerializedName(SERIALIZED_NAME_LOOKUP_RANGE)
  @javax.annotation.Nullable
  private LicenseEntriesConfigLookupRange lookupRange;

  public static final String SERIALIZED_NAME_LOOKUP_CYCLE = "lookupCycle";
  @SerializedName(SERIALIZED_NAME_LOOKUP_CYCLE)
  @javax.annotation.Nullable
  private LicenseEntriesConfigLookupCycle lookupCycle;

  public LicenseEntriesConfig() {
  }

  public LicenseEntriesConfig mode(@javax.annotation.Nonnull ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Mode to get the license entries for the license rate cards - CUSTOM: Use the license entries provided in the request - LOOKUP_RANGE: Use the license entries of a given account for the specified range - LOOKUP_CYCLE: Use the license entries of a given account for the specified cycle 
   * @return mode
   */
  @javax.annotation.Nonnull
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nonnull ModeEnum mode) {
    this.mode = mode;
  }


  public LicenseEntriesConfig custom(@javax.annotation.Nullable List<LicenseEntry> custom) {
    this.custom = custom;
    return this;
  }

  public LicenseEntriesConfig addCustomItem(LicenseEntry customItem) {
    if (this.custom == null) {
      this.custom = new ArrayList<>();
    }
    this.custom.add(customItem);
    return this;
  }

  /**
   * List of license entries, this will be considered if mode is CUSTOM
   * @return custom
   */
  @javax.annotation.Nullable
  public List<LicenseEntry> getCustom() {
    return custom;
  }

  public void setCustom(@javax.annotation.Nullable List<LicenseEntry> custom) {
    this.custom = custom;
  }


  public LicenseEntriesConfig lookupRange(@javax.annotation.Nullable LicenseEntriesConfigLookupRange lookupRange) {
    this.lookupRange = lookupRange;
    return this;
  }

  /**
   * Get lookupRange
   * @return lookupRange
   */
  @javax.annotation.Nullable
  public LicenseEntriesConfigLookupRange getLookupRange() {
    return lookupRange;
  }

  public void setLookupRange(@javax.annotation.Nullable LicenseEntriesConfigLookupRange lookupRange) {
    this.lookupRange = lookupRange;
  }


  public LicenseEntriesConfig lookupCycle(@javax.annotation.Nullable LicenseEntriesConfigLookupCycle lookupCycle) {
    this.lookupCycle = lookupCycle;
    return this;
  }

  /**
   * Get lookupCycle
   * @return lookupCycle
   */
  @javax.annotation.Nullable
  public LicenseEntriesConfigLookupCycle getLookupCycle() {
    return lookupCycle;
  }

  public void setLookupCycle(@javax.annotation.Nullable LicenseEntriesConfigLookupCycle lookupCycle) {
    this.lookupCycle = lookupCycle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseEntriesConfig licenseEntriesConfig = (LicenseEntriesConfig) o;
    return Objects.equals(this.mode, licenseEntriesConfig.mode) &&
        Objects.equals(this.custom, licenseEntriesConfig.custom) &&
        Objects.equals(this.lookupRange, licenseEntriesConfig.lookupRange) &&
        Objects.equals(this.lookupCycle, licenseEntriesConfig.lookupCycle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, custom, lookupRange, lookupCycle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseEntriesConfig {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    lookupRange: ").append(toIndentedString(lookupRange)).append("\n");
    sb.append("    lookupCycle: ").append(toIndentedString(lookupCycle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mode");
    openapiFields.add("custom");
    openapiFields.add("lookupRange");
    openapiFields.add("lookupCycle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseEntriesConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseEntriesConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseEntriesConfig is not found in the empty JSON string", LicenseEntriesConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseEntriesConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseEntriesConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseEntriesConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the required field `mode`
      ModeEnum.validateJsonElement(jsonObj.get("mode"));
      if (jsonObj.get("custom") != null && !jsonObj.get("custom").isJsonNull()) {
        JsonArray jsonArraycustom = jsonObj.getAsJsonArray("custom");
        if (jsonArraycustom != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom` to be an array in the JSON string but got `%s`", jsonObj.get("custom").toString()));
          }

          // validate the optional field `custom` (array)
          for (int i = 0; i < jsonArraycustom.size(); i++) {
            LicenseEntry.validateJsonElement(jsonArraycustom.get(i));
          };
        }
      }
      // validate the optional field `lookupRange`
      if (jsonObj.get("lookupRange") != null && !jsonObj.get("lookupRange").isJsonNull()) {
        LicenseEntriesConfigLookupRange.validateJsonElement(jsonObj.get("lookupRange"));
      }
      // validate the optional field `lookupCycle`
      if (jsonObj.get("lookupCycle") != null && !jsonObj.get("lookupCycle").isJsonNull()) {
        LicenseEntriesConfigLookupCycle.validateJsonElement(jsonObj.get("lookupCycle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseEntriesConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseEntriesConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseEntriesConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseEntriesConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseEntriesConfig>() {
           @Override
           public void write(JsonWriter out, LicenseEntriesConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseEntriesConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseEntriesConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseEntriesConfig
   * @throws IOException if the JSON string is invalid with respect to LicenseEntriesConfig
   */
  public static LicenseEntriesConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseEntriesConfig.class);
  }

  /**
   * Convert an instance of LicenseEntriesConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

