/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Get feature credits response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GetFeatureCreditsResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_FEATURE_ID = "featureId";
  @SerializedName(SERIALIZED_NAME_FEATURE_ID)
  @javax.annotation.Nonnull
  private String featureId;

  public static final String SERIALIZED_NAME_GRANTED = "granted";
  @SerializedName(SERIALIZED_NAME_GRANTED)
  @javax.annotation.Nonnull
  private BigDecimal granted;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  @javax.annotation.Nonnull
  private BigDecimal balance;

  public static final String SERIALIZED_NAME_OVERAGE_LIMIT = "overageLimit";
  @SerializedName(SERIALIZED_NAME_OVERAGE_LIMIT)
  @javax.annotation.Nullable
  private BigDecimal overageLimit;

  public static final String SERIALIZED_NAME_USED_OVERAGE = "usedOverage";
  @SerializedName(SERIALIZED_NAME_USED_OVERAGE)
  @javax.annotation.Nonnull
  private BigDecimal usedOverage;

  public GetFeatureCreditsResponse() {
  }

  public GetFeatureCreditsResponse accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public GetFeatureCreditsResponse featureId(@javax.annotation.Nonnull String featureId) {
    this.featureId = featureId;
    return this;
  }

  /**
   * Get featureId
   * @return featureId
   */
  @javax.annotation.Nonnull
  public String getFeatureId() {
    return featureId;
  }

  public void setFeatureId(@javax.annotation.Nonnull String featureId) {
    this.featureId = featureId;
  }


  public GetFeatureCreditsResponse granted(@javax.annotation.Nonnull BigDecimal granted) {
    this.granted = granted;
    return this;
  }

  /**
   * Get granted
   * @return granted
   */
  @javax.annotation.Nonnull
  public BigDecimal getGranted() {
    return granted;
  }

  public void setGranted(@javax.annotation.Nonnull BigDecimal granted) {
    this.granted = granted;
  }


  public GetFeatureCreditsResponse balance(@javax.annotation.Nonnull BigDecimal balance) {
    this.balance = balance;
    return this;
  }

  /**
   * Get balance
   * @return balance
   */
  @javax.annotation.Nonnull
  public BigDecimal getBalance() {
    return balance;
  }

  public void setBalance(@javax.annotation.Nonnull BigDecimal balance) {
    this.balance = balance;
  }


  public GetFeatureCreditsResponse overageLimit(@javax.annotation.Nullable BigDecimal overageLimit) {
    this.overageLimit = overageLimit;
    return this;
  }

  /**
   * Get overageLimit
   * @return overageLimit
   */
  @javax.annotation.Nullable
  public BigDecimal getOverageLimit() {
    return overageLimit;
  }

  public void setOverageLimit(@javax.annotation.Nullable BigDecimal overageLimit) {
    this.overageLimit = overageLimit;
  }


  public GetFeatureCreditsResponse usedOverage(@javax.annotation.Nonnull BigDecimal usedOverage) {
    this.usedOverage = usedOverage;
    return this;
  }

  /**
   * Get usedOverage
   * @return usedOverage
   */
  @javax.annotation.Nonnull
  public BigDecimal getUsedOverage() {
    return usedOverage;
  }

  public void setUsedOverage(@javax.annotation.Nonnull BigDecimal usedOverage) {
    this.usedOverage = usedOverage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFeatureCreditsResponse getFeatureCreditsResponse = (GetFeatureCreditsResponse) o;
    return Objects.equals(this.accountId, getFeatureCreditsResponse.accountId) &&
        Objects.equals(this.featureId, getFeatureCreditsResponse.featureId) &&
        Objects.equals(this.granted, getFeatureCreditsResponse.granted) &&
        Objects.equals(this.balance, getFeatureCreditsResponse.balance) &&
        Objects.equals(this.overageLimit, getFeatureCreditsResponse.overageLimit) &&
        Objects.equals(this.usedOverage, getFeatureCreditsResponse.usedOverage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, featureId, granted, balance, overageLimit, usedOverage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFeatureCreditsResponse {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    featureId: ").append(toIndentedString(featureId)).append("\n");
    sb.append("    granted: ").append(toIndentedString(granted)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    overageLimit: ").append(toIndentedString(overageLimit)).append("\n");
    sb.append("    usedOverage: ").append(toIndentedString(usedOverage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("featureId");
    openapiFields.add("granted");
    openapiFields.add("balance");
    openapiFields.add("overageLimit");
    openapiFields.add("usedOverage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("featureId");
    openapiRequiredFields.add("granted");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("usedOverage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFeatureCreditsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFeatureCreditsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFeatureCreditsResponse is not found in the empty JSON string", GetFeatureCreditsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFeatureCreditsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFeatureCreditsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetFeatureCreditsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("featureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFeatureCreditsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFeatureCreditsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFeatureCreditsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFeatureCreditsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFeatureCreditsResponse>() {
           @Override
           public void write(JsonWriter out, GetFeatureCreditsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFeatureCreditsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFeatureCreditsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFeatureCreditsResponse
   * @throws IOException if the JSON string is invalid with respect to GetFeatureCreditsResponse
   */
  public static GetFeatureCreditsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFeatureCreditsResponse.class);
  }

  /**
   * Convert an instance of GetFeatureCreditsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

