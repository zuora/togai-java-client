/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricingRuleChangesLog;
import com.togai.client.models.PricingRuleInfo;
import com.togai.client.models.PricingRulesValues;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Pricing Rules Logs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PricingRulesLog implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CONDITION_TRUE("CONDITION_TRUE"),
    
    CONDITION_FALSE("CONDITION_FALSE"),
    
    CONDITION_ERROR("CONDITION_ERROR"),
    
    COMPUTATION_ERROR("COMPUTATION_ERROR");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  @javax.annotation.Nonnull
  private Integer order;

  public static final String SERIALIZED_NAME_CHANGES = "changes";
  @SerializedName(SERIALIZED_NAME_CHANGES)
  @javax.annotation.Nonnull
  private PricingRuleChangesLog changes;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  @javax.annotation.Nullable
  private PricingRuleInfo rule;

  public static final String SERIALIZED_NAME_VARIABLES_VALUE = "variablesValue";
  @SerializedName(SERIALIZED_NAME_VARIABLES_VALUE)
  @javax.annotation.Nullable
  private Map<String, PricingRulesValues> variablesValue;

  public PricingRulesLog() {
  }

  public PricingRulesLog id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PricingRulesLog type(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable TypeEnum type) {
    this.type = type;
  }


  public PricingRulesLog order(@javax.annotation.Nonnull Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Get order
   * @return order
   */
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(@javax.annotation.Nonnull Integer order) {
    this.order = order;
  }


  public PricingRulesLog changes(@javax.annotation.Nonnull PricingRuleChangesLog changes) {
    this.changes = changes;
    return this;
  }

  /**
   * Get changes
   * @return changes
   */
  @javax.annotation.Nonnull
  public PricingRuleChangesLog getChanges() {
    return changes;
  }

  public void setChanges(@javax.annotation.Nonnull PricingRuleChangesLog changes) {
    this.changes = changes;
  }


  public PricingRulesLog rule(@javax.annotation.Nullable PricingRuleInfo rule) {
    this.rule = rule;
    return this;
  }

  /**
   * Get rule
   * @return rule
   */
  @javax.annotation.Nullable
  public PricingRuleInfo getRule() {
    return rule;
  }

  public void setRule(@javax.annotation.Nullable PricingRuleInfo rule) {
    this.rule = rule;
  }


  public PricingRulesLog variablesValue(@javax.annotation.Nullable Map<String, PricingRulesValues> variablesValue) {
    this.variablesValue = variablesValue;
    return this;
  }

  public PricingRulesLog putVariablesValueItem(String key, PricingRulesValues variablesValueItem) {
    if (this.variablesValue == null) {
      this.variablesValue = new HashMap<>();
    }
    this.variablesValue.put(key, variablesValueItem);
    return this;
  }

  /**
   * Get variablesValue
   * @return variablesValue
   */
  @javax.annotation.Nullable
  public Map<String, PricingRulesValues> getVariablesValue() {
    return variablesValue;
  }

  public void setVariablesValue(@javax.annotation.Nullable Map<String, PricingRulesValues> variablesValue) {
    this.variablesValue = variablesValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricingRulesLog pricingRulesLog = (PricingRulesLog) o;
    return Objects.equals(this.id, pricingRulesLog.id) &&
        Objects.equals(this.type, pricingRulesLog.type) &&
        Objects.equals(this.order, pricingRulesLog.order) &&
        Objects.equals(this.changes, pricingRulesLog.changes) &&
        Objects.equals(this.rule, pricingRulesLog.rule) &&
        Objects.equals(this.variablesValue, pricingRulesLog.variablesValue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, order, changes, rule, variablesValue);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricingRulesLog {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    changes: ").append(toIndentedString(changes)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    variablesValue: ").append(toIndentedString(variablesValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("order");
    openapiFields.add("changes");
    openapiFields.add("rule");
    openapiFields.add("variablesValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("order");
    openapiRequiredFields.add("changes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricingRulesLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricingRulesLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricingRulesLog is not found in the empty JSON string", PricingRulesLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricingRulesLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricingRulesLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricingRulesLog.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      // validate the required field `changes`
      PricingRuleChangesLog.validateJsonElement(jsonObj.get("changes"));
      // validate the optional field `rule`
      if (jsonObj.get("rule") != null && !jsonObj.get("rule").isJsonNull()) {
        PricingRuleInfo.validateJsonElement(jsonObj.get("rule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricingRulesLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricingRulesLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricingRulesLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricingRulesLog.class));

       return (TypeAdapter<T>) new TypeAdapter<PricingRulesLog>() {
           @Override
           public void write(JsonWriter out, PricingRulesLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricingRulesLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricingRulesLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricingRulesLog
   * @throws IOException if the JSON string is invalid with respect to PricingRulesLog
   */
  public static PricingRulesLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricingRulesLog.class);
  }

  /**
   * Convert an instance of PricingRulesLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

