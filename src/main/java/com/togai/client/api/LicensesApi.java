/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.ErrorResponse;
import com.togai.client.models.GetLicenseUpdatesResponse;
import com.togai.client.models.LicenseEntryDetailsUpdateRequest;
import com.togai.client.models.LicenseUpdateRequest;
import com.togai.client.models.LicenseUpdateResponse;
import com.togai.client.models.NamedLicenseUpdatesPaginatedResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LicensesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LicensesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LicensesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addLicenseUpdateEntry
     * @param licenseUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseUpdateEntryCall(LicenseUpdateRequest licenseUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseUpdateRequest;

        // create path and map variables
        String localVarPath = "/license_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLicenseUpdateEntryValidateBeforeCall(LicenseUpdateRequest licenseUpdateRequest, final ApiCallback _callback) throws ApiException {
        return addLicenseUpdateEntryCall(licenseUpdateRequest, _callback);

    }

    /**
     * Update a license entry
     * This API let’s you to add a license entry
     * @param licenseUpdateRequest  (optional)
     * @return LicenseUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LicenseUpdateResponse addLicenseUpdateEntry(LicenseUpdateRequest licenseUpdateRequest) throws ApiException {
        ApiResponse<LicenseUpdateResponse> localVarResp = addLicenseUpdateEntryWithHttpInfo(licenseUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a license entry
     * This API let’s you to add a license entry
     * @param licenseUpdateRequest  (optional)
     * @return ApiResponse&lt;LicenseUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseUpdateResponse> addLicenseUpdateEntryWithHttpInfo(LicenseUpdateRequest licenseUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = addLicenseUpdateEntryValidateBeforeCall(licenseUpdateRequest, null);
        Type localVarReturnType = new TypeToken<LicenseUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a license entry (asynchronously)
     * This API let’s you to add a license entry
     * @param licenseUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to add a license entry. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLicenseUpdateEntryAsync(LicenseUpdateRequest licenseUpdateRequest, final ApiCallback<LicenseUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLicenseUpdateEntryValidateBeforeCall(licenseUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLicenseUpdates
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param licenseId License Id to filter (optional)
     * @param effectiveFrom effectiveFrom to filter (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to list licenses updates. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseUpdatesCall(String nextToken, String accountId, Integer pageSize, String licenseId, OffsetDateTime effectiveFrom, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/license_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (licenseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("licenseId", licenseId));
        }

        if (effectiveFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("effectiveFrom", effectiveFrom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLicenseUpdatesValidateBeforeCall(String nextToken, String accountId, Integer pageSize, String licenseId, OffsetDateTime effectiveFrom, final ApiCallback _callback) throws ApiException {
        return getLicenseUpdatesCall(nextToken, accountId, pageSize, licenseId, effectiveFrom, _callback);

    }

    /**
     * Get a list of licenses updates
     * This API let’s you to fetch a list of licenses updates with multiple query parameters
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param licenseId License Id to filter (optional)
     * @param effectiveFrom effectiveFrom to filter (optional)
     * @return GetLicenseUpdatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to list licenses updates. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public GetLicenseUpdatesResponse getLicenseUpdates(String nextToken, String accountId, Integer pageSize, String licenseId, OffsetDateTime effectiveFrom) throws ApiException {
        ApiResponse<GetLicenseUpdatesResponse> localVarResp = getLicenseUpdatesWithHttpInfo(nextToken, accountId, pageSize, licenseId, effectiveFrom);
        return localVarResp.getData();
    }

    /**
     * Get a list of licenses updates
     * This API let’s you to fetch a list of licenses updates with multiple query parameters
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param licenseId License Id to filter (optional)
     * @param effectiveFrom effectiveFrom to filter (optional)
     * @return ApiResponse&lt;GetLicenseUpdatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to list licenses updates. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLicenseUpdatesResponse> getLicenseUpdatesWithHttpInfo(String nextToken, String accountId, Integer pageSize, String licenseId, OffsetDateTime effectiveFrom) throws ApiException {
        okhttp3.Call localVarCall = getLicenseUpdatesValidateBeforeCall(nextToken, accountId, pageSize, licenseId, effectiveFrom, null);
        Type localVarReturnType = new TypeToken<GetLicenseUpdatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of licenses updates (asynchronously)
     * This API let’s you to fetch a list of licenses updates with multiple query parameters
     * @param nextToken Pagination token used as a marker to get records from next page. (optional)
     * @param accountId Filter option to filter based on account id. (optional)
     * @param pageSize Maximum page size expected by client to return the record list.    NOTE: Max page size cannot be more than 50. Also 50 is the default page size if no value is provided. (optional)
     * @param licenseId License Id to filter (optional)
     * @param effectiveFrom effectiveFrom to filter (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to list licenses updates. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unable to process the query parameters provided. Please check our docs for the api limits - https://togai.io/docs/limits. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLicenseUpdatesAsync(String nextToken, String accountId, Integer pageSize, String licenseId, OffsetDateTime effectiveFrom, final ApiCallback<GetLicenseUpdatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLicenseUpdatesValidateBeforeCall(nextToken, accountId, pageSize, licenseId, effectiveFrom, _callback);
        Type localVarReturnType = new TypeToken<GetLicenseUpdatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNamedLicenseUpdates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamedLicenseUpdatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/named_license_updates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamedLicenseUpdatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getNamedLicenseUpdatesCall(_callback);

    }

    /**
     * Get a list of named licenses updates
     * This API let’s you to fetch a list of named licenses updates with multiple query parameters
     * @return NamedLicenseUpdatesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public NamedLicenseUpdatesPaginatedResponse getNamedLicenseUpdates() throws ApiException {
        ApiResponse<NamedLicenseUpdatesPaginatedResponse> localVarResp = getNamedLicenseUpdatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of named licenses updates
     * This API let’s you to fetch a list of named licenses updates with multiple query parameters
     * @return ApiResponse&lt;NamedLicenseUpdatesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NamedLicenseUpdatesPaginatedResponse> getNamedLicenseUpdatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getNamedLicenseUpdatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NamedLicenseUpdatesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of named licenses updates (asynchronously)
     * This API let’s you to fetch a list of named licenses updates with multiple query parameters
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNamedLicenseUpdatesAsync(final ApiCallback<NamedLicenseUpdatesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamedLicenseUpdatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NamedLicenseUpdatesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLicenseEntryDetails
     * @param licenseId License Id to filter (optional)
     * @param licenseEntryDetailsUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a license entry. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseEntryDetailsCall(String licenseId, LicenseEntryDetailsUpdateRequest licenseEntryDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEntryDetailsUpdateRequest;

        // create path and map variables
        String localVarPath = "/license_updates/{license_id}";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (licenseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("licenseId", licenseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLicenseEntryDetailsValidateBeforeCall(String licenseId, LicenseEntryDetailsUpdateRequest licenseEntryDetailsUpdateRequest, final ApiCallback _callback) throws ApiException {
        return updateLicenseEntryDetailsCall(licenseId, licenseEntryDetailsUpdateRequest, _callback);

    }

    /**
     * Update a license entry details
     * This API let’s you to update metadata of a license entry
     * @param licenseId License Id to filter (optional)
     * @param licenseEntryDetailsUpdateRequest  (optional)
     * @return LicenseUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a license entry. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public LicenseUpdateResponse updateLicenseEntryDetails(String licenseId, LicenseEntryDetailsUpdateRequest licenseEntryDetailsUpdateRequest) throws ApiException {
        ApiResponse<LicenseUpdateResponse> localVarResp = updateLicenseEntryDetailsWithHttpInfo(licenseId, licenseEntryDetailsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update a license entry details
     * This API let’s you to update metadata of a license entry
     * @param licenseId License Id to filter (optional)
     * @param licenseEntryDetailsUpdateRequest  (optional)
     * @return ApiResponse&lt;LicenseUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a license entry. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseUpdateResponse> updateLicenseEntryDetailsWithHttpInfo(String licenseId, LicenseEntryDetailsUpdateRequest licenseEntryDetailsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateLicenseEntryDetailsValidateBeforeCall(licenseId, licenseEntryDetailsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<LicenseUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a license entry details (asynchronously)
     * This API let’s you to update metadata of a license entry
     * @param licenseId License Id to filter (optional)
     * @param licenseEntryDetailsUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Credential is not valid. Please check the response message for failure details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Credential does not have access to update a license entry. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Request throttled. Please check the response message on the failure details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLicenseEntryDetailsAsync(String licenseId, LicenseEntryDetailsUpdateRequest licenseEntryDetailsUpdateRequest, final ApiCallback<LicenseUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLicenseEntryDetailsValidateBeforeCall(licenseId, licenseEntryDetailsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
