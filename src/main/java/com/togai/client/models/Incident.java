/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Incident
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Incident implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_ALERT_ID = "alertId";
  @SerializedName(SERIALIZED_NAME_ALERT_ID)
  @javax.annotation.Nonnull
  private String alertId;

  public static final String SERIALIZED_NAME_ALERT_VERSION = "alertVersion";
  @SerializedName(SERIALIZED_NAME_ALERT_VERSION)
  @javax.annotation.Nonnull
  private Integer alertVersion;

  public static final String SERIALIZED_NAME_ALERT_TEMPLATE_ID = "alertTemplateId";
  @SerializedName(SERIALIZED_NAME_ALERT_TEMPLATE_ID)
  @javax.annotation.Nonnull
  private String alertTemplateId;

  public static final String SERIALIZED_NAME_VALID_UNTIL = "validUntil";
  @SerializedName(SERIALIZED_NAME_VALID_UNTIL)
  @javax.annotation.Nullable
  private OffsetDateTime validUntil;

  public static final String SERIALIZED_NAME_REPORT_DATA = "reportData";
  @SerializedName(SERIALIZED_NAME_REPORT_DATA)
  @javax.annotation.Nullable
  private Map<String, Object> reportData = new HashMap<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private String status;

  public static final String SERIALIZED_NAME_LAST_CHECKED_AT = "lastCheckedAt";
  @SerializedName(SERIALIZED_NAME_LAST_CHECKED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime lastCheckedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public Incident() {
  }

  public Incident id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Incident ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Incident alertId(@javax.annotation.Nonnull String alertId) {
    this.alertId = alertId;
    return this;
  }

  /**
   * Alert ID
   * @return alertId
   */
  @javax.annotation.Nonnull
  public String getAlertId() {
    return alertId;
  }

  public void setAlertId(@javax.annotation.Nonnull String alertId) {
    this.alertId = alertId;
  }


  public Incident alertVersion(@javax.annotation.Nonnull Integer alertVersion) {
    this.alertVersion = alertVersion;
    return this;
  }

  /**
   * Alert Version
   * @return alertVersion
   */
  @javax.annotation.Nonnull
  public Integer getAlertVersion() {
    return alertVersion;
  }

  public void setAlertVersion(@javax.annotation.Nonnull Integer alertVersion) {
    this.alertVersion = alertVersion;
  }


  public Incident alertTemplateId(@javax.annotation.Nonnull String alertTemplateId) {
    this.alertTemplateId = alertTemplateId;
    return this;
  }

  /**
   * Alert Template Id
   * @return alertTemplateId
   */
  @javax.annotation.Nonnull
  public String getAlertTemplateId() {
    return alertTemplateId;
  }

  public void setAlertTemplateId(@javax.annotation.Nonnull String alertTemplateId) {
    this.alertTemplateId = alertTemplateId;
  }


  public Incident validUntil(@javax.annotation.Nullable OffsetDateTime validUntil) {
    this.validUntil = validUntil;
    return this;
  }

  /**
   * Get validUntil
   * @return validUntil
   */
  @javax.annotation.Nullable
  public OffsetDateTime getValidUntil() {
    return validUntil;
  }

  public void setValidUntil(@javax.annotation.Nullable OffsetDateTime validUntil) {
    this.validUntil = validUntil;
  }


  public Incident reportData(@javax.annotation.Nullable Map<String, Object> reportData) {
    this.reportData = reportData;
    return this;
  }

  public Incident putReportDataItem(String key, Object reportDataItem) {
    if (this.reportData == null) {
      this.reportData = new HashMap<>();
    }
    this.reportData.put(key, reportDataItem);
    return this;
  }

  /**
   * Get reportData
   * @return reportData
   */
  @javax.annotation.Nullable
  public Map<String, Object> getReportData() {
    return reportData;
  }

  public void setReportData(@javax.annotation.Nullable Map<String, Object> reportData) {
    this.reportData = reportData;
  }


  public Incident status(@javax.annotation.Nonnull String status) {
    this.status = status;
    return this;
  }

  /**
   * Incident Status
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull String status) {
    this.status = status;
  }


  public Incident lastCheckedAt(@javax.annotation.Nullable OffsetDateTime lastCheckedAt) {
    this.lastCheckedAt = lastCheckedAt;
    return this;
  }

  /**
   * Last Checked At
   * @return lastCheckedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCheckedAt() {
    return lastCheckedAt;
  }

  public void setLastCheckedAt(@javax.annotation.Nullable OffsetDateTime lastCheckedAt) {
    this.lastCheckedAt = lastCheckedAt;
  }


  public Incident createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created At
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Incident updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated At
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Incident incident = (Incident) o;
    return Objects.equals(this.id, incident.id) &&
        Objects.equals(this.alertId, incident.alertId) &&
        Objects.equals(this.alertVersion, incident.alertVersion) &&
        Objects.equals(this.alertTemplateId, incident.alertTemplateId) &&
        Objects.equals(this.validUntil, incident.validUntil) &&
        Objects.equals(this.reportData, incident.reportData) &&
        Objects.equals(this.status, incident.status) &&
        Objects.equals(this.lastCheckedAt, incident.lastCheckedAt) &&
        Objects.equals(this.createdAt, incident.createdAt) &&
        Objects.equals(this.updatedAt, incident.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, alertId, alertVersion, alertTemplateId, validUntil, reportData, status, lastCheckedAt, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Incident {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    alertId: ").append(toIndentedString(alertId)).append("\n");
    sb.append("    alertVersion: ").append(toIndentedString(alertVersion)).append("\n");
    sb.append("    alertTemplateId: ").append(toIndentedString(alertTemplateId)).append("\n");
    sb.append("    validUntil: ").append(toIndentedString(validUntil)).append("\n");
    sb.append("    reportData: ").append(toIndentedString(reportData)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    lastCheckedAt: ").append(toIndentedString(lastCheckedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("alertId");
    openapiFields.add("alertVersion");
    openapiFields.add("alertTemplateId");
    openapiFields.add("validUntil");
    openapiFields.add("reportData");
    openapiFields.add("status");
    openapiFields.add("lastCheckedAt");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("alertId");
    openapiRequiredFields.add("alertVersion");
    openapiRequiredFields.add("alertTemplateId");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Incident
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Incident.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Incident is not found in the empty JSON string", Incident.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Incident.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Incident` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Incident.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("alertId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertId").toString()));
      }
      if (!jsonObj.get("alertTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertTemplateId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Incident.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Incident' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Incident> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Incident.class));

       return (TypeAdapter<T>) new TypeAdapter<Incident>() {
           @Override
           public void write(JsonWriter out, Incident value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Incident read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Incident given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Incident
   * @throws IOException if the JSON string is invalid with respect to Incident
   */
  public static Incident fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Incident.class);
  }

  /**
   * Convert an instance of Incident to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

