/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.BaseSuccessResponse;
import java.math.BigDecimal;
import com.togai.client.models.BulkRateCardOperationsRequest;
import com.togai.client.models.BulkRateCardOperationsResponse;
import com.togai.client.models.EditAccountScheduleRequest;
import com.togai.client.models.ErrorResponse;
import com.togai.client.models.FinalizeAccountSchedules;
import com.togai.client.models.PricingRulesPaginatedResponse;
import com.togai.client.models.RateCardPaginatedResponse;
import com.togai.client.models.SchedulesPaginatedResponse;
import com.togai.client.models.UpdatePricingRulesRequest;
import com.togai.client.models.UpdatePricingScheduleResponse;
import com.togai.client.models.ValidatedEntityErrorsPaginatedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchedulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchedulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchedulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkEditSchedules
     * @param accountId account_id corresponding to an account (required)
     * @param editAccountScheduleRequest Payload to edit schedules of an account (required)
     * @param discard  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for dis/associate price plan request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkEditSchedulesCall(String accountId, EditAccountScheduleRequest editAccountScheduleRequest, Boolean discard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editAccountScheduleRequest;

        // create path and map variables
        String localVarPath = "/v2/accounts/{account_id}/edit_schedules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (discard != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("discard", discard));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkEditSchedulesValidateBeforeCall(String accountId, EditAccountScheduleRequest editAccountScheduleRequest, Boolean discard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling bulkEditSchedules(Async)");
        }

        // verify the required parameter 'editAccountScheduleRequest' is set
        if (editAccountScheduleRequest == null) {
            throw new ApiException("Missing the required parameter 'editAccountScheduleRequest' when calling bulkEditSchedules(Async)");
        }

        return bulkEditSchedulesCall(accountId, editAccountScheduleRequest, discard, _callback);

    }

    /**
     * Bulk edit schedules of an account
     * Bulk edit schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param editAccountScheduleRequest Payload to edit schedules of an account (required)
     * @param discard  (optional)
     * @return UpdatePricingScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for dis/associate price plan request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePricingScheduleResponse bulkEditSchedules(String accountId, EditAccountScheduleRequest editAccountScheduleRequest, Boolean discard) throws ApiException {
        ApiResponse<UpdatePricingScheduleResponse> localVarResp = bulkEditSchedulesWithHttpInfo(accountId, editAccountScheduleRequest, discard);
        return localVarResp.getData();
    }

    /**
     * Bulk edit schedules of an account
     * Bulk edit schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param editAccountScheduleRequest Payload to edit schedules of an account (required)
     * @param discard  (optional)
     * @return ApiResponse&lt;UpdatePricingScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for dis/associate price plan request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePricingScheduleResponse> bulkEditSchedulesWithHttpInfo(String accountId, EditAccountScheduleRequest editAccountScheduleRequest, Boolean discard) throws ApiException {
        okhttp3.Call localVarCall = bulkEditSchedulesValidateBeforeCall(accountId, editAccountScheduleRequest, discard, null);
        Type localVarReturnType = new TypeToken<UpdatePricingScheduleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk edit schedules of an account (asynchronously)
     * Bulk edit schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param editAccountScheduleRequest Payload to edit schedules of an account (required)
     * @param discard  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for dis/associate price plan request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkEditSchedulesAsync(String accountId, EditAccountScheduleRequest editAccountScheduleRequest, Boolean discard, final ApiCallback<UpdatePricingScheduleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkEditSchedulesValidateBeforeCall(accountId, editAccountScheduleRequest, discard, _callback);
        Type localVarReturnType = new TypeToken<UpdatePricingScheduleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkRateCardOperationsOnSchedule
     * @param scheduleId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRateCardOperationsOnScheduleCall(String scheduleId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkRateCardOperationsRequest;

        // create path and map variables
        String localVarPath = "/v2/schedules/{schedule_id}/rate_cards"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkRateCardOperationsOnScheduleValidateBeforeCall(String scheduleId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling bulkRateCardOperationsOnSchedule(Async)");
        }

        // verify the required parameter 'bulkRateCardOperationsRequest' is set
        if (bulkRateCardOperationsRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkRateCardOperationsRequest' when calling bulkRateCardOperationsOnSchedule(Async)");
        }

        return bulkRateCardOperationsOnScheduleCall(scheduleId, bulkRateCardOperationsRequest, _callback);

    }

    /**
     * Bulk rate card operations on a schedule
     * Bulk rate card operations on a schedule
     * @param scheduleId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @return BulkRateCardOperationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BulkRateCardOperationsResponse bulkRateCardOperationsOnSchedule(String scheduleId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest) throws ApiException {
        ApiResponse<BulkRateCardOperationsResponse> localVarResp = bulkRateCardOperationsOnScheduleWithHttpInfo(scheduleId, bulkRateCardOperationsRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk rate card operations on a schedule
     * Bulk rate card operations on a schedule
     * @param scheduleId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @return ApiResponse&lt;BulkRateCardOperationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkRateCardOperationsResponse> bulkRateCardOperationsOnScheduleWithHttpInfo(String scheduleId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkRateCardOperationsOnScheduleValidateBeforeCall(scheduleId, bulkRateCardOperationsRequest, null);
        Type localVarReturnType = new TypeToken<BulkRateCardOperationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk rate card operations on a schedule (asynchronously)
     * Bulk rate card operations on a schedule
     * @param scheduleId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRateCardOperationsOnScheduleAsync(String scheduleId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback<BulkRateCardOperationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkRateCardOperationsOnScheduleValidateBeforeCall(scheduleId, bulkRateCardOperationsRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkRateCardOperationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discardAccountSchedules
     * @param accountId account_id corresponding to an account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discardAccountSchedulesCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{account_id}/discard_schedules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discardAccountSchedulesValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling discardAccountSchedules(Async)");
        }

        return discardAccountSchedulesCall(accountId, _callback);

    }

    /**
     * Discard schedules of an account
     * Discard schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse discardAccountSchedules(String accountId) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = discardAccountSchedulesWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Discard schedules of an account
     * Discard schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> discardAccountSchedulesWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = discardAccountSchedulesValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discard schedules of an account (asynchronously)
     * Discard schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discardAccountSchedulesAsync(String accountId, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = discardAccountSchedulesValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for finalizeAccountSchedules
     * @param accountId account_id corresponding to an account (required)
     * @param finalizeAccountSchedules Payload to finalize account schedules (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeAccountSchedulesCall(String accountId, FinalizeAccountSchedules finalizeAccountSchedules, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = finalizeAccountSchedules;

        // create path and map variables
        String localVarPath = "/v2/accounts/{account_id}/finalize_schedules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizeAccountSchedulesValidateBeforeCall(String accountId, FinalizeAccountSchedules finalizeAccountSchedules, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling finalizeAccountSchedules(Async)");
        }

        // verify the required parameter 'finalizeAccountSchedules' is set
        if (finalizeAccountSchedules == null) {
            throw new ApiException("Missing the required parameter 'finalizeAccountSchedules' when calling finalizeAccountSchedules(Async)");
        }

        return finalizeAccountSchedulesCall(accountId, finalizeAccountSchedules, _callback);

    }

    /**
     * Finalize schedules of an account
     * Finalize schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param finalizeAccountSchedules Payload to finalize account schedules (required)
     * @return SchedulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesPaginatedResponse finalizeAccountSchedules(String accountId, FinalizeAccountSchedules finalizeAccountSchedules) throws ApiException {
        ApiResponse<SchedulesPaginatedResponse> localVarResp = finalizeAccountSchedulesWithHttpInfo(accountId, finalizeAccountSchedules);
        return localVarResp.getData();
    }

    /**
     * Finalize schedules of an account
     * Finalize schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param finalizeAccountSchedules Payload to finalize account schedules (required)
     * @return ApiResponse&lt;SchedulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesPaginatedResponse> finalizeAccountSchedulesWithHttpInfo(String accountId, FinalizeAccountSchedules finalizeAccountSchedules) throws ApiException {
        okhttp3.Call localVarCall = finalizeAccountSchedulesValidateBeforeCall(accountId, finalizeAccountSchedules, null);
        Type localVarReturnType = new TypeToken<SchedulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finalize schedules of an account (asynchronously)
     * Finalize schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param finalizeAccountSchedules Payload to finalize account schedules (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizeAccountSchedulesAsync(String accountId, FinalizeAccountSchedules finalizeAccountSchedules, final ApiCallback<SchedulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizeAccountSchedulesValidateBeforeCall(accountId, finalizeAccountSchedules, _callback);
        Type localVarReturnType = new TypeToken<SchedulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricingRules
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricingRulesCall(String scheduleId, String mode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schedules/{schedule_id}/pricing_rules"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricingRulesValidateBeforeCall(String scheduleId, String mode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling listPricingRules(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling listPricingRules(Async)");
        }

        return listPricingRulesCall(scheduleId, mode, _callback);

    }

    /**
     * List pricing rules of a account schedule
     * List pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @return PricingRulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricingRulesPaginatedResponse listPricingRules(String scheduleId, String mode) throws ApiException {
        ApiResponse<PricingRulesPaginatedResponse> localVarResp = listPricingRulesWithHttpInfo(scheduleId, mode);
        return localVarResp.getData();
    }

    /**
     * List pricing rules of a account schedule
     * List pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @return ApiResponse&lt;PricingRulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingRulesPaginatedResponse> listPricingRulesWithHttpInfo(String scheduleId, String mode) throws ApiException {
        okhttp3.Call localVarCall = listPricingRulesValidateBeforeCall(scheduleId, mode, null);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pricing rules of a account schedule (asynchronously)
     * List pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricingRulesAsync(String scheduleId, String mode, final ApiCallback<PricingRulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricingRulesValidateBeforeCall(scheduleId, mode, _callback);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listScheduleErrors
     * @param scheduleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleErrorsCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schedules/{schedule_id}/errors"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScheduleErrorsValidateBeforeCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling listScheduleErrors(Async)");
        }

        return listScheduleErrorsCall(scheduleId, _callback);

    }

    /**
     * Get list of errors of a acc schedule
     * Get list of errors of a acc schedule
     * @param scheduleId  (required)
     * @return ValidatedEntityErrorsPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ValidatedEntityErrorsPaginatedResponse listScheduleErrors(String scheduleId) throws ApiException {
        ApiResponse<ValidatedEntityErrorsPaginatedResponse> localVarResp = listScheduleErrorsWithHttpInfo(scheduleId);
        return localVarResp.getData();
    }

    /**
     * Get list of errors of a acc schedule
     * Get list of errors of a acc schedule
     * @param scheduleId  (required)
     * @return ApiResponse&lt;ValidatedEntityErrorsPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatedEntityErrorsPaginatedResponse> listScheduleErrorsWithHttpInfo(String scheduleId) throws ApiException {
        okhttp3.Call localVarCall = listScheduleErrorsValidateBeforeCall(scheduleId, null);
        Type localVarReturnType = new TypeToken<ValidatedEntityErrorsPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of errors of a acc schedule (asynchronously)
     * Get list of errors of a acc schedule
     * @param scheduleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleErrorsAsync(String scheduleId, final ApiCallback<ValidatedEntityErrorsPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScheduleErrorsValidateBeforeCall(scheduleId, _callback);
        Type localVarReturnType = new TypeToken<ValidatedEntityErrorsPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listScheduleRateCards
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleRateCardsCall(String scheduleId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schedules/{schedule_id}/rate_cards"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScheduleRateCardsValidateBeforeCall(String scheduleId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling listScheduleRateCards(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling listScheduleRateCards(Async)");
        }

        return listScheduleRateCardsCall(scheduleId, mode, nextToken, pageSize, _callback);

    }

    /**
     * List rate cards
     * List rate cards
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return RateCardPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RateCardPaginatedResponse listScheduleRateCards(String scheduleId, String mode, String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<RateCardPaginatedResponse> localVarResp = listScheduleRateCardsWithHttpInfo(scheduleId, mode, nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List rate cards
     * List rate cards
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;RateCardPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RateCardPaginatedResponse> listScheduleRateCardsWithHttpInfo(String scheduleId, String mode, String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = listScheduleRateCardsValidateBeforeCall(scheduleId, mode, nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<RateCardPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rate cards (asynchronously)
     * List rate cards
     * @param scheduleId  (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScheduleRateCardsAsync(String scheduleId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback<RateCardPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScheduleRateCardsValidateBeforeCall(scheduleId, mode, nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RateCardPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listaccountSchedules
     * @param accountId account_id corresponding to an account (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listaccountSchedulesCall(String accountId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/accounts/{account_id}/schedules"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listaccountSchedulesValidateBeforeCall(String accountId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listaccountSchedules(Async)");
        }

        // verify the required parameter 'mode' is set
        if (mode == null) {
            throw new ApiException("Missing the required parameter 'mode' when calling listaccountSchedules(Async)");
        }

        return listaccountSchedulesCall(accountId, mode, nextToken, pageSize, _callback);

    }

    /**
     * List pricing schedules of an account
     * List pricing schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return SchedulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public SchedulesPaginatedResponse listaccountSchedules(String accountId, String mode, String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<SchedulesPaginatedResponse> localVarResp = listaccountSchedulesWithHttpInfo(accountId, mode, nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List pricing schedules of an account
     * List pricing schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;SchedulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SchedulesPaginatedResponse> listaccountSchedulesWithHttpInfo(String accountId, String mode, String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = listaccountSchedulesValidateBeforeCall(accountId, mode, nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<SchedulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pricing schedules of an account (asynchronously)
     * List pricing schedules of an account
     * @param accountId account_id corresponding to an account (required)
     * @param mode Possible values: 1. ACTIVE - Get the active rate card 2. DRAFT - Get the draft rate card  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for pricing schedules </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listaccountSchedulesAsync(String accountId, String mode, String nextToken, BigDecimal pageSize, final ApiCallback<SchedulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listaccountSchedulesValidateBeforeCall(accountId, mode, nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<SchedulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePricingRules
     * @param scheduleId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricingRulesCall(String scheduleId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePricingRulesRequest;

        // create path and map variables
        String localVarPath = "/v2/schedules/{schedule_id}/pricing_rules"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePricingRulesValidateBeforeCall(String scheduleId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling updatePricingRules(Async)");
        }

        // verify the required parameter 'updatePricingRulesRequest' is set
        if (updatePricingRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePricingRulesRequest' when calling updatePricingRules(Async)");
        }

        return updatePricingRulesCall(scheduleId, updatePricingRulesRequest, _callback);

    }

    /**
     * Update pricing rules of a account schedule
     * Update pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @return PricingRulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
     </table>
     */
    public PricingRulesPaginatedResponse updatePricingRules(String scheduleId, UpdatePricingRulesRequest updatePricingRulesRequest) throws ApiException {
        ApiResponse<PricingRulesPaginatedResponse> localVarResp = updatePricingRulesWithHttpInfo(scheduleId, updatePricingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update pricing rules of a account schedule
     * Update pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @return ApiResponse&lt;PricingRulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingRulesPaginatedResponse> updatePricingRulesWithHttpInfo(String scheduleId, UpdatePricingRulesRequest updatePricingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePricingRulesValidateBeforeCall(scheduleId, updatePricingRulesRequest, null);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pricing rules of a account schedule (asynchronously)
     * Update pricing rules of a account schedule
     * @param scheduleId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricingRulesAsync(String scheduleId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback<PricingRulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePricingRulesValidateBeforeCall(scheduleId, updatePricingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
