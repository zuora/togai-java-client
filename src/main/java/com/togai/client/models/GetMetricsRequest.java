/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.MetricQuery;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to get metrics from togai
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class GetMetricsRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_METRIC_QUERIES = "metricQueries";
  @SerializedName(SERIALIZED_NAME_METRIC_QUERIES)
  @javax.annotation.Nonnull
  private Set<MetricQuery> metricQueries = new LinkedHashSet<>();

  public GetMetricsRequest() {
  }

  public GetMetricsRequest startTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start date time of the query (inclusive)
   * @return startTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(@javax.annotation.Nonnull OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetMetricsRequest endTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End date time of the query (exclusive)
   * @return endTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(@javax.annotation.Nonnull OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetMetricsRequest metricQueries(@javax.annotation.Nonnull Set<MetricQuery> metricQueries) {
    this.metricQueries = metricQueries;
    return this;
  }

  public GetMetricsRequest addMetricQueriesItem(MetricQuery metricQueriesItem) {
    if (this.metricQueries == null) {
      this.metricQueries = new LinkedHashSet<>();
    }
    this.metricQueries.add(metricQueriesItem);
    return this;
  }

  /**
   * Get metricQueries
   * @return metricQueries
   */
  @javax.annotation.Nonnull
  public Set<MetricQuery> getMetricQueries() {
    return metricQueries;
  }

  public void setMetricQueries(@javax.annotation.Nonnull Set<MetricQuery> metricQueries) {
    this.metricQueries = metricQueries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetMetricsRequest getMetricsRequest = (GetMetricsRequest) o;
    return Objects.equals(this.startTime, getMetricsRequest.startTime) &&
        Objects.equals(this.endTime, getMetricsRequest.endTime) &&
        Objects.equals(this.metricQueries, getMetricsRequest.metricQueries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTime, endTime, metricQueries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetMetricsRequest {\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metricQueries: ").append(toIndentedString(metricQueries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startTime");
    openapiFields.add("endTime");
    openapiFields.add("metricQueries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startTime");
    openapiRequiredFields.add("endTime");
    openapiRequiredFields.add("metricQueries");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetMetricsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetMetricsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetMetricsRequest is not found in the empty JSON string", GetMetricsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetMetricsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetMetricsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetMetricsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("metricQueries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricQueries` to be an array in the JSON string but got `%s`", jsonObj.get("metricQueries").toString()));
      }

      JsonArray jsonArraymetricQueries = jsonObj.getAsJsonArray("metricQueries");
      // validate the required field `metricQueries` (array)
      for (int i = 0; i < jsonArraymetricQueries.size(); i++) {
        MetricQuery.validateJsonElement(jsonArraymetricQueries.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetMetricsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetMetricsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetMetricsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetMetricsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetMetricsRequest>() {
           @Override
           public void write(JsonWriter out, GetMetricsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetMetricsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetMetricsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetMetricsRequest
   * @throws IOException if the JSON string is invalid with respect to GetMetricsRequest
   */
  public static GetMetricsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetMetricsRequest.class);
  }

  /**
   * Convert an instance of GetMetricsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

