/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.BillingEntitlementRateCard;
import com.togai.client.models.CreditGrantRateCard;
import com.togai.client.models.FixedFeeRateCard;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * entitlements override options for purchase of a price plan for an account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PurchasePlanOverride implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_FIXED_FEE_RATE_CARDS = "fixedFeeRateCards";
  @SerializedName(SERIALIZED_NAME_FIXED_FEE_RATE_CARDS)
  @javax.annotation.Nullable
  private List<FixedFeeRateCard> fixedFeeRateCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_BILLING_ENTITLEMENT_RATE_CARDS = "billingEntitlementRateCards";
  @SerializedName(SERIALIZED_NAME_BILLING_ENTITLEMENT_RATE_CARDS)
  @javax.annotation.Nullable
  private List<BillingEntitlementRateCard> billingEntitlementRateCards = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDIT_GRANT_RATE_CARDS = "creditGrantRateCards";
  @SerializedName(SERIALIZED_NAME_CREDIT_GRANT_RATE_CARDS)
  @javax.annotation.Nullable
  private List<CreditGrantRateCard> creditGrantRateCards = new ArrayList<>();

  public PurchasePlanOverride() {
  }

  public PurchasePlanOverride fixedFeeRateCards(@javax.annotation.Nullable List<FixedFeeRateCard> fixedFeeRateCards) {
    this.fixedFeeRateCards = fixedFeeRateCards;
    return this;
  }

  public PurchasePlanOverride addFixedFeeRateCardsItem(FixedFeeRateCard fixedFeeRateCardsItem) {
    if (this.fixedFeeRateCards == null) {
      this.fixedFeeRateCards = new ArrayList<>();
    }
    this.fixedFeeRateCards.add(fixedFeeRateCardsItem);
    return this;
  }

  /**
   * Get fixedFeeRateCards
   * @return fixedFeeRateCards
   */
  @javax.annotation.Nullable
  public List<FixedFeeRateCard> getFixedFeeRateCards() {
    return fixedFeeRateCards;
  }

  public void setFixedFeeRateCards(@javax.annotation.Nullable List<FixedFeeRateCard> fixedFeeRateCards) {
    this.fixedFeeRateCards = fixedFeeRateCards;
  }


  public PurchasePlanOverride billingEntitlementRateCards(@javax.annotation.Nullable List<BillingEntitlementRateCard> billingEntitlementRateCards) {
    this.billingEntitlementRateCards = billingEntitlementRateCards;
    return this;
  }

  public PurchasePlanOverride addBillingEntitlementRateCardsItem(BillingEntitlementRateCard billingEntitlementRateCardsItem) {
    if (this.billingEntitlementRateCards == null) {
      this.billingEntitlementRateCards = new ArrayList<>();
    }
    this.billingEntitlementRateCards.add(billingEntitlementRateCardsItem);
    return this;
  }

  /**
   * Get billingEntitlementRateCards
   * @return billingEntitlementRateCards
   */
  @javax.annotation.Nullable
  public List<BillingEntitlementRateCard> getBillingEntitlementRateCards() {
    return billingEntitlementRateCards;
  }

  public void setBillingEntitlementRateCards(@javax.annotation.Nullable List<BillingEntitlementRateCard> billingEntitlementRateCards) {
    this.billingEntitlementRateCards = billingEntitlementRateCards;
  }


  public PurchasePlanOverride creditGrantRateCards(@javax.annotation.Nullable List<CreditGrantRateCard> creditGrantRateCards) {
    this.creditGrantRateCards = creditGrantRateCards;
    return this;
  }

  public PurchasePlanOverride addCreditGrantRateCardsItem(CreditGrantRateCard creditGrantRateCardsItem) {
    if (this.creditGrantRateCards == null) {
      this.creditGrantRateCards = new ArrayList<>();
    }
    this.creditGrantRateCards.add(creditGrantRateCardsItem);
    return this;
  }

  /**
   * Get creditGrantRateCards
   * @return creditGrantRateCards
   */
  @javax.annotation.Nullable
  public List<CreditGrantRateCard> getCreditGrantRateCards() {
    return creditGrantRateCards;
  }

  public void setCreditGrantRateCards(@javax.annotation.Nullable List<CreditGrantRateCard> creditGrantRateCards) {
    this.creditGrantRateCards = creditGrantRateCards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchasePlanOverride purchasePlanOverride = (PurchasePlanOverride) o;
    return Objects.equals(this.fixedFeeRateCards, purchasePlanOverride.fixedFeeRateCards) &&
        Objects.equals(this.billingEntitlementRateCards, purchasePlanOverride.billingEntitlementRateCards) &&
        Objects.equals(this.creditGrantRateCards, purchasePlanOverride.creditGrantRateCards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedFeeRateCards, billingEntitlementRateCards, creditGrantRateCards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchasePlanOverride {\n");
    sb.append("    fixedFeeRateCards: ").append(toIndentedString(fixedFeeRateCards)).append("\n");
    sb.append("    billingEntitlementRateCards: ").append(toIndentedString(billingEntitlementRateCards)).append("\n");
    sb.append("    creditGrantRateCards: ").append(toIndentedString(creditGrantRateCards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixedFeeRateCards");
    openapiFields.add("billingEntitlementRateCards");
    openapiFields.add("creditGrantRateCards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchasePlanOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchasePlanOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchasePlanOverride is not found in the empty JSON string", PurchasePlanOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchasePlanOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchasePlanOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fixedFeeRateCards") != null && !jsonObj.get("fixedFeeRateCards").isJsonNull()) {
        JsonArray jsonArrayfixedFeeRateCards = jsonObj.getAsJsonArray("fixedFeeRateCards");
        if (jsonArrayfixedFeeRateCards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fixedFeeRateCards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fixedFeeRateCards` to be an array in the JSON string but got `%s`", jsonObj.get("fixedFeeRateCards").toString()));
          }

          // validate the optional field `fixedFeeRateCards` (array)
          for (int i = 0; i < jsonArrayfixedFeeRateCards.size(); i++) {
            FixedFeeRateCard.validateJsonElement(jsonArrayfixedFeeRateCards.get(i));
          };
        }
      }
      if (jsonObj.get("billingEntitlementRateCards") != null && !jsonObj.get("billingEntitlementRateCards").isJsonNull()) {
        JsonArray jsonArraybillingEntitlementRateCards = jsonObj.getAsJsonArray("billingEntitlementRateCards");
        if (jsonArraybillingEntitlementRateCards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("billingEntitlementRateCards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `billingEntitlementRateCards` to be an array in the JSON string but got `%s`", jsonObj.get("billingEntitlementRateCards").toString()));
          }

          // validate the optional field `billingEntitlementRateCards` (array)
          for (int i = 0; i < jsonArraybillingEntitlementRateCards.size(); i++) {
            BillingEntitlementRateCard.validateJsonElement(jsonArraybillingEntitlementRateCards.get(i));
          };
        }
      }
      if (jsonObj.get("creditGrantRateCards") != null && !jsonObj.get("creditGrantRateCards").isJsonNull()) {
        JsonArray jsonArraycreditGrantRateCards = jsonObj.getAsJsonArray("creditGrantRateCards");
        if (jsonArraycreditGrantRateCards != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creditGrantRateCards").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creditGrantRateCards` to be an array in the JSON string but got `%s`", jsonObj.get("creditGrantRateCards").toString()));
          }

          // validate the optional field `creditGrantRateCards` (array)
          for (int i = 0; i < jsonArraycreditGrantRateCards.size(); i++) {
            CreditGrantRateCard.validateJsonElement(jsonArraycreditGrantRateCards.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchasePlanOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchasePlanOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchasePlanOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchasePlanOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchasePlanOverride>() {
           @Override
           public void write(JsonWriter out, PurchasePlanOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchasePlanOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchasePlanOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchasePlanOverride
   * @throws IOException if the JSON string is invalid with respect to PurchasePlanOverride
   */
  public static PurchasePlanOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchasePlanOverride.class);
  }

  /**
   * Convert an instance of PurchasePlanOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

