/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.WalletStatus;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Wallet Balance response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class WalletBalanceResponse implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  @javax.annotation.Nonnull
  private String customerId;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  @javax.annotation.Nonnull
  private BigDecimal balance;

  public static final String SERIALIZED_NAME_CREDIT_UNIT = "creditUnit";
  @SerializedName(SERIALIZED_NAME_CREDIT_UNIT)
  @javax.annotation.Nonnull
  private String creditUnit;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private WalletStatus status;

  public static final String SERIALIZED_NAME_HOLD_AMOUNT = "holdAmount";
  @SerializedName(SERIALIZED_NAME_HOLD_AMOUNT)
  @javax.annotation.Nullable
  private BigDecimal holdAmount;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  @javax.annotation.Nonnull
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  @javax.annotation.Nullable
  private Map<String, Object> metadata = new HashMap<>();

  public WalletBalanceResponse() {
  }

  public WalletBalanceResponse id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public WalletBalanceResponse accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public WalletBalanceResponse customerId(@javax.annotation.Nonnull String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Get customerId
   * @return customerId
   */
  @javax.annotation.Nonnull
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(@javax.annotation.Nonnull String customerId) {
    this.customerId = customerId;
  }


  public WalletBalanceResponse balance(@javax.annotation.Nonnull BigDecimal balance) {
    this.balance = balance;
    return this;
  }

  /**
   * This amount is the difference of total credited amount and sum of consumed, hold amount. ie. credit amount - (consumed amount + hold amount) 
   * @return balance
   */
  @javax.annotation.Nonnull
  public BigDecimal getBalance() {
    return balance;
  }

  public void setBalance(@javax.annotation.Nonnull BigDecimal balance) {
    this.balance = balance;
  }


  public WalletBalanceResponse creditUnit(@javax.annotation.Nonnull String creditUnit) {
    this.creditUnit = creditUnit;
    return this;
  }

  /**
   * Get creditUnit
   * @return creditUnit
   */
  @javax.annotation.Nonnull
  public String getCreditUnit() {
    return creditUnit;
  }

  public void setCreditUnit(@javax.annotation.Nonnull String creditUnit) {
    this.creditUnit = creditUnit;
  }


  public WalletBalanceResponse externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Get externalId
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public WalletBalanceResponse status(@javax.annotation.Nonnull WalletStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public WalletStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull WalletStatus status) {
    this.status = status;
  }


  public WalletBalanceResponse holdAmount(@javax.annotation.Nullable BigDecimal holdAmount) {
    this.holdAmount = holdAmount;
    return this;
  }

  /**
   * Get holdAmount
   * @return holdAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getHoldAmount() {
    return holdAmount;
  }

  public void setHoldAmount(@javax.annotation.Nullable BigDecimal holdAmount) {
    this.holdAmount = holdAmount;
  }


  public WalletBalanceResponse effectiveFrom(@javax.annotation.Nonnull OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
    return this;
  }

  /**
   * Get effectiveFrom
   * @return effectiveFrom
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }

  public void setEffectiveFrom(@javax.annotation.Nonnull OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public WalletBalanceResponse createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WalletBalanceResponse updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WalletBalanceResponse metadata(@javax.annotation.Nullable Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public WalletBalanceResponse putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(@javax.annotation.Nullable Map<String, Object> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WalletBalanceResponse walletBalanceResponse = (WalletBalanceResponse) o;
    return Objects.equals(this.id, walletBalanceResponse.id) &&
        Objects.equals(this.accountId, walletBalanceResponse.accountId) &&
        Objects.equals(this.customerId, walletBalanceResponse.customerId) &&
        Objects.equals(this.balance, walletBalanceResponse.balance) &&
        Objects.equals(this.creditUnit, walletBalanceResponse.creditUnit) &&
        Objects.equals(this.externalId, walletBalanceResponse.externalId) &&
        Objects.equals(this.status, walletBalanceResponse.status) &&
        Objects.equals(this.holdAmount, walletBalanceResponse.holdAmount) &&
        Objects.equals(this.effectiveFrom, walletBalanceResponse.effectiveFrom) &&
        Objects.equals(this.createdAt, walletBalanceResponse.createdAt) &&
        Objects.equals(this.updatedAt, walletBalanceResponse.updatedAt) &&
        Objects.equals(this.metadata, walletBalanceResponse.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountId, customerId, balance, creditUnit, externalId, status, holdAmount, effectiveFrom, createdAt, updatedAt, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WalletBalanceResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    creditUnit: ").append(toIndentedString(creditUnit)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    holdAmount: ").append(toIndentedString(holdAmount)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("accountId");
    openapiFields.add("customerId");
    openapiFields.add("balance");
    openapiFields.add("creditUnit");
    openapiFields.add("externalId");
    openapiFields.add("status");
    openapiFields.add("holdAmount");
    openapiFields.add("effectiveFrom");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("customerId");
    openapiRequiredFields.add("balance");
    openapiRequiredFields.add("creditUnit");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("effectiveFrom");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WalletBalanceResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WalletBalanceResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WalletBalanceResponse is not found in the empty JSON string", WalletBalanceResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WalletBalanceResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WalletBalanceResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WalletBalanceResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("customerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerId").toString()));
      }
      if (!jsonObj.get("creditUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditUnit").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      // validate the required field `status`
      WalletStatus.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WalletBalanceResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WalletBalanceResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WalletBalanceResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WalletBalanceResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<WalletBalanceResponse>() {
           @Override
           public void write(JsonWriter out, WalletBalanceResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WalletBalanceResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WalletBalanceResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WalletBalanceResponse
   * @throws IOException if the JSON string is invalid with respect to WalletBalanceResponse
   */
  public static WalletBalanceResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WalletBalanceResponse.class);
  }

  /**
   * Convert an instance of WalletBalanceResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

