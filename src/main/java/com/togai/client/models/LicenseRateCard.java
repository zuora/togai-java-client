/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.AddOnType;
import com.togai.client.models.InvoiceTiming;
import com.togai.client.models.LicenseRateCardConfig;
import com.togai.client.models.ProratedRefundMode;
import com.togai.client.models.RatePlan;
import com.togai.client.models.RateValue;
import com.togai.client.models.UsageCycleInterval;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * LicenseRateCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class LicenseRateCard implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private AddOnType type;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  @javax.annotation.Nullable
  private String tag;

  public static final String SERIALIZED_NAME_INVOICE_TIMING = "invoiceTiming";
  @SerializedName(SERIALIZED_NAME_INVOICE_TIMING)
  @javax.annotation.Nullable
  private InvoiceTiming invoiceTiming;

  public static final String SERIALIZED_NAME_USAGE_CYCLE = "usageCycle";
  @SerializedName(SERIALIZED_NAME_USAGE_CYCLE)
  @javax.annotation.Nullable
  private UsageCycleInterval usageCycle;

  public static final String SERIALIZED_NAME_ENABLE_PRORATION = "enableProration";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRORATION)
  @javax.annotation.Nonnull
  private Boolean enableProration;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nullable
  private LicenseRateCardConfig config;

  public static final String SERIALIZED_NAME_RATE_PLAN = "ratePlan";
  @SerializedName(SERIALIZED_NAME_RATE_PLAN)
  @javax.annotation.Nonnull
  private RatePlan ratePlan;

  public static final String SERIALIZED_NAME_RATE_VALUES = "rateValues";
  @SerializedName(SERIALIZED_NAME_RATE_VALUES)
  @javax.annotation.Nonnull
  private List<RateValue> rateValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRORATED_REFUND_MODE = "proratedRefundMode";
  @SerializedName(SERIALIZED_NAME_PRORATED_REFUND_MODE)
  @javax.annotation.Nullable
  private ProratedRefundMode proratedRefundMode;

  public LicenseRateCard() {
  }

  public LicenseRateCard id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique Identifier of the attached AddOn
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public LicenseRateCard type(@javax.annotation.Nullable AddOnType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AddOnType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable AddOnType type) {
    this.type = type;
  }


  public LicenseRateCard displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Name of the attached AddOn
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public LicenseRateCard name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Unique identifier for the rate card in a price plan. If left null it is auto-generated.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public LicenseRateCard tag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * A tag string to group licenseRateCards
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(@javax.annotation.Nullable String tag) {
    this.tag = tag;
  }


  public LicenseRateCard invoiceTiming(@javax.annotation.Nullable InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
    return this;
  }

  /**
   * Get invoiceTiming
   * @return invoiceTiming
   */
  @javax.annotation.Nullable
  public InvoiceTiming getInvoiceTiming() {
    return invoiceTiming;
  }

  public void setInvoiceTiming(@javax.annotation.Nullable InvoiceTiming invoiceTiming) {
    this.invoiceTiming = invoiceTiming;
  }


  public LicenseRateCard usageCycle(@javax.annotation.Nullable UsageCycleInterval usageCycle) {
    this.usageCycle = usageCycle;
    return this;
  }

  /**
   * Get usageCycle
   * @return usageCycle
   */
  @javax.annotation.Nullable
  public UsageCycleInterval getUsageCycle() {
    return usageCycle;
  }

  public void setUsageCycle(@javax.annotation.Nullable UsageCycleInterval usageCycle) {
    this.usageCycle = usageCycle;
  }


  public LicenseRateCard enableProration(@javax.annotation.Nonnull Boolean enableProration) {
    this.enableProration = enableProration;
    return this;
  }

  /**
   * Get enableProration
   * @return enableProration
   */
  @javax.annotation.Nonnull
  public Boolean getEnableProration() {
    return enableProration;
  }

  public void setEnableProration(@javax.annotation.Nonnull Boolean enableProration) {
    this.enableProration = enableProration;
  }


  public LicenseRateCard config(@javax.annotation.Nullable LicenseRateCardConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public LicenseRateCardConfig getConfig() {
    return config;
  }

  public void setConfig(@javax.annotation.Nullable LicenseRateCardConfig config) {
    this.config = config;
  }


  public LicenseRateCard ratePlan(@javax.annotation.Nonnull RatePlan ratePlan) {
    this.ratePlan = ratePlan;
    return this;
  }

  /**
   * Get ratePlan
   * @return ratePlan
   */
  @javax.annotation.Nonnull
  public RatePlan getRatePlan() {
    return ratePlan;
  }

  public void setRatePlan(@javax.annotation.Nonnull RatePlan ratePlan) {
    this.ratePlan = ratePlan;
  }


  public LicenseRateCard rateValues(@javax.annotation.Nonnull List<RateValue> rateValues) {
    this.rateValues = rateValues;
    return this;
  }

  public LicenseRateCard addRateValuesItem(RateValue rateValuesItem) {
    if (this.rateValues == null) {
      this.rateValues = new ArrayList<>();
    }
    this.rateValues.add(rateValuesItem);
    return this;
  }

  /**
   * Get rateValues
   * @return rateValues
   */
  @javax.annotation.Nonnull
  public List<RateValue> getRateValues() {
    return rateValues;
  }

  public void setRateValues(@javax.annotation.Nonnull List<RateValue> rateValues) {
    this.rateValues = rateValues;
  }


  public LicenseRateCard proratedRefundMode(@javax.annotation.Nullable ProratedRefundMode proratedRefundMode) {
    this.proratedRefundMode = proratedRefundMode;
    return this;
  }

  /**
   * Get proratedRefundMode
   * @return proratedRefundMode
   */
  @javax.annotation.Nullable
  public ProratedRefundMode getProratedRefundMode() {
    return proratedRefundMode;
  }

  public void setProratedRefundMode(@javax.annotation.Nullable ProratedRefundMode proratedRefundMode) {
    this.proratedRefundMode = proratedRefundMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseRateCard licenseRateCard = (LicenseRateCard) o;
    return Objects.equals(this.id, licenseRateCard.id) &&
        Objects.equals(this.type, licenseRateCard.type) &&
        Objects.equals(this.displayName, licenseRateCard.displayName) &&
        Objects.equals(this.name, licenseRateCard.name) &&
        Objects.equals(this.tag, licenseRateCard.tag) &&
        Objects.equals(this.invoiceTiming, licenseRateCard.invoiceTiming) &&
        Objects.equals(this.usageCycle, licenseRateCard.usageCycle) &&
        Objects.equals(this.enableProration, licenseRateCard.enableProration) &&
        Objects.equals(this.config, licenseRateCard.config) &&
        Objects.equals(this.ratePlan, licenseRateCard.ratePlan) &&
        Objects.equals(this.rateValues, licenseRateCard.rateValues) &&
        Objects.equals(this.proratedRefundMode, licenseRateCard.proratedRefundMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, displayName, name, tag, invoiceTiming, usageCycle, enableProration, config, ratePlan, rateValues, proratedRefundMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseRateCard {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    invoiceTiming: ").append(toIndentedString(invoiceTiming)).append("\n");
    sb.append("    usageCycle: ").append(toIndentedString(usageCycle)).append("\n");
    sb.append("    enableProration: ").append(toIndentedString(enableProration)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    ratePlan: ").append(toIndentedString(ratePlan)).append("\n");
    sb.append("    rateValues: ").append(toIndentedString(rateValues)).append("\n");
    sb.append("    proratedRefundMode: ").append(toIndentedString(proratedRefundMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("tag");
    openapiFields.add("invoiceTiming");
    openapiFields.add("usageCycle");
    openapiFields.add("enableProration");
    openapiFields.add("config");
    openapiFields.add("ratePlan");
    openapiFields.add("rateValues");
    openapiFields.add("proratedRefundMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("enableProration");
    openapiRequiredFields.add("ratePlan");
    openapiRequiredFields.add("rateValues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseRateCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseRateCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseRateCard is not found in the empty JSON string", LicenseRateCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseRateCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseRateCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseRateCard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        AddOnType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      // validate the optional field `invoiceTiming`
      if (jsonObj.get("invoiceTiming") != null && !jsonObj.get("invoiceTiming").isJsonNull()) {
        InvoiceTiming.validateJsonElement(jsonObj.get("invoiceTiming"));
      }
      // validate the optional field `usageCycle`
      if (jsonObj.get("usageCycle") != null && !jsonObj.get("usageCycle").isJsonNull()) {
        UsageCycleInterval.validateJsonElement(jsonObj.get("usageCycle"));
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        LicenseRateCardConfig.validateJsonElement(jsonObj.get("config"));
      }
      // validate the required field `ratePlan`
      RatePlan.validateJsonElement(jsonObj.get("ratePlan"));
      // ensure the json data is an array
      if (!jsonObj.get("rateValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rateValues` to be an array in the JSON string but got `%s`", jsonObj.get("rateValues").toString()));
      }

      JsonArray jsonArrayrateValues = jsonObj.getAsJsonArray("rateValues");
      // validate the required field `rateValues` (array)
      for (int i = 0; i < jsonArrayrateValues.size(); i++) {
        RateValue.validateJsonElement(jsonArrayrateValues.get(i));
      };
      // validate the optional field `proratedRefundMode`
      if (jsonObj.get("proratedRefundMode") != null && !jsonObj.get("proratedRefundMode").isJsonNull()) {
        ProratedRefundMode.validateJsonElement(jsonObj.get("proratedRefundMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseRateCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseRateCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseRateCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseRateCard.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseRateCard>() {
           @Override
           public void write(JsonWriter out, LicenseRateCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseRateCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseRateCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseRateCard
   * @throws IOException if the JSON string is invalid with respect to LicenseRateCard
   */
  public static LicenseRateCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseRateCard.class);
  }

  /**
   * Convert an instance of LicenseRateCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

