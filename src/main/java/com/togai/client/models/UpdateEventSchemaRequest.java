/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.DimensionsSchema;
import com.togai.client.models.Enrichments;
import com.togai.client.models.EventAttributeSchema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to update event schema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateEventSchemaRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  @javax.annotation.Nullable
  private List<EventAttributeSchema> attributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  @javax.annotation.Nullable
  private List<DimensionsSchema> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENRICHMENTS = "enrichments";
  @SerializedName(SERIALIZED_NAME_ENRICHMENTS)
  @javax.annotation.Nullable
  private Enrichments enrichments;

  public static final String SERIALIZED_NAME_FILTER_FIELDS = "filterFields";
  @SerializedName(SERIALIZED_NAME_FILTER_FIELDS)
  @javax.annotation.Nullable
  private Set<String> filterFields = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_EVENT_ID_TEMPLATE = "eventIdTemplate";
  @SerializedName(SERIALIZED_NAME_EVENT_ID_TEMPLATE)
  @javax.annotation.Nullable
  private String eventIdTemplate;

  public UpdateEventSchemaRequest() {
  }

  public UpdateEventSchemaRequest description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the event
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdateEventSchemaRequest attributes(@javax.annotation.Nullable List<EventAttributeSchema> attributes) {
    this.attributes = attributes;
    return this;
  }

  public UpdateEventSchemaRequest addAttributesItem(EventAttributeSchema attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public List<EventAttributeSchema> getAttributes() {
    return attributes;
  }

  public void setAttributes(@javax.annotation.Nullable List<EventAttributeSchema> attributes) {
    this.attributes = attributes;
  }


  public UpdateEventSchemaRequest dimensions(@javax.annotation.Nullable List<DimensionsSchema> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public UpdateEventSchemaRequest addDimensionsItem(DimensionsSchema dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<DimensionsSchema> getDimensions() {
    return dimensions;
  }

  public void setDimensions(@javax.annotation.Nullable List<DimensionsSchema> dimensions) {
    this.dimensions = dimensions;
  }


  public UpdateEventSchemaRequest enrichments(@javax.annotation.Nullable Enrichments enrichments) {
    this.enrichments = enrichments;
    return this;
  }

  /**
   * Get enrichments
   * @return enrichments
   */
  @javax.annotation.Nullable
  public Enrichments getEnrichments() {
    return enrichments;
  }

  public void setEnrichments(@javax.annotation.Nullable Enrichments enrichments) {
    this.enrichments = enrichments;
  }


  public UpdateEventSchemaRequest filterFields(@javax.annotation.Nullable Set<String> filterFields) {
    this.filterFields = filterFields;
    return this;
  }

  public UpdateEventSchemaRequest addFilterFieldsItem(String filterFieldsItem) {
    if (this.filterFields == null) {
      this.filterFields = new LinkedHashSet<>();
    }
    this.filterFields.add(filterFieldsItem);
    return this;
  }

  /**
   * List of fields that can be used for filtering in usage meter
   * @return filterFields
   */
  @javax.annotation.Nullable
  public Set<String> getFilterFields() {
    return filterFields;
  }

  public void setFilterFields(@javax.annotation.Nullable Set<String> filterFields) {
    this.filterFields = filterFields;
  }


  public UpdateEventSchemaRequest eventIdTemplate(@javax.annotation.Nullable String eventIdTemplate) {
    this.eventIdTemplate = eventIdTemplate;
    return this;
  }

  /**
   * Template used to generate event id based on event payload
   * @return eventIdTemplate
   */
  @javax.annotation.Nullable
  public String getEventIdTemplate() {
    return eventIdTemplate;
  }

  public void setEventIdTemplate(@javax.annotation.Nullable String eventIdTemplate) {
    this.eventIdTemplate = eventIdTemplate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateEventSchemaRequest updateEventSchemaRequest = (UpdateEventSchemaRequest) o;
    return Objects.equals(this.description, updateEventSchemaRequest.description) &&
        Objects.equals(this.attributes, updateEventSchemaRequest.attributes) &&
        Objects.equals(this.dimensions, updateEventSchemaRequest.dimensions) &&
        Objects.equals(this.enrichments, updateEventSchemaRequest.enrichments) &&
        Objects.equals(this.filterFields, updateEventSchemaRequest.filterFields) &&
        Objects.equals(this.eventIdTemplate, updateEventSchemaRequest.eventIdTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, attributes, dimensions, enrichments, filterFields, eventIdTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateEventSchemaRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    enrichments: ").append(toIndentedString(enrichments)).append("\n");
    sb.append("    filterFields: ").append(toIndentedString(filterFields)).append("\n");
    sb.append("    eventIdTemplate: ").append(toIndentedString(eventIdTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("attributes");
    openapiFields.add("dimensions");
    openapiFields.add("enrichments");
    openapiFields.add("filterFields");
    openapiFields.add("eventIdTemplate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateEventSchemaRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateEventSchemaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateEventSchemaRequest is not found in the empty JSON string", UpdateEventSchemaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateEventSchemaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateEventSchemaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        JsonArray jsonArrayattributes = jsonObj.getAsJsonArray("attributes");
        if (jsonArrayattributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
          }

          // validate the optional field `attributes` (array)
          for (int i = 0; i < jsonArrayattributes.size(); i++) {
            EventAttributeSchema.validateJsonElement(jsonArrayattributes.get(i));
          };
        }
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            DimensionsSchema.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      // validate the optional field `enrichments`
      if (jsonObj.get("enrichments") != null && !jsonObj.get("enrichments").isJsonNull()) {
        Enrichments.validateJsonElement(jsonObj.get("enrichments"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filterFields") != null && !jsonObj.get("filterFields").isJsonNull() && !jsonObj.get("filterFields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterFields` to be an array in the JSON string but got `%s`", jsonObj.get("filterFields").toString()));
      }
      if ((jsonObj.get("eventIdTemplate") != null && !jsonObj.get("eventIdTemplate").isJsonNull()) && !jsonObj.get("eventIdTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventIdTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventIdTemplate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateEventSchemaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateEventSchemaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateEventSchemaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateEventSchemaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateEventSchemaRequest>() {
           @Override
           public void write(JsonWriter out, UpdateEventSchemaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateEventSchemaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateEventSchemaRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateEventSchemaRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateEventSchemaRequest
   */
  public static UpdateEventSchemaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateEventSchemaRequest.class);
  }

  /**
   * Convert an instance of UpdateEventSchemaRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

