/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.AssociationConfig;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to dis/associate one or more schedules to an account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdateAccountScheduleV2Request implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Mode of request to create dis/association
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    ASSOCIATE("ASSOCIATE"),
    
    DISASSOCIATE("DISASSOCIATE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nullable
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  @javax.annotation.Nonnull
  private LocalDate effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  @javax.annotation.Nonnull
  private LocalDate effectiveUntil;

  public static final String SERIALIZED_NAME_ASSOCIATION_CONFIG = "associationConfig";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_CONFIG)
  @javax.annotation.Nullable
  private AssociationConfig associationConfig;

  public static final String SERIALIZED_NAME_MERGE_SCHEDULES = "mergeSchedules";
  @SerializedName(SERIALIZED_NAME_MERGE_SCHEDULES)
  @javax.annotation.Nullable
  private Boolean mergeSchedules;

  public UpdateAccountScheduleV2Request() {
  }

  public UpdateAccountScheduleV2Request mode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Mode of request to create dis/association
   * @return mode
   */
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nullable ModeEnum mode) {
    this.mode = mode;
  }


  public UpdateAccountScheduleV2Request effectiveFrom(@javax.annotation.Nonnull LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
    return this;
  }

  /**
   * Date of effectiveness of the association. The date is expected in YYYY-MM-DD format - Editing of a BILLING plan with deferredRevenue can be achieved with    effectiveFrom as start date of current cycle or using &#x60;retainStartOffset&#x60; option. 
   * @return effectiveFrom
   */
  @javax.annotation.Nonnull
  public LocalDate getEffectiveFrom() {
    return effectiveFrom;
  }

  public void setEffectiveFrom(@javax.annotation.Nonnull LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public UpdateAccountScheduleV2Request effectiveUntil(@javax.annotation.Nonnull LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
    return this;
  }

  /**
   * Date until which the association must be effective. The date is expected in YYYY-MM-DD format 
   * @return effectiveUntil
   */
  @javax.annotation.Nonnull
  public LocalDate getEffectiveUntil() {
    return effectiveUntil;
  }

  public void setEffectiveUntil(@javax.annotation.Nonnull LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }


  public UpdateAccountScheduleV2Request associationConfig(@javax.annotation.Nullable AssociationConfig associationConfig) {
    this.associationConfig = associationConfig;
    return this;
  }

  /**
   * Get associationConfig
   * @return associationConfig
   */
  @javax.annotation.Nullable
  public AssociationConfig getAssociationConfig() {
    return associationConfig;
  }

  public void setAssociationConfig(@javax.annotation.Nullable AssociationConfig associationConfig) {
    this.associationConfig = associationConfig;
  }


  public UpdateAccountScheduleV2Request mergeSchedules(@javax.annotation.Nullable Boolean mergeSchedules) {
    this.mergeSchedules = mergeSchedules;
    return this;
  }

  /**
   * If this flag is true, the schedules will be merged with the existing schedules of the account if possible. If this flag is false, the existing schedules will be replaced with the new schedules. Default value is false 
   * @return mergeSchedules
   */
  @javax.annotation.Nullable
  public Boolean getMergeSchedules() {
    return mergeSchedules;
  }

  public void setMergeSchedules(@javax.annotation.Nullable Boolean mergeSchedules) {
    this.mergeSchedules = mergeSchedules;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountScheduleV2Request updateAccountScheduleV2Request = (UpdateAccountScheduleV2Request) o;
    return Objects.equals(this.mode, updateAccountScheduleV2Request.mode) &&
        Objects.equals(this.effectiveFrom, updateAccountScheduleV2Request.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, updateAccountScheduleV2Request.effectiveUntil) &&
        Objects.equals(this.associationConfig, updateAccountScheduleV2Request.associationConfig) &&
        Objects.equals(this.mergeSchedules, updateAccountScheduleV2Request.mergeSchedules);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mode, effectiveFrom, effectiveUntil, associationConfig, mergeSchedules);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountScheduleV2Request {\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("    associationConfig: ").append(toIndentedString(associationConfig)).append("\n");
    sb.append("    mergeSchedules: ").append(toIndentedString(mergeSchedules)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mode");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");
    openapiFields.add("associationConfig");
    openapiFields.add("mergeSchedules");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("effectiveUntil");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAccountScheduleV2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountScheduleV2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountScheduleV2Request is not found in the empty JSON string", UpdateAccountScheduleV2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountScheduleV2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountScheduleV2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAccountScheduleV2Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the optional field `mode`
      if (jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) {
        ModeEnum.validateJsonElement(jsonObj.get("mode"));
      }
      // validate the optional field `associationConfig`
      if (jsonObj.get("associationConfig") != null && !jsonObj.get("associationConfig").isJsonNull()) {
        AssociationConfig.validateJsonElement(jsonObj.get("associationConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountScheduleV2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountScheduleV2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountScheduleV2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountScheduleV2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountScheduleV2Request>() {
           @Override
           public void write(JsonWriter out, UpdateAccountScheduleV2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountScheduleV2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAccountScheduleV2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAccountScheduleV2Request
   * @throws IOException if the JSON string is invalid with respect to UpdateAccountScheduleV2Request
   */
  public static UpdateAccountScheduleV2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountScheduleV2Request.class);
  }

  /**
   * Convert an instance of UpdateAccountScheduleV2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

