/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.CreatePricePlanDetailsOverride;
import java.io.IOException;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to update a price plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UpdatePricePlanRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRICE_PLAN_DETAILS = "pricePlanDetails";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_DETAILS)
  private CreatePricePlanDetailsOverride pricePlanDetails;

  /**
   * Gets or Sets migrationMode
   */
  @JsonAdapter(MigrationModeEnum.Adapter.class)
  public enum MigrationModeEnum {
    IMMEDIATE("IMMEDIATE"),
    
    IMMEDIATE_IGNORE_OVERRIDE("IMMEDIATE_IGNORE_OVERRIDE"),
    
    NEXT_CYCLE("NEXT_CYCLE"),
    
    NEXT_CYCLE_IGNORE_OVERRIDE("NEXT_CYCLE_IGNORE_OVERRIDE"),
    
    NONE("NONE");

    private String value;

    MigrationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MigrationModeEnum fromValue(String value) {
      for (MigrationModeEnum b : MigrationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MigrationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MigrationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MigrationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MigrationModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIGRATION_MODE = "migrationMode";
  @SerializedName(SERIALIZED_NAME_MIGRATION_MODE)
  private MigrationModeEnum migrationMode;

  /**
   * Gets or Sets versionsToMigrate
   */
  @JsonAdapter(VersionsToMigrateEnum.Adapter.class)
  public enum VersionsToMigrateEnum {
    LATEST_VERSION("LATEST_VERSION"),
    
    ALL_VERSION("ALL_VERSION");

    private String value;

    VersionsToMigrateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionsToMigrateEnum fromValue(String value) {
      for (VersionsToMigrateEnum b : VersionsToMigrateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionsToMigrateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionsToMigrateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionsToMigrateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionsToMigrateEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERSIONS_TO_MIGRATE = "versionsToMigrate";
  @SerializedName(SERIALIZED_NAME_VERSIONS_TO_MIGRATE)
  private VersionsToMigrateEnum versionsToMigrate;

  public UpdatePricePlanRequest() {
  }

  public UpdatePricePlanRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of price plan
   * @return description
  **/
  @javax.annotation.Nullable

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public UpdatePricePlanRequest pricePlanDetails(CreatePricePlanDetailsOverride pricePlanDetails) {
    
    this.pricePlanDetails = pricePlanDetails;
    return this;
  }

   /**
   * Get pricePlanDetails
   * @return pricePlanDetails
  **/
  @javax.annotation.Nullable

  public CreatePricePlanDetailsOverride getPricePlanDetails() {
    return pricePlanDetails;
  }


  public void setPricePlanDetails(CreatePricePlanDetailsOverride pricePlanDetails) {
    this.pricePlanDetails = pricePlanDetails;
  }


  public UpdatePricePlanRequest migrationMode(MigrationModeEnum migrationMode) {
    
    this.migrationMode = migrationMode;
    return this;
  }

   /**
   * Get migrationMode
   * @return migrationMode
  **/
  @javax.annotation.Nullable

  public MigrationModeEnum getMigrationMode() {
    return migrationMode;
  }


  public void setMigrationMode(MigrationModeEnum migrationMode) {
    this.migrationMode = migrationMode;
  }


  public UpdatePricePlanRequest versionsToMigrate(VersionsToMigrateEnum versionsToMigrate) {
    
    this.versionsToMigrate = versionsToMigrate;
    return this;
  }

   /**
   * Get versionsToMigrate
   * @return versionsToMigrate
  **/
  @javax.annotation.Nullable

  public VersionsToMigrateEnum getVersionsToMigrate() {
    return versionsToMigrate;
  }


  public void setVersionsToMigrate(VersionsToMigrateEnum versionsToMigrate) {
    this.versionsToMigrate = versionsToMigrate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePricePlanRequest updatePricePlanRequest = (UpdatePricePlanRequest) o;
    return Objects.equals(this.description, updatePricePlanRequest.description) &&
        Objects.equals(this.pricePlanDetails, updatePricePlanRequest.pricePlanDetails) &&
        Objects.equals(this.migrationMode, updatePricePlanRequest.migrationMode) &&
        Objects.equals(this.versionsToMigrate, updatePricePlanRequest.versionsToMigrate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, pricePlanDetails, migrationMode, versionsToMigrate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePricePlanRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    pricePlanDetails: ").append(toIndentedString(pricePlanDetails)).append("\n");
    sb.append("    migrationMode: ").append(toIndentedString(migrationMode)).append("\n");
    sb.append("    versionsToMigrate: ").append(toIndentedString(versionsToMigrate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("pricePlanDetails");
    openapiFields.add("migrationMode");
    openapiFields.add("versionsToMigrate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdatePricePlanRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdatePricePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePricePlanRequest is not found in the empty JSON string", UpdatePricePlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdatePricePlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePricePlanRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `pricePlanDetails`
      if (jsonObj.get("pricePlanDetails") != null && !jsonObj.get("pricePlanDetails").isJsonNull()) {
        CreatePricePlanDetailsOverride.validateJsonObject(jsonObj.getAsJsonObject("pricePlanDetails"));
      }
      if ((jsonObj.get("migrationMode") != null && !jsonObj.get("migrationMode").isJsonNull()) && !jsonObj.get("migrationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `migrationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("migrationMode").toString()));
      }
      if ((jsonObj.get("versionsToMigrate") != null && !jsonObj.get("versionsToMigrate").isJsonNull()) && !jsonObj.get("versionsToMigrate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionsToMigrate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionsToMigrate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePricePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePricePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePricePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePricePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePricePlanRequest>() {
           @Override
           public void write(JsonWriter out, UpdatePricePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePricePlanRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdatePricePlanRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdatePricePlanRequest
  * @throws IOException if the JSON string is invalid with respect to UpdatePricePlanRequest
  */
  public static UpdatePricePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePricePlanRequest.class);
  }

 /**
  * Convert an instance of UpdatePricePlanRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

