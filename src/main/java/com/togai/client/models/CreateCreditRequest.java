/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Payload to grant Credits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CreateCreditRequest implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_APPLICABLE_ENTITY_IDS = "applicableEntityIds";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_ENTITY_IDS)
  private Set<String> applicableEntityIds = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private LocalDate effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  private LocalDate effectiveUntil;

  public static final String SERIALIZED_NAME_CREDIT_AMOUNT = "creditAmount";
  @SerializedName(SERIALIZED_NAME_CREDIT_AMOUNT)
  private BigDecimal creditAmount;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public CreateCreditRequest() {
  }

  public CreateCreditRequest accountId(String accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Get accountId
   * @return accountId
  **/
  @javax.annotation.Nonnull

  public String getAccountId() {
    return accountId;
  }


  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }


  public CreateCreditRequest purpose(String purpose) {
    
    this.purpose = purpose;
    return this;
  }

   /**
   * Get purpose
   * @return purpose
  **/
  @javax.annotation.Nonnull

  public String getPurpose() {
    return purpose;
  }


  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public CreateCreditRequest applicableEntityIds(Set<String> applicableEntityIds) {
    
    this.applicableEntityIds = applicableEntityIds;
    return this;
  }

  public CreateCreditRequest addApplicableEntityIdsItem(String applicableEntityIdsItem) {
    if (this.applicableEntityIds == null) {
      this.applicableEntityIds = new LinkedHashSet<>();
    }
    this.applicableEntityIds.add(applicableEntityIdsItem);
    return this;
  }

   /**
   * List of entity ids for which the credit is applicable. If null or empty, the credit is applicable to all ids. This list can accept special values like: - ALL_USAGE_METER_RATE_CARDS: To apply the credit to all usage meter rate cards - ALL_FIXED_FEE_RATE_CARDS: To apply the credit to all fixed fee rate cards 
   * @return applicableEntityIds
  **/
  @javax.annotation.Nullable

  public Set<String> getApplicableEntityIds() {
    return applicableEntityIds;
  }


  public void setApplicableEntityIds(Set<String> applicableEntityIds) {
    this.applicableEntityIds = applicableEntityIds;
  }


  public CreateCreditRequest effectiveFrom(LocalDate effectiveFrom) {
    
    this.effectiveFrom = effectiveFrom;
    return this;
  }

   /**
   * Get effectiveFrom
   * @return effectiveFrom
  **/
  @javax.annotation.Nonnull

  public LocalDate getEffectiveFrom() {
    return effectiveFrom;
  }


  public void setEffectiveFrom(LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public CreateCreditRequest effectiveUntil(LocalDate effectiveUntil) {
    
    this.effectiveUntil = effectiveUntil;
    return this;
  }

   /**
   * Get effectiveUntil
   * @return effectiveUntil
  **/
  @javax.annotation.Nullable

  public LocalDate getEffectiveUntil() {
    return effectiveUntil;
  }


  public void setEffectiveUntil(LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }


  public CreateCreditRequest creditAmount(BigDecimal creditAmount) {
    
    this.creditAmount = creditAmount;
    return this;
  }

   /**
   * Get creditAmount
   * @return creditAmount
  **/
  @javax.annotation.Nonnull

  public BigDecimal getCreditAmount() {
    return creditAmount;
  }


  public void setCreditAmount(BigDecimal creditAmount) {
    this.creditAmount = creditAmount;
  }


  public CreateCreditRequest priority(Integer priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nonnull

  public Integer getPriority() {
    return priority;
  }


  public void setPriority(Integer priority) {
    this.priority = priority;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCreditRequest createCreditRequest = (CreateCreditRequest) o;
    return Objects.equals(this.accountId, createCreditRequest.accountId) &&
        Objects.equals(this.purpose, createCreditRequest.purpose) &&
        Objects.equals(this.applicableEntityIds, createCreditRequest.applicableEntityIds) &&
        Objects.equals(this.effectiveFrom, createCreditRequest.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, createCreditRequest.effectiveUntil) &&
        Objects.equals(this.creditAmount, createCreditRequest.creditAmount) &&
        Objects.equals(this.priority, createCreditRequest.priority);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, purpose, applicableEntityIds, effectiveFrom, effectiveUntil, creditAmount, priority);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCreditRequest {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    applicableEntityIds: ").append(toIndentedString(applicableEntityIds)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("    creditAmount: ").append(toIndentedString(creditAmount)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("purpose");
    openapiFields.add("applicableEntityIds");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");
    openapiFields.add("creditAmount");
    openapiFields.add("priority");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("purpose");
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("creditAmount");
    openapiRequiredFields.add("priority");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateCreditRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateCreditRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateCreditRequest is not found in the empty JSON string", CreateCreditRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateCreditRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateCreditRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateCreditRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if (!jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableEntityIds") != null && !jsonObj.get("applicableEntityIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableEntityIds` to be an array in the JSON string but got `%s`", jsonObj.get("applicableEntityIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateCreditRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateCreditRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateCreditRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateCreditRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateCreditRequest>() {
           @Override
           public void write(JsonWriter out, CreateCreditRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateCreditRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateCreditRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateCreditRequest
  * @throws IOException if the JSON string is invalid with respect to CreateCreditRequest
  */
  public static CreateCreditRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateCreditRequest.class);
  }

 /**
  * Convert an instance of CreateCreditRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

