/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricingCycleConfig;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to update a price plan
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UpdatePricePlanV2Request implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_PRICING_CYCLE_CONFIG = "pricingCycleConfig";
  @SerializedName(SERIALIZED_NAME_PRICING_CYCLE_CONFIG)
  @javax.annotation.Nullable
  private PricingCycleConfig pricingCycleConfig;

  public static final String SERIALIZED_NAME_SUPPORTED_CURRENCIES = "supportedCurrencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CURRENCIES)
  @javax.annotation.Nullable
  private Set<String> supportedCurrencies = new LinkedHashSet<>();

  public UpdatePricePlanV2Request() {
  }

  public UpdatePricePlanV2Request description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of price plan
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public UpdatePricePlanV2Request pricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
    return this;
  }

  /**
   * Get pricingCycleConfig
   * @return pricingCycleConfig
   */
  @javax.annotation.Nullable
  public PricingCycleConfig getPricingCycleConfig() {
    return pricingCycleConfig;
  }

  public void setPricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
  }


  public UpdatePricePlanV2Request supportedCurrencies(@javax.annotation.Nullable Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
    return this;
  }

  public UpdatePricePlanV2Request addSupportedCurrenciesItem(String supportedCurrenciesItem) {
    if (this.supportedCurrencies == null) {
      this.supportedCurrencies = new LinkedHashSet<>();
    }
    this.supportedCurrencies.add(supportedCurrenciesItem);
    return this;
  }

  /**
   * List of currencies supported by the price plan
   * @return supportedCurrencies
   */
  @javax.annotation.Nullable
  public Set<String> getSupportedCurrencies() {
    return supportedCurrencies;
  }

  public void setSupportedCurrencies(@javax.annotation.Nullable Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePricePlanV2Request updatePricePlanV2Request = (UpdatePricePlanV2Request) o;
    return Objects.equals(this.description, updatePricePlanV2Request.description) &&
        Objects.equals(this.pricingCycleConfig, updatePricePlanV2Request.pricingCycleConfig) &&
        Objects.equals(this.supportedCurrencies, updatePricePlanV2Request.supportedCurrencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, pricingCycleConfig, supportedCurrencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePricePlanV2Request {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    pricingCycleConfig: ").append(toIndentedString(pricingCycleConfig)).append("\n");
    sb.append("    supportedCurrencies: ").append(toIndentedString(supportedCurrencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("pricingCycleConfig");
    openapiFields.add("supportedCurrencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePricePlanV2Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePricePlanV2Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePricePlanV2Request is not found in the empty JSON string", UpdatePricePlanV2Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePricePlanV2Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePricePlanV2Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `pricingCycleConfig`
      if (jsonObj.get("pricingCycleConfig") != null && !jsonObj.get("pricingCycleConfig").isJsonNull()) {
        PricingCycleConfig.validateJsonElement(jsonObj.get("pricingCycleConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedCurrencies") != null && !jsonObj.get("supportedCurrencies").isJsonNull() && !jsonObj.get("supportedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("supportedCurrencies").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePricePlanV2Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePricePlanV2Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePricePlanV2Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePricePlanV2Request.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePricePlanV2Request>() {
           @Override
           public void write(JsonWriter out, UpdatePricePlanV2Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePricePlanV2Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePricePlanV2Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePricePlanV2Request
   * @throws IOException if the JSON string is invalid with respect to UpdatePricePlanV2Request
   */
  public static UpdatePricePlanV2Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePricePlanV2Request.class);
  }

  /**
   * Convert an instance of UpdatePricePlanV2Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

