/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.CreatePricePlanDetailsOverride;
import com.togai.client.models.PricePlanDetailsOverride;
import com.togai.client.models.PurchaseStatus;
import com.togai.client.models.PurchaseType;
import com.togai.client.models.WalletTopupDetails;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Represents a Purchase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class Purchase implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  @javax.annotation.Nonnull
  private String accountId;

  public static final String SERIALIZED_NAME_PRICE_PLAN_ID = "pricePlanId";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_ID)
  @javax.annotation.Nullable
  private String pricePlanId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  @javax.annotation.Nullable
  private Integer quantity;

  public static final String SERIALIZED_NAME_RATE_CARD_QUANTITIES = "rateCardQuantities";
  @SerializedName(SERIALIZED_NAME_RATE_CARD_QUANTITIES)
  @javax.annotation.Nullable
  private Map<String, BigDecimal> rateCardQuantities = new HashMap<>();

  public static final String SERIALIZED_NAME_IDEMPOTENCY_KEY = "idempotencyKey";
  @SerializedName(SERIALIZED_NAME_IDEMPOTENCY_KEY)
  @javax.annotation.Nullable
  private String idempotencyKey;

  public static final String SERIALIZED_NAME_PRICE_PLAN_VERSION = "pricePlanVersion";
  @SerializedName(SERIALIZED_NAME_PRICE_PLAN_VERSION)
  @javax.annotation.Nullable
  private Integer pricePlanVersion;

  public static final String SERIALIZED_NAME_PURCHASE_PLAN_OVERRIDE = "purchasePlanOverride";
  @SerializedName(SERIALIZED_NAME_PURCHASE_PLAN_OVERRIDE)
  @javax.annotation.Nullable
  private PricePlanDetailsOverride purchasePlanOverride;

  public static final String SERIALIZED_NAME_ASSOCIATION_OVERRIDE = "associationOverride";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_OVERRIDE)
  @javax.annotation.Nullable
  private CreatePricePlanDetailsOverride associationOverride;

  public static final String SERIALIZED_NAME_WALLET_TOPUP_DETAILS = "walletTopupDetails";
  @SerializedName(SERIALIZED_NAME_WALLET_TOPUP_DETAILS)
  @javax.annotation.Nullable
  private WalletTopupDetails walletTopupDetails;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  @javax.annotation.Nullable
  private LocalDate effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  @javax.annotation.Nullable
  private LocalDate effectiveUntil;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  @javax.annotation.Nullable
  private OffsetDateTime expiryDate;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  @javax.annotation.Nullable
  private BigDecimal price;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  @javax.annotation.Nullable
  private String invoiceId;

  public static final String SERIALIZED_NAME_INVOICE_CURRENCY = "invoiceCurrency";
  @SerializedName(SERIALIZED_NAME_INVOICE_CURRENCY)
  @javax.annotation.Nullable
  private String invoiceCurrency;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private PurchaseStatus status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private PurchaseType type;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public Purchase() {
  }

  public Purchase id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Purchase accountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nonnull
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(@javax.annotation.Nonnull String accountId) {
    this.accountId = accountId;
  }


  public Purchase pricePlanId(@javax.annotation.Nullable String pricePlanId) {
    this.pricePlanId = pricePlanId;
    return this;
  }

  /**
   * Id of the price plan, Required for ENTITLEMENT_GRANT, ASSOCIATION purchase
   * @return pricePlanId
   */
  @javax.annotation.Nullable
  public String getPricePlanId() {
    return pricePlanId;
  }

  public void setPricePlanId(@javax.annotation.Nullable String pricePlanId) {
    this.pricePlanId = pricePlanId;
  }


  public Purchase quantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Get quantity
   * @return quantity
   */
  @javax.annotation.Nullable
  public Integer getQuantity() {
    return quantity;
  }

  public void setQuantity(@javax.annotation.Nullable Integer quantity) {
    this.quantity = quantity;
  }


  public Purchase rateCardQuantities(@javax.annotation.Nullable Map<String, BigDecimal> rateCardQuantities) {
    this.rateCardQuantities = rateCardQuantities;
    return this;
  }

  public Purchase putRateCardQuantitiesItem(String key, BigDecimal rateCardQuantitiesItem) {
    if (this.rateCardQuantities == null) {
      this.rateCardQuantities = new HashMap<>();
    }
    this.rateCardQuantities.put(key, rateCardQuantitiesItem);
    return this;
  }

  /**
   * Get rateCardQuantities
   * @return rateCardQuantities
   */
  @javax.annotation.Nullable
  public Map<String, BigDecimal> getRateCardQuantities() {
    return rateCardQuantities;
  }

  public void setRateCardQuantities(@javax.annotation.Nullable Map<String, BigDecimal> rateCardQuantities) {
    this.rateCardQuantities = rateCardQuantities;
  }


  public Purchase idempotencyKey(@javax.annotation.Nullable String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
    return this;
  }

  /**
   * Get idempotencyKey
   * @return idempotencyKey
   */
  @javax.annotation.Nullable
  public String getIdempotencyKey() {
    return idempotencyKey;
  }

  public void setIdempotencyKey(@javax.annotation.Nullable String idempotencyKey) {
    this.idempotencyKey = idempotencyKey;
  }


  public Purchase pricePlanVersion(@javax.annotation.Nullable Integer pricePlanVersion) {
    this.pricePlanVersion = pricePlanVersion;
    return this;
  }

  /**
   * Get pricePlanVersion
   * @return pricePlanVersion
   */
  @javax.annotation.Nullable
  public Integer getPricePlanVersion() {
    return pricePlanVersion;
  }

  public void setPricePlanVersion(@javax.annotation.Nullable Integer pricePlanVersion) {
    this.pricePlanVersion = pricePlanVersion;
  }


  public Purchase purchasePlanOverride(@javax.annotation.Nullable PricePlanDetailsOverride purchasePlanOverride) {
    this.purchasePlanOverride = purchasePlanOverride;
    return this;
  }

  /**
   * Get purchasePlanOverride
   * @return purchasePlanOverride
   */
  @javax.annotation.Nullable
  public PricePlanDetailsOverride getPurchasePlanOverride() {
    return purchasePlanOverride;
  }

  public void setPurchasePlanOverride(@javax.annotation.Nullable PricePlanDetailsOverride purchasePlanOverride) {
    this.purchasePlanOverride = purchasePlanOverride;
  }


  public Purchase associationOverride(@javax.annotation.Nullable CreatePricePlanDetailsOverride associationOverride) {
    this.associationOverride = associationOverride;
    return this;
  }

  /**
   * Get associationOverride
   * @return associationOverride
   */
  @javax.annotation.Nullable
  public CreatePricePlanDetailsOverride getAssociationOverride() {
    return associationOverride;
  }

  public void setAssociationOverride(@javax.annotation.Nullable CreatePricePlanDetailsOverride associationOverride) {
    this.associationOverride = associationOverride;
  }


  public Purchase walletTopupDetails(@javax.annotation.Nullable WalletTopupDetails walletTopupDetails) {
    this.walletTopupDetails = walletTopupDetails;
    return this;
  }

  /**
   * Get walletTopupDetails
   * @return walletTopupDetails
   */
  @javax.annotation.Nullable
  public WalletTopupDetails getWalletTopupDetails() {
    return walletTopupDetails;
  }

  public void setWalletTopupDetails(@javax.annotation.Nullable WalletTopupDetails walletTopupDetails) {
    this.walletTopupDetails = walletTopupDetails;
  }


  public Purchase createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Purchase updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Purchase effectiveFrom(@javax.annotation.Nullable LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
    return this;
  }

  /**
   * Get effectiveFrom
   * @return effectiveFrom
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveFrom() {
    return effectiveFrom;
  }

  public void setEffectiveFrom(@javax.annotation.Nullable LocalDate effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public Purchase effectiveUntil(@javax.annotation.Nullable LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
    return this;
  }

  /**
   * Get effectiveUntil
   * @return effectiveUntil
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveUntil() {
    return effectiveUntil;
  }

  public void setEffectiveUntil(@javax.annotation.Nullable LocalDate effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }


  public Purchase expiryDate(@javax.annotation.Nullable OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Get expiryDate
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(@javax.annotation.Nullable OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }


  public Purchase price(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(@javax.annotation.Nullable BigDecimal price) {
    this.price = price;
  }


  public Purchase invoiceId(@javax.annotation.Nullable String invoiceId) {
    this.invoiceId = invoiceId;
    return this;
  }

  /**
   * Get invoiceId
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }

  public void setInvoiceId(@javax.annotation.Nullable String invoiceId) {
    this.invoiceId = invoiceId;
  }


  public Purchase invoiceCurrency(@javax.annotation.Nullable String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
    return this;
  }

  /**
   * Get invoiceCurrency
   * @return invoiceCurrency
   */
  @javax.annotation.Nullable
  public String getInvoiceCurrency() {
    return invoiceCurrency;
  }

  public void setInvoiceCurrency(@javax.annotation.Nullable String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
  }


  public Purchase status(@javax.annotation.Nonnull PurchaseStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public PurchaseStatus getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull PurchaseStatus status) {
    this.status = status;
  }


  public Purchase type(@javax.annotation.Nonnull PurchaseType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public PurchaseType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull PurchaseType type) {
    this.type = type;
  }


  public Purchase comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Purchase purchase = (Purchase) o;
    return Objects.equals(this.id, purchase.id) &&
        Objects.equals(this.accountId, purchase.accountId) &&
        Objects.equals(this.pricePlanId, purchase.pricePlanId) &&
        Objects.equals(this.quantity, purchase.quantity) &&
        Objects.equals(this.rateCardQuantities, purchase.rateCardQuantities) &&
        Objects.equals(this.idempotencyKey, purchase.idempotencyKey) &&
        Objects.equals(this.pricePlanVersion, purchase.pricePlanVersion) &&
        Objects.equals(this.purchasePlanOverride, purchase.purchasePlanOverride) &&
        Objects.equals(this.associationOverride, purchase.associationOverride) &&
        Objects.equals(this.walletTopupDetails, purchase.walletTopupDetails) &&
        Objects.equals(this.createdAt, purchase.createdAt) &&
        Objects.equals(this.updatedAt, purchase.updatedAt) &&
        Objects.equals(this.effectiveFrom, purchase.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, purchase.effectiveUntil) &&
        Objects.equals(this.expiryDate, purchase.expiryDate) &&
        Objects.equals(this.price, purchase.price) &&
        Objects.equals(this.invoiceId, purchase.invoiceId) &&
        Objects.equals(this.invoiceCurrency, purchase.invoiceCurrency) &&
        Objects.equals(this.status, purchase.status) &&
        Objects.equals(this.type, purchase.type) &&
        Objects.equals(this.comment, purchase.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, accountId, pricePlanId, quantity, rateCardQuantities, idempotencyKey, pricePlanVersion, purchasePlanOverride, associationOverride, walletTopupDetails, createdAt, updatedAt, effectiveFrom, effectiveUntil, expiryDate, price, invoiceId, invoiceCurrency, status, type, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Purchase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    pricePlanId: ").append(toIndentedString(pricePlanId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    rateCardQuantities: ").append(toIndentedString(rateCardQuantities)).append("\n");
    sb.append("    idempotencyKey: ").append(toIndentedString(idempotencyKey)).append("\n");
    sb.append("    pricePlanVersion: ").append(toIndentedString(pricePlanVersion)).append("\n");
    sb.append("    purchasePlanOverride: ").append(toIndentedString(purchasePlanOverride)).append("\n");
    sb.append("    associationOverride: ").append(toIndentedString(associationOverride)).append("\n");
    sb.append("    walletTopupDetails: ").append(toIndentedString(walletTopupDetails)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    invoiceCurrency: ").append(toIndentedString(invoiceCurrency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("accountId");
    openapiFields.add("pricePlanId");
    openapiFields.add("quantity");
    openapiFields.add("rateCardQuantities");
    openapiFields.add("idempotencyKey");
    openapiFields.add("pricePlanVersion");
    openapiFields.add("purchasePlanOverride");
    openapiFields.add("associationOverride");
    openapiFields.add("walletTopupDetails");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");
    openapiFields.add("expiryDate");
    openapiFields.add("price");
    openapiFields.add("invoiceId");
    openapiFields.add("invoiceCurrency");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("accountId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Purchase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Purchase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Purchase is not found in the empty JSON string", Purchase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Purchase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Purchase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Purchase.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("pricePlanId") != null && !jsonObj.get("pricePlanId").isJsonNull()) && !jsonObj.get("pricePlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pricePlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pricePlanId").toString()));
      }
      if ((jsonObj.get("idempotencyKey") != null && !jsonObj.get("idempotencyKey").isJsonNull()) && !jsonObj.get("idempotencyKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idempotencyKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idempotencyKey").toString()));
      }
      // validate the optional field `purchasePlanOverride`
      if (jsonObj.get("purchasePlanOverride") != null && !jsonObj.get("purchasePlanOverride").isJsonNull()) {
        PricePlanDetailsOverride.validateJsonElement(jsonObj.get("purchasePlanOverride"));
      }
      // validate the optional field `associationOverride`
      if (jsonObj.get("associationOverride") != null && !jsonObj.get("associationOverride").isJsonNull()) {
        CreatePricePlanDetailsOverride.validateJsonElement(jsonObj.get("associationOverride"));
      }
      // validate the optional field `walletTopupDetails`
      if (jsonObj.get("walletTopupDetails") != null && !jsonObj.get("walletTopupDetails").isJsonNull()) {
        WalletTopupDetails.validateJsonElement(jsonObj.get("walletTopupDetails"));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      if ((jsonObj.get("invoiceCurrency") != null && !jsonObj.get("invoiceCurrency").isJsonNull()) && !jsonObj.get("invoiceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceCurrency").toString()));
      }
      // validate the required field `status`
      PurchaseStatus.validateJsonElement(jsonObj.get("status"));
      // validate the required field `type`
      PurchaseType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Purchase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Purchase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Purchase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Purchase.class));

       return (TypeAdapter<T>) new TypeAdapter<Purchase>() {
           @Override
           public void write(JsonWriter out, Purchase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Purchase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Purchase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Purchase
   * @throws IOException if the JSON string is invalid with respect to Purchase
   */
  public static Purchase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Purchase.class);
  }

  /**
   * Convert an instance of Purchase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

