/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.Address;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * InvoiceGroups
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class InvoiceGroups implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nonnull
  private String email;

  public static final String SERIALIZED_NAME_DAILY_INVOICE_CONSOLIDATION = "dailyInvoiceConsolidation";
  @SerializedName(SERIALIZED_NAME_DAILY_INVOICE_CONSOLIDATION)
  @javax.annotation.Nonnull
  private Boolean dailyInvoiceConsolidation;

  public static final String SERIALIZED_NAME_NET_TERM_DAYS = "netTermDays";
  @SerializedName(SERIALIZED_NAME_NET_TERM_DAYS)
  @javax.annotation.Nullable
  private Integer netTermDays;

  public static final String SERIALIZED_NAME_INVOICE_CURRENCY = "invoiceCurrency";
  @SerializedName(SERIALIZED_NAME_INVOICE_CURRENCY)
  @javax.annotation.Nonnull
  private String invoiceCurrency;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  @javax.annotation.Nonnull
  private Address billingAddress;

  public static final String SERIALIZED_NAME_ACCOUNTS_COUNT = "accountsCount";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_COUNT)
  @javax.annotation.Nonnull
  private Integer accountsCount;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public InvoiceGroups() {
  }

  public InvoiceGroups id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public InvoiceGroups name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public InvoiceGroups email(@javax.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }


  public InvoiceGroups dailyInvoiceConsolidation(@javax.annotation.Nonnull Boolean dailyInvoiceConsolidation) {
    this.dailyInvoiceConsolidation = dailyInvoiceConsolidation;
    return this;
  }

  /**
   * Get dailyInvoiceConsolidation
   * @return dailyInvoiceConsolidation
   */
  @javax.annotation.Nonnull
  public Boolean getDailyInvoiceConsolidation() {
    return dailyInvoiceConsolidation;
  }

  public void setDailyInvoiceConsolidation(@javax.annotation.Nonnull Boolean dailyInvoiceConsolidation) {
    this.dailyInvoiceConsolidation = dailyInvoiceConsolidation;
  }


  public InvoiceGroups netTermDays(@javax.annotation.Nullable Integer netTermDays) {
    this.netTermDays = netTermDays;
    return this;
  }

  /**
   * Get netTermDays
   * @return netTermDays
   */
  @javax.annotation.Nullable
  public Integer getNetTermDays() {
    return netTermDays;
  }

  public void setNetTermDays(@javax.annotation.Nullable Integer netTermDays) {
    this.netTermDays = netTermDays;
  }


  public InvoiceGroups invoiceCurrency(@javax.annotation.Nonnull String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
    return this;
  }

  /**
   * Get invoiceCurrency
   * @return invoiceCurrency
   */
  @javax.annotation.Nonnull
  public String getInvoiceCurrency() {
    return invoiceCurrency;
  }

  public void setInvoiceCurrency(@javax.annotation.Nonnull String invoiceCurrency) {
    this.invoiceCurrency = invoiceCurrency;
  }


  public InvoiceGroups billingAddress(@javax.annotation.Nonnull Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * Get billingAddress
   * @return billingAddress
   */
  @javax.annotation.Nonnull
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(@javax.annotation.Nonnull Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public InvoiceGroups accountsCount(@javax.annotation.Nonnull Integer accountsCount) {
    this.accountsCount = accountsCount;
    return this;
  }

  /**
   * Get accountsCount
   * minimum: 0
   * @return accountsCount
   */
  @javax.annotation.Nonnull
  public Integer getAccountsCount() {
    return accountsCount;
  }

  public void setAccountsCount(@javax.annotation.Nonnull Integer accountsCount) {
    this.accountsCount = accountsCount;
  }


  public InvoiceGroups createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public InvoiceGroups updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceGroups invoiceGroups = (InvoiceGroups) o;
    return Objects.equals(this.id, invoiceGroups.id) &&
        Objects.equals(this.name, invoiceGroups.name) &&
        Objects.equals(this.email, invoiceGroups.email) &&
        Objects.equals(this.dailyInvoiceConsolidation, invoiceGroups.dailyInvoiceConsolidation) &&
        Objects.equals(this.netTermDays, invoiceGroups.netTermDays) &&
        Objects.equals(this.invoiceCurrency, invoiceGroups.invoiceCurrency) &&
        Objects.equals(this.billingAddress, invoiceGroups.billingAddress) &&
        Objects.equals(this.accountsCount, invoiceGroups.accountsCount) &&
        Objects.equals(this.createdAt, invoiceGroups.createdAt) &&
        Objects.equals(this.updatedAt, invoiceGroups.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, email, dailyInvoiceConsolidation, netTermDays, invoiceCurrency, billingAddress, accountsCount, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceGroups {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    dailyInvoiceConsolidation: ").append(toIndentedString(dailyInvoiceConsolidation)).append("\n");
    sb.append("    netTermDays: ").append(toIndentedString(netTermDays)).append("\n");
    sb.append("    invoiceCurrency: ").append(toIndentedString(invoiceCurrency)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    accountsCount: ").append(toIndentedString(accountsCount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("dailyInvoiceConsolidation");
    openapiFields.add("netTermDays");
    openapiFields.add("invoiceCurrency");
    openapiFields.add("billingAddress");
    openapiFields.add("accountsCount");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("dailyInvoiceConsolidation");
    openapiRequiredFields.add("invoiceCurrency");
    openapiRequiredFields.add("billingAddress");
    openapiRequiredFields.add("accountsCount");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceGroups
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceGroups.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceGroups is not found in the empty JSON string", InvoiceGroups.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceGroups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceGroups` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InvoiceGroups.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("invoiceCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceCurrency").toString()));
      }
      // validate the required field `billingAddress`
      Address.validateJsonElement(jsonObj.get("billingAddress"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceGroups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceGroups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceGroups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceGroups.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceGroups>() {
           @Override
           public void write(JsonWriter out, InvoiceGroups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceGroups read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceGroups given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceGroups
   * @throws IOException if the JSON string is invalid with respect to InvoiceGroups
   */
  public static InvoiceGroups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceGroups.class);
  }

  /**
   * Convert an instance of InvoiceGroups to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

