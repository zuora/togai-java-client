/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PreAction;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * Request to finalize account schedules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class FinalizeAccountSchedules implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_MERGE_SCHEDULES = "mergeSchedules";
  @SerializedName(SERIALIZED_NAME_MERGE_SCHEDULES)
  @javax.annotation.Nullable
  private Boolean mergeSchedules;

  public static final String SERIALIZED_NAME_PRE_ACTIONS = "preActions";
  @SerializedName(SERIALIZED_NAME_PRE_ACTIONS)
  @javax.annotation.Nullable
  private List<PreAction> preActions = new ArrayList<>();

  public FinalizeAccountSchedules() {
  }

  public FinalizeAccountSchedules mergeSchedules(@javax.annotation.Nullable Boolean mergeSchedules) {
    this.mergeSchedules = mergeSchedules;
    return this;
  }

  /**
   * If this flag is true, the schedules will be merged with the existing schedules of the account if possible. If this flag is false, the existing schedules will be replaced with the new schedules. Default value is false 
   * @return mergeSchedules
   */
  @javax.annotation.Nullable
  public Boolean getMergeSchedules() {
    return mergeSchedules;
  }

  public void setMergeSchedules(@javax.annotation.Nullable Boolean mergeSchedules) {
    this.mergeSchedules = mergeSchedules;
  }


  public FinalizeAccountSchedules preActions(@javax.annotation.Nullable List<PreAction> preActions) {
    this.preActions = preActions;
    return this;
  }

  public FinalizeAccountSchedules addPreActionsItem(PreAction preActionsItem) {
    if (this.preActions == null) {
      this.preActions = new ArrayList<>();
    }
    this.preActions.add(preActionsItem);
    return this;
  }

  /**
   * Pre actions to be performed before association or disassociation
   * @return preActions
   */
  @javax.annotation.Nullable
  public List<PreAction> getPreActions() {
    return preActions;
  }

  public void setPreActions(@javax.annotation.Nullable List<PreAction> preActions) {
    this.preActions = preActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FinalizeAccountSchedules finalizeAccountSchedules = (FinalizeAccountSchedules) o;
    return Objects.equals(this.mergeSchedules, finalizeAccountSchedules.mergeSchedules) &&
        Objects.equals(this.preActions, finalizeAccountSchedules.preActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mergeSchedules, preActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FinalizeAccountSchedules {\n");
    sb.append("    mergeSchedules: ").append(toIndentedString(mergeSchedules)).append("\n");
    sb.append("    preActions: ").append(toIndentedString(preActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mergeSchedules");
    openapiFields.add("preActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FinalizeAccountSchedules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FinalizeAccountSchedules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FinalizeAccountSchedules is not found in the empty JSON string", FinalizeAccountSchedules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FinalizeAccountSchedules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FinalizeAccountSchedules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("preActions") != null && !jsonObj.get("preActions").isJsonNull()) {
        JsonArray jsonArraypreActions = jsonObj.getAsJsonArray("preActions");
        if (jsonArraypreActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("preActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `preActions` to be an array in the JSON string but got `%s`", jsonObj.get("preActions").toString()));
          }

          // validate the optional field `preActions` (array)
          for (int i = 0; i < jsonArraypreActions.size(); i++) {
            PreAction.validateJsonElement(jsonArraypreActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FinalizeAccountSchedules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FinalizeAccountSchedules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FinalizeAccountSchedules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FinalizeAccountSchedules.class));

       return (TypeAdapter<T>) new TypeAdapter<FinalizeAccountSchedules>() {
           @Override
           public void write(JsonWriter out, FinalizeAccountSchedules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FinalizeAccountSchedules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FinalizeAccountSchedules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FinalizeAccountSchedules
   * @throws IOException if the JSON string is invalid with respect to FinalizeAccountSchedules
   */
  public static FinalizeAccountSchedules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FinalizeAccountSchedules.class);
  }

  /**
   * Convert an instance of FinalizeAccountSchedules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

