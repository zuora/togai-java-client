/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.api;

import com.togai.client.ApiCallback;
import com.togai.client.ApiClient;
import com.togai.client.ApiException;
import com.togai.client.ApiResponse;
import com.togai.client.Configuration;
import com.togai.client.Pair;
import com.togai.client.ProgressRequestBody;
import com.togai.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.togai.client.models.BaseSuccessResponse;
import java.math.BigDecimal;
import com.togai.client.models.BulkRateCardOperationsRequest;
import com.togai.client.models.BulkRateCardOperationsResponse;
import com.togai.client.models.CreatePricePlanMigrationRequest;
import com.togai.client.models.CreatePricePlanV2Request;
import com.togai.client.models.ErrorResponse;
import com.togai.client.models.FinalizePricePlanRequest;
import com.togai.client.models.PricePlanV2;
import com.togai.client.models.PricePlanV2PaginatedResponse;
import com.togai.client.models.PricingRulesPaginatedResponse;
import com.togai.client.models.RateCardPaginatedResponse;
import com.togai.client.models.UpdatePricePlanV2Request;
import com.togai.client.models.UpdatePricingRulesRequest;
import com.togai.client.models.ValidatedEntityErrorsPaginatedResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricePlanV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricePlanV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public PricePlanV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bulkPricePlanRateCardOperations
     * @param pricePlanId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkPricePlanRateCardOperationsCall(String pricePlanId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkRateCardOperationsRequest;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/rate_cards"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkPricePlanRateCardOperationsValidateBeforeCall(String pricePlanId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling bulkPricePlanRateCardOperations(Async)");
        }

        // verify the required parameter 'bulkRateCardOperationsRequest' is set
        if (bulkRateCardOperationsRequest == null) {
            throw new ApiException("Missing the required parameter 'bulkRateCardOperationsRequest' when calling bulkPricePlanRateCardOperations(Async)");
        }

        return bulkPricePlanRateCardOperationsCall(pricePlanId, bulkRateCardOperationsRequest, _callback);

    }

    /**
     * Bulk rate card operations of a price plan
     * Bulk rate card operations of a price plan
     * @param pricePlanId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @return BulkRateCardOperationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BulkRateCardOperationsResponse bulkPricePlanRateCardOperations(String pricePlanId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest) throws ApiException {
        ApiResponse<BulkRateCardOperationsResponse> localVarResp = bulkPricePlanRateCardOperationsWithHttpInfo(pricePlanId, bulkRateCardOperationsRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk rate card operations of a price plan
     * Bulk rate card operations of a price plan
     * @param pricePlanId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @return ApiResponse&lt;BulkRateCardOperationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkRateCardOperationsResponse> bulkPricePlanRateCardOperationsWithHttpInfo(String pricePlanId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest) throws ApiException {
        okhttp3.Call localVarCall = bulkPricePlanRateCardOperationsValidateBeforeCall(pricePlanId, bulkRateCardOperationsRequest, null);
        Type localVarReturnType = new TypeToken<BulkRateCardOperationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk rate card operations of a price plan (asynchronously)
     * Bulk rate card operations of a price plan
     * @param pricePlanId  (required)
     * @param bulkRateCardOperationsRequest Payload to bulk rate card operations (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for bulk rate card operations of a price plan </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkPricePlanRateCardOperationsAsync(String pricePlanId, BulkRateCardOperationsRequest bulkRateCardOperationsRequest, final ApiCallback<BulkRateCardOperationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkPricePlanRateCardOperationsValidateBeforeCall(pricePlanId, bulkRateCardOperationsRequest, _callback);
        Type localVarReturnType = new TypeToken<BulkRateCardOperationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPricePlanV2
     * @param createPricePlanV2Request Payload to create price plan (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPricePlanV2Call(CreatePricePlanV2Request createPricePlanV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPricePlanV2Request;

        // create path and map variables
        String localVarPath = "/v2/price_plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPricePlanV2ValidateBeforeCall(CreatePricePlanV2Request createPricePlanV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPricePlanV2Request' is set
        if (createPricePlanV2Request == null) {
            throw new ApiException("Missing the required parameter 'createPricePlanV2Request' when calling createPricePlanV2(Async)");
        }

        return createPricePlanV2Call(createPricePlanV2Request, _callback);

    }

    /**
     * Create a price plan
     * Create a price plan
     * @param createPricePlanV2Request Payload to create price plan (required)
     * @return PricePlanV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricePlanV2 createPricePlanV2(CreatePricePlanV2Request createPricePlanV2Request) throws ApiException {
        ApiResponse<PricePlanV2> localVarResp = createPricePlanV2WithHttpInfo(createPricePlanV2Request);
        return localVarResp.getData();
    }

    /**
     * Create a price plan
     * Create a price plan
     * @param createPricePlanV2Request Payload to create price plan (required)
     * @return ApiResponse&lt;PricePlanV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePlanV2> createPricePlanV2WithHttpInfo(CreatePricePlanV2Request createPricePlanV2Request) throws ApiException {
        okhttp3.Call localVarCall = createPricePlanV2ValidateBeforeCall(createPricePlanV2Request, null);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a price plan (asynchronously)
     * Create a price plan
     * @param createPricePlanV2Request Payload to create price plan (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPricePlanV2Async(CreatePricePlanV2Request createPricePlanV2Request, final ApiCallback<PricePlanV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPricePlanV2ValidateBeforeCall(createPricePlanV2Request, _callback);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for discardPricePlan
     * @param pricePlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discardPricePlanCall(String pricePlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/discard"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call discardPricePlanValidateBeforeCall(String pricePlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling discardPricePlan(Async)");
        }

        return discardPricePlanCall(pricePlanId, _callback);

    }

    /**
     * Discard a price plan
     * Discard a price plan
     * @param pricePlanId  (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse discardPricePlan(String pricePlanId) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = discardPricePlanWithHttpInfo(pricePlanId);
        return localVarResp.getData();
    }

    /**
     * Discard a price plan
     * Discard a price plan
     * @param pricePlanId  (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> discardPricePlanWithHttpInfo(String pricePlanId) throws ApiException {
        okhttp3.Call localVarCall = discardPricePlanValidateBeforeCall(pricePlanId, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Discard a price plan (asynchronously)
     * Discard a price plan
     * @param pricePlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call discardPricePlanAsync(String pricePlanId, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = discardPricePlanValidateBeforeCall(pricePlanId, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for finalizePricePlan
     * @param pricePlanId  (required)
     * @param finalizePricePlanRequest Payload to finalize price plan (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizePricePlanCall(String pricePlanId, FinalizePricePlanRequest finalizePricePlanRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = finalizePricePlanRequest;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/finalize"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call finalizePricePlanValidateBeforeCall(String pricePlanId, FinalizePricePlanRequest finalizePricePlanRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling finalizePricePlan(Async)");
        }

        // verify the required parameter 'finalizePricePlanRequest' is set
        if (finalizePricePlanRequest == null) {
            throw new ApiException("Missing the required parameter 'finalizePricePlanRequest' when calling finalizePricePlan(Async)");
        }

        return finalizePricePlanCall(pricePlanId, finalizePricePlanRequest, _callback);

    }

    /**
     * Finalize a price plan
     * Finalize a price plan
     * @param pricePlanId  (required)
     * @param finalizePricePlanRequest Payload to finalize price plan (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse finalizePricePlan(String pricePlanId, FinalizePricePlanRequest finalizePricePlanRequest) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = finalizePricePlanWithHttpInfo(pricePlanId, finalizePricePlanRequest);
        return localVarResp.getData();
    }

    /**
     * Finalize a price plan
     * Finalize a price plan
     * @param pricePlanId  (required)
     * @param finalizePricePlanRequest Payload to finalize price plan (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> finalizePricePlanWithHttpInfo(String pricePlanId, FinalizePricePlanRequest finalizePricePlanRequest) throws ApiException {
        okhttp3.Call localVarCall = finalizePricePlanValidateBeforeCall(pricePlanId, finalizePricePlanRequest, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finalize a price plan (asynchronously)
     * Finalize a price plan
     * @param pricePlanId  (required)
     * @param finalizePricePlanRequest Payload to finalize price plan (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call finalizePricePlanAsync(String pricePlanId, FinalizePricePlanRequest finalizePricePlanRequest, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = finalizePricePlanValidateBeforeCall(pricePlanId, finalizePricePlanRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPricePlanV2
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPricePlanV2Call(String pricePlanId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPricePlanV2ValidateBeforeCall(String pricePlanId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling getPricePlanV2(Async)");
        }

        return getPricePlanV2Call(pricePlanId, version, _callback);

    }

    /**
     * Get a price plan
     * Get a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @return PricePlanV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricePlanV2 getPricePlanV2(String pricePlanId, String version) throws ApiException {
        ApiResponse<PricePlanV2> localVarResp = getPricePlanV2WithHttpInfo(pricePlanId, version);
        return localVarResp.getData();
    }

    /**
     * Get a price plan
     * Get a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @return ApiResponse&lt;PricePlanV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePlanV2> getPricePlanV2WithHttpInfo(String pricePlanId, String version) throws ApiException {
        okhttp3.Call localVarCall = getPricePlanV2ValidateBeforeCall(pricePlanId, version, null);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a price plan (asynchronously)
     * Get a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPricePlanV2Async(String pricePlanId, String version, final ApiCallback<PricePlanV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPricePlanV2ValidateBeforeCall(pricePlanId, version, _callback);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricePlanErrors
     * @param pricePlanId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanErrorsCall(String pricePlanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/errors"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricePlanErrorsValidateBeforeCall(String pricePlanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling listPricePlanErrors(Async)");
        }

        return listPricePlanErrorsCall(pricePlanId, _callback);

    }

    /**
     * Get list of errors of a price plan
     * Get list of errors of a price plan
     * @param pricePlanId  (required)
     * @return ValidatedEntityErrorsPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ValidatedEntityErrorsPaginatedResponse listPricePlanErrors(String pricePlanId) throws ApiException {
        ApiResponse<ValidatedEntityErrorsPaginatedResponse> localVarResp = listPricePlanErrorsWithHttpInfo(pricePlanId);
        return localVarResp.getData();
    }

    /**
     * Get list of errors of a price plan
     * Get list of errors of a price plan
     * @param pricePlanId  (required)
     * @return ApiResponse&lt;ValidatedEntityErrorsPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidatedEntityErrorsPaginatedResponse> listPricePlanErrorsWithHttpInfo(String pricePlanId) throws ApiException {
        okhttp3.Call localVarCall = listPricePlanErrorsValidateBeforeCall(pricePlanId, null);
        Type localVarReturnType = new TypeToken<ValidatedEntityErrorsPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of errors of a price plan (asynchronously)
     * Get list of errors of a price plan
     * @param pricePlanId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paginated response for draft entities validations </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanErrorsAsync(String pricePlanId, final ApiCallback<ValidatedEntityErrorsPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricePlanErrorsValidateBeforeCall(pricePlanId, _callback);
        Type localVarReturnType = new TypeToken<ValidatedEntityErrorsPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricePlanPricingRules
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanPricingRulesCall(String pricePlanId, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/pricing_rules"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricePlanPricingRulesValidateBeforeCall(String pricePlanId, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling listPricePlanPricingRules(Async)");
        }

        return listPricePlanPricingRulesCall(pricePlanId, version, _callback);

    }

    /**
     * List pricing rules of a price plan
     * List pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @return PricingRulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricingRulesPaginatedResponse listPricePlanPricingRules(String pricePlanId, String version) throws ApiException {
        ApiResponse<PricingRulesPaginatedResponse> localVarResp = listPricePlanPricingRulesWithHttpInfo(pricePlanId, version);
        return localVarResp.getData();
    }

    /**
     * List pricing rules of a price plan
     * List pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @return ApiResponse&lt;PricingRulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingRulesPaginatedResponse> listPricePlanPricingRulesWithHttpInfo(String pricePlanId, String version) throws ApiException {
        okhttp3.Call localVarCall = listPricePlanPricingRulesValidateBeforeCall(pricePlanId, version, null);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pricing rules of a price plan (asynchronously)
     * List pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param version Optional version to get a specific version. Gets latest version if it is not provided. Possible values: 1. LATEST - Get the latest version of the price plan, can be draft 2. ACTIVE - Get the latest active version of the price plan 3. NUMBER - Get the specific version of the price plans  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanPricingRulesAsync(String pricePlanId, String version, final ApiCallback<PricingRulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricePlanPricingRulesValidateBeforeCall(pricePlanId, version, _callback);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricePlanRateCards
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanRateCardsCall(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/rate_cards"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricePlanRateCardsValidateBeforeCall(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling listPricePlanRateCards(Async)");
        }

        return listPricePlanRateCardsCall(pricePlanId, nextToken, pageSize, _callback);

    }

    /**
     * List rate cards of a price plan
     * List rate cards of a price plan
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return RateCardPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public RateCardPaginatedResponse listPricePlanRateCards(String pricePlanId, String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<RateCardPaginatedResponse> localVarResp = listPricePlanRateCardsWithHttpInfo(pricePlanId, nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List rate cards of a price plan
     * List rate cards of a price plan
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;RateCardPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RateCardPaginatedResponse> listPricePlanRateCardsWithHttpInfo(String pricePlanId, String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPricePlanRateCardsValidateBeforeCall(pricePlanId, nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<RateCardPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List rate cards of a price plan (asynchronously)
     * List rate cards of a price plan
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list rate cards request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanRateCardsAsync(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback<RateCardPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricePlanRateCardsValidateBeforeCall(pricePlanId, nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<RateCardPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricePlanVersions
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanVersionsCall(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/versions"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricePlanVersionsValidateBeforeCall(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling listPricePlanVersions(Async)");
        }

        return listPricePlanVersionsCall(pricePlanId, nextToken, pageSize, _callback);

    }

    /**
     * List price plan versions
     * List price plan versions
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return PricePlanV2PaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricePlanV2PaginatedResponse listPricePlanVersions(String pricePlanId, String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<PricePlanV2PaginatedResponse> localVarResp = listPricePlanVersionsWithHttpInfo(pricePlanId, nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List price plan versions
     * List price plan versions
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;PricePlanV2PaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePlanV2PaginatedResponse> listPricePlanVersionsWithHttpInfo(String pricePlanId, String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPricePlanVersionsValidateBeforeCall(pricePlanId, nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<PricePlanV2PaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List price plan versions (asynchronously)
     * List price plan versions
     * @param pricePlanId  (required)
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlanVersionsAsync(String pricePlanId, String nextToken, BigDecimal pageSize, final ApiCallback<PricePlanV2PaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricePlanVersionsValidateBeforeCall(pricePlanId, nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PricePlanV2PaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPricePlansV2
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlansV2Call(String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/price_plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPricePlansV2ValidateBeforeCall(String nextToken, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        return listPricePlansV2Call(nextToken, pageSize, _callback);

    }

    /**
     * List price plans
     * List price plans
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return PricePlanV2PaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricePlanV2PaginatedResponse listPricePlansV2(String nextToken, BigDecimal pageSize) throws ApiException {
        ApiResponse<PricePlanV2PaginatedResponse> localVarResp = listPricePlansV2WithHttpInfo(nextToken, pageSize);
        return localVarResp.getData();
    }

    /**
     * List price plans
     * List price plans
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @return ApiResponse&lt;PricePlanV2PaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePlanV2PaginatedResponse> listPricePlansV2WithHttpInfo(String nextToken, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = listPricePlansV2ValidateBeforeCall(nextToken, pageSize, null);
        Type localVarReturnType = new TypeToken<PricePlanV2PaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List price plans (asynchronously)
     * List price plans
     * @param nextToken  (optional)
     * @param pageSize  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for list price plans request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPricePlansV2Async(String nextToken, BigDecimal pageSize, final ApiCallback<PricePlanV2PaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPricePlansV2ValidateBeforeCall(nextToken, pageSize, _callback);
        Type localVarReturnType = new TypeToken<PricePlanV2PaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricePlanMigrationV2
     * @param createPricePlanMigrationRequest Payload to create price plan migration request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricePlanMigrationV2Call(CreatePricePlanMigrationRequest createPricePlanMigrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPricePlanMigrationRequest;

        // create path and map variables
        String localVarPath = "/v2/price_plans/migration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricePlanMigrationV2ValidateBeforeCall(CreatePricePlanMigrationRequest createPricePlanMigrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPricePlanMigrationRequest' is set
        if (createPricePlanMigrationRequest == null) {
            throw new ApiException("Missing the required parameter 'createPricePlanMigrationRequest' when calling pricePlanMigrationV2(Async)");
        }

        return pricePlanMigrationV2Call(createPricePlanMigrationRequest, _callback);

    }

    /**
     * Create a price plan v2 migration
     * Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai&#39;s Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
     * @param createPricePlanMigrationRequest Payload to create price plan migration request (required)
     * @return BaseSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public BaseSuccessResponse pricePlanMigrationV2(CreatePricePlanMigrationRequest createPricePlanMigrationRequest) throws ApiException {
        ApiResponse<BaseSuccessResponse> localVarResp = pricePlanMigrationV2WithHttpInfo(createPricePlanMigrationRequest);
        return localVarResp.getData();
    }

    /**
     * Create a price plan v2 migration
     * Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai&#39;s Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
     * @param createPricePlanMigrationRequest Payload to create price plan migration request (required)
     * @return ApiResponse&lt;BaseSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BaseSuccessResponse> pricePlanMigrationV2WithHttpInfo(CreatePricePlanMigrationRequest createPricePlanMigrationRequest) throws ApiException {
        okhttp3.Call localVarCall = pricePlanMigrationV2ValidateBeforeCall(createPricePlanMigrationRequest, null);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a price plan v2 migration (asynchronously)
     * Migrates accounts across price plans. This is an asynchronous process functioning on top of Togai&#39;s Jobs  framework. Status of the created migrations can be obtained using the [Jobs APIs](https://docs.togai.com/api-reference/jobs/get-the-status-of-a-job) 
     * @param createPricePlanMigrationRequest Payload to create price plan migration request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Error response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricePlanMigrationV2Async(CreatePricePlanMigrationRequest createPricePlanMigrationRequest, final ApiCallback<BaseSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricePlanMigrationV2ValidateBeforeCall(createPricePlanMigrationRequest, _callback);
        Type localVarReturnType = new TypeToken<BaseSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePricePlanPricingRules
     * @param pricePlanId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricePlanPricingRulesCall(String pricePlanId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePricingRulesRequest;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}/pricing_rules"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePricePlanPricingRulesValidateBeforeCall(String pricePlanId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling updatePricePlanPricingRules(Async)");
        }

        // verify the required parameter 'updatePricingRulesRequest' is set
        if (updatePricingRulesRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePricingRulesRequest' when calling updatePricePlanPricingRules(Async)");
        }

        return updatePricePlanPricingRulesCall(pricePlanId, updatePricingRulesRequest, _callback);

    }

    /**
     * Update pricing rules of a price plan
     * Update pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @return PricingRulesPaginatedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricingRulesPaginatedResponse updatePricePlanPricingRules(String pricePlanId, UpdatePricingRulesRequest updatePricingRulesRequest) throws ApiException {
        ApiResponse<PricingRulesPaginatedResponse> localVarResp = updatePricePlanPricingRulesWithHttpInfo(pricePlanId, updatePricingRulesRequest);
        return localVarResp.getData();
    }

    /**
     * Update pricing rules of a price plan
     * Update pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @return ApiResponse&lt;PricingRulesPaginatedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingRulesPaginatedResponse> updatePricePlanPricingRulesWithHttpInfo(String pricePlanId, UpdatePricingRulesRequest updatePricingRulesRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePricePlanPricingRulesValidateBeforeCall(pricePlanId, updatePricingRulesRequest, null);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pricing rules of a price plan (asynchronously)
     * Update pricing rules of a price plan
     * @param pricePlanId  (required)
     * @param updatePricingRulesRequest Payload to update pricing rules (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for create/list pricing rules request </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricePlanPricingRulesAsync(String pricePlanId, UpdatePricingRulesRequest updatePricingRulesRequest, final ApiCallback<PricingRulesPaginatedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePricePlanPricingRulesValidateBeforeCall(pricePlanId, updatePricingRulesRequest, _callback);
        Type localVarReturnType = new TypeToken<PricingRulesPaginatedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePricePlanV2
     * @param pricePlanId  (required)
     * @param updatePricePlanV2Request Payload to update price plan (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricePlanV2Call(String pricePlanId, UpdatePricePlanV2Request updatePricePlanV2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePricePlanV2Request;

        // create path and map variables
        String localVarPath = "/v2/price_plans/{price_plan_id}"
            .replace("{" + "price_plan_id" + "}", localVarApiClient.escapeString(pricePlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePricePlanV2ValidateBeforeCall(String pricePlanId, UpdatePricePlanV2Request updatePricePlanV2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pricePlanId' is set
        if (pricePlanId == null) {
            throw new ApiException("Missing the required parameter 'pricePlanId' when calling updatePricePlanV2(Async)");
        }

        // verify the required parameter 'updatePricePlanV2Request' is set
        if (updatePricePlanV2Request == null) {
            throw new ApiException("Missing the required parameter 'updatePricePlanV2Request' when calling updatePricePlanV2(Async)");
        }

        return updatePricePlanV2Call(pricePlanId, updatePricePlanV2Request, _callback);

    }

    /**
     * Update a price plan
     * Update a price plan
     * @param pricePlanId  (required)
     * @param updatePricePlanV2Request Payload to update price plan (required)
     * @return PricePlanV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PricePlanV2 updatePricePlanV2(String pricePlanId, UpdatePricePlanV2Request updatePricePlanV2Request) throws ApiException {
        ApiResponse<PricePlanV2> localVarResp = updatePricePlanV2WithHttpInfo(pricePlanId, updatePricePlanV2Request);
        return localVarResp.getData();
    }

    /**
     * Update a price plan
     * Update a price plan
     * @param pricePlanId  (required)
     * @param updatePricePlanV2Request Payload to update price plan (required)
     * @return ApiResponse&lt;PricePlanV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricePlanV2> updatePricePlanV2WithHttpInfo(String pricePlanId, UpdatePricePlanV2Request updatePricePlanV2Request) throws ApiException {
        okhttp3.Call localVarCall = updatePricePlanV2ValidateBeforeCall(pricePlanId, updatePricePlanV2Request, null);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a price plan (asynchronously)
     * Update a price plan
     * @param pricePlanId  (required)
     * @param updatePricePlanV2Request Payload to update price plan (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response for Create and Get price plan requests </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePricePlanV2Async(String pricePlanId, UpdatePricePlanV2Request updatePricePlanV2Request, final ApiCallback<PricePlanV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePricePlanV2ValidateBeforeCall(pricePlanId, updatePricePlanV2Request, _callback);
        Type localVarReturnType = new TypeToken<PricePlanV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
