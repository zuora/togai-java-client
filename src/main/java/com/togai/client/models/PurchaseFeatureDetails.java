/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * PurchaseFeatureDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PurchaseFeatureDetails implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_CREDITS_GRANTED = "creditsGranted";
  @SerializedName(SERIALIZED_NAME_CREDITS_GRANTED)
  @javax.annotation.Nonnull
  private BigDecimal creditsGranted;

  public static final String SERIALIZED_NAME_CREDITS_AVAILABLE = "creditsAvailable";
  @SerializedName(SERIALIZED_NAME_CREDITS_AVAILABLE)
  @javax.annotation.Nonnull
  private BigDecimal creditsAvailable;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effectiveFrom";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  @javax.annotation.Nonnull
  private OffsetDateTime effectiveFrom;

  public static final String SERIALIZED_NAME_EFFECTIVE_UNTIL = "effectiveUntil";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_UNTIL)
  @javax.annotation.Nonnull
  private OffsetDateTime effectiveUntil;

  public PurchaseFeatureDetails() {
  }

  public PurchaseFeatureDetails id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PurchaseFeatureDetails name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public PurchaseFeatureDetails creditsGranted(@javax.annotation.Nonnull BigDecimal creditsGranted) {
    this.creditsGranted = creditsGranted;
    return this;
  }

  /**
   * Get creditsGranted
   * @return creditsGranted
   */
  @javax.annotation.Nonnull
  public BigDecimal getCreditsGranted() {
    return creditsGranted;
  }

  public void setCreditsGranted(@javax.annotation.Nonnull BigDecimal creditsGranted) {
    this.creditsGranted = creditsGranted;
  }


  public PurchaseFeatureDetails creditsAvailable(@javax.annotation.Nonnull BigDecimal creditsAvailable) {
    this.creditsAvailable = creditsAvailable;
    return this;
  }

  /**
   * Get creditsAvailable
   * @return creditsAvailable
   */
  @javax.annotation.Nonnull
  public BigDecimal getCreditsAvailable() {
    return creditsAvailable;
  }

  public void setCreditsAvailable(@javax.annotation.Nonnull BigDecimal creditsAvailable) {
    this.creditsAvailable = creditsAvailable;
  }


  public PurchaseFeatureDetails updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PurchaseFeatureDetails effectiveFrom(@javax.annotation.Nonnull OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
    return this;
  }

  /**
   * Get effectiveFrom
   * @return effectiveFrom
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEffectiveFrom() {
    return effectiveFrom;
  }

  public void setEffectiveFrom(@javax.annotation.Nonnull OffsetDateTime effectiveFrom) {
    this.effectiveFrom = effectiveFrom;
  }


  public PurchaseFeatureDetails effectiveUntil(@javax.annotation.Nonnull OffsetDateTime effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
    return this;
  }

  /**
   * Get effectiveUntil
   * @return effectiveUntil
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEffectiveUntil() {
    return effectiveUntil;
  }

  public void setEffectiveUntil(@javax.annotation.Nonnull OffsetDateTime effectiveUntil) {
    this.effectiveUntil = effectiveUntil;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PurchaseFeatureDetails purchaseFeatureDetails = (PurchaseFeatureDetails) o;
    return Objects.equals(this.id, purchaseFeatureDetails.id) &&
        Objects.equals(this.name, purchaseFeatureDetails.name) &&
        Objects.equals(this.creditsGranted, purchaseFeatureDetails.creditsGranted) &&
        Objects.equals(this.creditsAvailable, purchaseFeatureDetails.creditsAvailable) &&
        Objects.equals(this.updatedAt, purchaseFeatureDetails.updatedAt) &&
        Objects.equals(this.effectiveFrom, purchaseFeatureDetails.effectiveFrom) &&
        Objects.equals(this.effectiveUntil, purchaseFeatureDetails.effectiveUntil);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, creditsGranted, creditsAvailable, updatedAt, effectiveFrom, effectiveUntil);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PurchaseFeatureDetails {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    creditsGranted: ").append(toIndentedString(creditsGranted)).append("\n");
    sb.append("    creditsAvailable: ").append(toIndentedString(creditsAvailable)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    effectiveUntil: ").append(toIndentedString(effectiveUntil)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("creditsGranted");
    openapiFields.add("creditsAvailable");
    openapiFields.add("updatedAt");
    openapiFields.add("effectiveFrom");
    openapiFields.add("effectiveUntil");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("creditsGranted");
    openapiRequiredFields.add("creditsAvailable");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("effectiveFrom");
    openapiRequiredFields.add("effectiveUntil");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PurchaseFeatureDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PurchaseFeatureDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PurchaseFeatureDetails is not found in the empty JSON string", PurchaseFeatureDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PurchaseFeatureDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PurchaseFeatureDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PurchaseFeatureDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PurchaseFeatureDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PurchaseFeatureDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PurchaseFeatureDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PurchaseFeatureDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PurchaseFeatureDetails>() {
           @Override
           public void write(JsonWriter out, PurchaseFeatureDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PurchaseFeatureDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PurchaseFeatureDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PurchaseFeatureDetails
   * @throws IOException if the JSON string is invalid with respect to PurchaseFeatureDetails
   */
  public static PurchaseFeatureDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PurchaseFeatureDetails.class);
  }

  /**
   * Convert an instance of PurchaseFeatureDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

