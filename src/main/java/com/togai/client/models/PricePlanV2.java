/*
 * Togai Apis
 * APIs for Togai App
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engg@togai.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.togai.client.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.togai.client.models.PricePlanType;
import com.togai.client.models.PricingCycleConfig;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.Serializable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.togai.client.JSON;

/**
 * PricePlanV2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class PricePlanV2 implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private PricePlanType type;

  public static final String SERIALIZED_NAME_PRICING_CYCLE_CONFIG = "pricingCycleConfig";
  @SerializedName(SERIALIZED_NAME_PRICING_CYCLE_CONFIG)
  @javax.annotation.Nullable
  private PricingCycleConfig pricingCycleConfig;

  public static final String SERIALIZED_NAME_SUPPORTED_CURRENCIES = "supportedCurrencies";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_CURRENCIES)
  @javax.annotation.Nonnull
  private Set<String> supportedCurrencies = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_DEFERRED_REVENUE = "deferredRevenue";
  @SerializedName(SERIALIZED_NAME_DEFERRED_REVENUE)
  @javax.annotation.Nullable
  private Boolean deferredRevenue;

  public static final String SERIALIZED_NAME_ALLOW_ONGOING_CYCLE_UPDATES = "allowOngoingCycleUpdates";
  @SerializedName(SERIALIZED_NAME_ALLOW_ONGOING_CYCLE_UPDATES)
  @javax.annotation.Nullable
  private Boolean allowOngoingCycleUpdates;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  @javax.annotation.Nonnull
  private String referenceId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private Integer version;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nonnull
  private StatusEnum status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public PricePlanV2() {
  }

  public PricePlanV2 name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the price plan
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public PricePlanV2 description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of price plan
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PricePlanV2 type(@javax.annotation.Nonnull PricePlanType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public PricePlanType getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull PricePlanType type) {
    this.type = type;
  }


  public PricePlanV2 pricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
    return this;
  }

  /**
   * Get pricingCycleConfig
   * @return pricingCycleConfig
   */
  @javax.annotation.Nullable
  public PricingCycleConfig getPricingCycleConfig() {
    return pricingCycleConfig;
  }

  public void setPricingCycleConfig(@javax.annotation.Nullable PricingCycleConfig pricingCycleConfig) {
    this.pricingCycleConfig = pricingCycleConfig;
  }


  public PricePlanV2 supportedCurrencies(@javax.annotation.Nonnull Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
    return this;
  }

  public PricePlanV2 addSupportedCurrenciesItem(String supportedCurrenciesItem) {
    if (this.supportedCurrencies == null) {
      this.supportedCurrencies = new LinkedHashSet<>();
    }
    this.supportedCurrencies.add(supportedCurrenciesItem);
    return this;
  }

  /**
   * List of currencies supported by the price plan
   * @return supportedCurrencies
   */
  @javax.annotation.Nonnull
  public Set<String> getSupportedCurrencies() {
    return supportedCurrencies;
  }

  public void setSupportedCurrencies(@javax.annotation.Nonnull Set<String> supportedCurrencies) {
    this.supportedCurrencies = supportedCurrencies;
  }


  public PricePlanV2 deferredRevenue(@javax.annotation.Nullable Boolean deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
    return this;
  }

  /**
   * This option can be enabled while creating a price plan to opt for deferred revenue finalization. i.e, Togai will assume that the price plan may change any time during the pricing cycle and  thereby does not compute the revenue in near-real time.  This gives the flexibility of editing rate cards in price plan from beginning of the pricing cycle. Enabling this mode comes with the following limitations. 1. Following rate cards are not supported under a &#x60;deferredRevenue&#x60; plan     * creditGrantRateCards,     * billingEntitlementRateCards,     * entitlementOverageRateCards,     * IN_ADVANCE fixedFeeRateCards,     * IN_ADVANCE licenseRateCards 2. Metrics API return revenue metrics only after the grace period of the account&#39;s pricing cycle  (i.e, only once the invoice becomes DUE) 
   * @return deferredRevenue
   */
  @javax.annotation.Nullable
  public Boolean getDeferredRevenue() {
    return deferredRevenue;
  }

  public void setDeferredRevenue(@javax.annotation.Nullable Boolean deferredRevenue) {
    this.deferredRevenue = deferredRevenue;
  }


  public PricePlanV2 allowOngoingCycleUpdates(@javax.annotation.Nullable Boolean allowOngoingCycleUpdates) {
    this.allowOngoingCycleUpdates = allowOngoingCycleUpdates;
    return this;
  }

  /**
   * Allow changes to price plan from the beginning of the ongoing cycle. 
   * @return allowOngoingCycleUpdates
   */
  @javax.annotation.Nullable
  public Boolean getAllowOngoingCycleUpdates() {
    return allowOngoingCycleUpdates;
  }

  public void setAllowOngoingCycleUpdates(@javax.annotation.Nullable Boolean allowOngoingCycleUpdates) {
    this.allowOngoingCycleUpdates = allowOngoingCycleUpdates;
  }


  public PricePlanV2 id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public PricePlanV2 referenceId(@javax.annotation.Nonnull String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * Get referenceId
   * @return referenceId
   */
  @javax.annotation.Nonnull
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(@javax.annotation.Nonnull String referenceId) {
    this.referenceId = referenceId;
  }


  public PricePlanV2 version(@javax.annotation.Nonnull Integer version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public Integer getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull Integer version) {
    this.version = version;
  }


  public PricePlanV2 status(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nonnull StatusEnum status) {
    this.status = status;
  }


  public PricePlanV2 createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PricePlanV2 updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PricePlanV2 pricePlanV2 = (PricePlanV2) o;
    return Objects.equals(this.name, pricePlanV2.name) &&
        Objects.equals(this.description, pricePlanV2.description) &&
        Objects.equals(this.type, pricePlanV2.type) &&
        Objects.equals(this.pricingCycleConfig, pricePlanV2.pricingCycleConfig) &&
        Objects.equals(this.supportedCurrencies, pricePlanV2.supportedCurrencies) &&
        Objects.equals(this.deferredRevenue, pricePlanV2.deferredRevenue) &&
        Objects.equals(this.allowOngoingCycleUpdates, pricePlanV2.allowOngoingCycleUpdates) &&
        Objects.equals(this.id, pricePlanV2.id) &&
        Objects.equals(this.referenceId, pricePlanV2.referenceId) &&
        Objects.equals(this.version, pricePlanV2.version) &&
        Objects.equals(this.status, pricePlanV2.status) &&
        Objects.equals(this.createdAt, pricePlanV2.createdAt) &&
        Objects.equals(this.updatedAt, pricePlanV2.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, type, pricingCycleConfig, supportedCurrencies, deferredRevenue, allowOngoingCycleUpdates, id, referenceId, version, status, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PricePlanV2 {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    pricingCycleConfig: ").append(toIndentedString(pricingCycleConfig)).append("\n");
    sb.append("    supportedCurrencies: ").append(toIndentedString(supportedCurrencies)).append("\n");
    sb.append("    deferredRevenue: ").append(toIndentedString(deferredRevenue)).append("\n");
    sb.append("    allowOngoingCycleUpdates: ").append(toIndentedString(allowOngoingCycleUpdates)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("type");
    openapiFields.add("pricingCycleConfig");
    openapiFields.add("supportedCurrencies");
    openapiFields.add("deferredRevenue");
    openapiFields.add("allowOngoingCycleUpdates");
    openapiFields.add("id");
    openapiFields.add("referenceId");
    openapiFields.add("version");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("supportedCurrencies");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("referenceId");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PricePlanV2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PricePlanV2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PricePlanV2 is not found in the empty JSON string", PricePlanV2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PricePlanV2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PricePlanV2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PricePlanV2.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `type`
      PricePlanType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `pricingCycleConfig`
      if (jsonObj.get("pricingCycleConfig") != null && !jsonObj.get("pricingCycleConfig").isJsonNull()) {
        PricingCycleConfig.validateJsonElement(jsonObj.get("pricingCycleConfig"));
      }
      // ensure the required json array is present
      if (jsonObj.get("supportedCurrencies") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("supportedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("supportedCurrencies").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("referenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referenceId").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PricePlanV2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PricePlanV2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PricePlanV2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PricePlanV2.class));

       return (TypeAdapter<T>) new TypeAdapter<PricePlanV2>() {
           @Override
           public void write(JsonWriter out, PricePlanV2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PricePlanV2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PricePlanV2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PricePlanV2
   * @throws IOException if the JSON string is invalid with respect to PricePlanV2
   */
  public static PricePlanV2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PricePlanV2.class);
  }

  /**
   * Convert an instance of PricePlanV2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

